<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="master.zip">

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/BetaMinHash.java" hash="c0a580ad5f1aa27ea2ab22b4b26f82b2b744519d"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation of HyperMinHash described in Yu and Weber: https://arxiv.org/pdf/1710.08436.pdf.
 * This class implements LogLog-Beta described in Qin, Kim, et al. here:
 * https://arxiv.org/pdf/1612.02284.pdf. Loglog-Beta is almost identical in accuracy to HyperLogLog
 * and HyperLogLog++ except it performs better on cardinality estimations for small datasets (n &amp;le;
 * 200_000). It's also much simpler to implement.
 *
 * The log log implementation uses the values of p and beta coefficients tested in the Loglog-beta
 * paper. It's possible to use different values of P but we'd need to recompute the beta
 * coefficients which is a computationally intensive process. So for now, this impl doesn't support
 * using different values of P. This being said the current value of P works with high accuracy for
 * very large cardinalities and small jaccard  indices. See the paper for more details.
 *
 * Similarly, we use values of Q and R suggested in the HyperMinHash paper. Those are theoretically
 * changeable, but the current values should provide sufficient accuracy for set cardinalities up to
 * 2^89 (see Hyperminhash paper for reference).
 *
 * If you want to be able to combine multiple BetaMinHash instances, or compute their intersection,
 * you can use {@link BetaMinHashCombiner}.
 *
 * If you'd like this class to support custom Q or R or P values, please open a github issue.
 */</comment>

<class><specifier>public</specifier> class <name>BetaMinHash</name> <super_list><implements>implements <super><name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <comment type="line">// HLL Precision parameter</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM_REGISTERS</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// TODO add actual validation if necessary</comment>
  <comment type="line">// Q + R must always be &lt;= 16 since we're packing values into 16 bit registers</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>Q</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>R</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HASH_SEED</name> <init>= <expr><literal type="number">1337</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>VERSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>final</specifier> <name><name>short</name><index>[]</index></name></type> <name>registers</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>BetaMinHash</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>registers</name> <operator>=</operator> <operator>new</operator> <name><name>short</name><index>[<expr><name>NUM_REGISTERS</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>private</specifier> <name>BetaMinHash</name><parameter_list>(<parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>registers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>registers</name></name> <operator>=</operator> <name>registers</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>static</specifier> <name>BetaMinHash</name></type> <name>deepCopyFromRegisters</name><parameter_list>(<parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>registers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>registers</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>NUM_REGISTERS</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
          <argument><expr><literal type="string">"Expected exactly %d registers, but there are %d"</literal></expr></argument>,
          <argument><expr><name>NUM_REGISTERS</name></expr></argument>,
          <argument><expr><name><name>registers</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>short</name><index>[]</index></name></type> <name>registersCopy</name> <init>= <expr><operator>new</operator> <name><name>short</name><index>[<expr><name>NUM_REGISTERS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>registers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NUM_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>wrapRegisters</name><argument_list>(<argument><expr><name>registersCopy</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>BetaMinHash</name></type> <name>wrapRegisters</name><parameter_list>(<parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>registers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>cardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>BetaMinHashCardinalityGetter</name><operator>.</operator><name>cardinality</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>offer</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>_128BitHash</name> <init>= <expr><call><name><name>Murmur3</name><operator>.</operator><name>hash128</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>buf</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name><name>_128BitHash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name><name>_128BitHash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>addHash</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>BetaMinHash</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>BetaMinHash</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>BetaMinHash</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>registers</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>BetaMinHash</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>deepCopyFromRegisters</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>registers</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param _128BitHash
   */</comment>
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>addHash</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>_128BitHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>_128BitHash</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"input hash should be 16 bytes"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>hashLeftHalf</name> <init>= <expr><call><name><name>_128BitHash</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>registerIndex</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>BitHelper</name><operator>.</operator><name>getLeftmostBits</name></name><argument_list>(<argument><expr><name>hashLeftHalf</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>short</name></type> <name>leftmostOneBitPosition</name> <init>= <expr><call><name><name>BitHelper</name><operator>.</operator><name>getLeftmostOneBitPosition</name></name><argument_list>(<argument><expr><call><name><name>_128BitHash</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* We take the rightmost bits as what's called h_hat3 in the paper. Note that his differs from
     * the diagram in the paper which draws a parallel to a mantissa in a floating point
     * representation, but still satisfies the criterion of serving as an independent hash function
     * by selecting a set of independent bits from a larger hash. This is slightly simpler to
     * implement. */</comment>
    <decl_stmt><decl><type><name>short</name></type> <name>rBits</name> <init>= <expr><operator>(</operator><name>short</name><operator>)</operator> <call><name><name>BitHelper</name><operator>.</operator><name>getRightmostBits</name></name><argument_list>(<argument><expr><call><name><name>_128BitHash</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>short</name></type> <name>packedRegister</name> <init>= <expr><call><name>packIntoRegister</name><argument_list>(<argument><expr><name>leftmostOneBitPosition</name></expr></argument>, <argument><expr><name>rBits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name> <operator>&lt;</operator> <name>packedRegister</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name> <operator>=</operator> <name>packedRegister</name></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a new tuple/register value for the LL-Beta by bit-packing the number of leading zeros
   * with the rightmost R bits.
   */</comment>
  <function><type><specifier>private</specifier> <name>short</name></type> <name>packIntoRegister</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>leftmostOnebitPosition</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>rightmostRBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Q is at most 6, which means that with R&lt;=10, we should be able to store these two</comment>
    <comment type="line">// numbers in the same register</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>exponent</name> <init>= <expr><name>leftmostOnebitPosition</name> <operator>&lt;&lt;</operator> <name>R</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>packedRegister</name> <init>= <expr><operator>(</operator><name>exponent</name> <operator>|</operator> <name>rightmostRBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <name>packedRegister</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/BetaMinHashCardinalityGetter.java" hash="8542c3f5cc87e7fe856e5ce1647ee3e0eee015d5"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<class>class <name>BetaMinHashCardinalityGetter</name> <block>{

  <function><type><specifier>static</specifier> <name>long</name></type> <name>cardinality</name><parameter_list>(<parameter><decl><type><name>BetaMinHash</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Formula (2) in Qin et al.</comment>
    <decl_stmt><decl><type><name>SumAndZeros</name></type> <name>saz</name> <init>= <expr><call><name>getRegisterSumAndZeros</name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><name><name>saz</name><operator>.</operator><name>sum</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>zeros</name> <init>= <expr><name><name>saz</name><operator>.</operator><name>zeros</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>mHat</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>BetaMinHash</name><operator>.</operator><name>NUM_REGISTERS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>alpha</name> <init>= <expr><call><name>alpha</name><argument_list>(<argument><expr><name><name>BetaMinHash</name><operator>.</operator><name>NUM_REGISTERS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>alpha</name> <operator>*</operator> <name>mHat</name> <operator>*</operator> <operator>(</operator><name>mHat</name> <operator>-</operator> <name>zeros</name><operator>)</operator> <operator>/</operator> <operator>(</operator><call><name>beta</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>sum</name><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SumAndZeros</name></type> <name>getRegisterSumAndZeros</name><parameter_list>(<parameter><decl><type><name>BetaMinHash</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uninitializedRegisters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>short</name></type> <name>register</name> <range>: <expr><name><name>sketch</name><operator>.</operator><name>registers</name></name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>byte</name></type> <name>leadingZeros</name> <init>= <expr><call><name>leadingZeros</name><argument_list>(<argument><expr><name>register</name></expr></argument>, <argument><expr><name><name>BetaMinHash</name><operator>.</operator><name>Q</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>leadingZeros</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>uninitializedRegisters</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">1</literal> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>leadingZeros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>new</operator> <call><name>SumAndZeros</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>uninitializedRegisters</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>byte</name></type> <name>leadingZeros</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>register</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>register</name> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Short</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>q</name><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Alpha parameter as shown in Figure 3 of the Hyperloglog paper by Flajolet, Philippe, et al.
   * found here: http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf.
   *
   * @param hllSize number of registers used in the HLL.
   * @return the alpha value
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>alpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hllSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>hllSize</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">16</literal></expr>:</case>
        <return>return <expr><literal type="number">0.673</literal></expr>;</return>
      <case>case <expr><literal type="number">32</literal></expr>:</case>
        <return>return <expr><literal type="number">0.697</literal></expr>;</return>
      <case>case <expr><literal type="number">64</literal></expr>:</case>
        <return>return <expr><literal type="number">0.709</literal></expr>;</return>
      <default>default:</default>
        <return>return <expr><literal type="number">0.7213</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">1.079</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>hllSize</name><operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param zeros The number of leading 0s in the first (2^Q)-1 bits
   * @return the beta value
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>beta</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>zeros</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>log</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>zeros</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>-</operator><literal type="number">0.370393911</literal> <operator>*</operator> <name>zeros</name> <operator>+</operator>
        <literal type="number">0.070471823</literal> <operator>*</operator> <name>log</name> <operator>+</operator>
        <literal type="number">0.17393686</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
        <literal type="number">0.16339839</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator>
        <operator>-</operator><literal type="number">0.09237745</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>
        <literal type="number">0.03738027</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator>
        <operator>-</operator><literal type="number">0.005384159</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator>
        <literal type="number">0.00042419</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SumAndZeros</name> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>sum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>zeros</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param sum
     * @param zeros
     */</comment>
    <constructor><name>SumAndZeros</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>sum</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zeros</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zeros</name></name> <operator>=</operator> <name>zeros</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/BetaMinHashCombiner.java" hash="7b34f4dff9e7c7176d5a53fefd27ff58f7a79618"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<class><specifier>public</specifier> class <name>BetaMinHashCombiner</name> <super_list><implements>implements <super><name><name>SketchCombiner</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BetaMinHashCombiner</name></type> <name>INSTANCE</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHashCombiner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>BetaMinHashCombiner</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BetaMinHashCombiner</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>INSTANCE</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <specifier>final</specifier> <name>BetaMinHash</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input sketches cannot be empty."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>BetaMinHash</name></type> <name>firstSketch</name> <init>= <expr><call><name><name>sketches</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>firstSketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numRegisters</name> <init>= <expr><name><name>firstSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BetaMinHash</name></type> <name>mergedSketch</name> <init>= <expr><call><name><name>firstSketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRegisters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>BetaMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>mergedSketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(
            <argument><expr><name><name>mergedSketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
            <argument><expr><name><name>sketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><name>mergedSketch</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>intersectionCardinality</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input sketches cannot be empty."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><call><name>similarity</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>union</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cardinality</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>double</name></type> <name>similarity</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Algorithm 4 in HyperMinHash paper</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input sketches cannot be empty."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1.0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BetaMinHash</name></type> <name>firstSketch</name> <init>= <expr><call><name><name>sketches</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>firstSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>firstSketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>itemInIntersection</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>BetaMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><name>itemInIntersection</name> <operator>=</operator>
              <name>itemInIntersection</name> <operator>&amp;&amp;</operator> <name><name>firstSketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>sketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>itemInIntersection</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>BetaMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>sketch</name><operator>.</operator><name>registers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>cardinalities</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>BetaMinHash</name></type> <name>sk</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>cardinalities</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name><name>sk</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>BetaMinHash</name><operator>.</operator><name>P</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name><name>BetaMinHash</name><operator>.</operator><name>Q</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>BetaMinHash</name><operator>.</operator><name>R</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>numExpectedCollisions</name> <init>= <expr><call><name>expectedCollision</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cardinalities</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>numExpectedCollisions</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <name>numExpectedCollisions</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>n</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>expectedCollision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>...</modifier></type> <name>cardinalities</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>_2q</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>q</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>_2r</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>r</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>_2q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>_2r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>_2q</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>den</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>_2r</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><name>_2r</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>den</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>b1</name> <operator>=</operator> <name>j</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>product</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>double</name></type> <name>cardinality</name> <range>: <expr><name>cardinalities</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><name>product</name> <operator>*=</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>b2</name></expr></argument>, <argument><expr><name>cardinality</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>b1</name></expr></argument>, <argument><expr><name>cardinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>product</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>x</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>short</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/BetaMinHashSerde.java" hash="e3b08679b2be089d4296dd29f976897d7a04ac6f"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name><operator>.</operator><name>BetaMinHash</name><operator>.</operator><name>NUM_REGISTERS</name></name>;</import>

<class><specifier>public</specifier> class <name>BetaMinHashSerde</name> <super_list><implements>implements <super><name><name>IntersectionSketch</name><operator>.</operator><name><name>SerDe</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></name></super></implements></super_list> <block>{

  <comment type="block">/*
    Format:

      serde token (byte)
      version (byte)
      registers (NUM_REGISTERS * short)
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>BetaMinHash</name></type> <name>fromBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>short</name><index>[]</index></name></type> <name>registers</name> <init>= <expr><operator>new</operator> <name><name>short</name><index>[<expr><name><name>BetaMinHash</name><operator>.</operator><name>NUM_REGISTERS</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>inputBuffer</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>byte</name></type> <name>serdeToken</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>BetaMinHash</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><call><name><name>SerializationTokens</name><operator>.</operator><name>getClassForToken</name></name><argument_list>(<argument><expr><name>serdeToken</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input bytes do not represent a BetaMinHash object!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>byte</name></type> <name>version</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// 1 is the only supported version thus far</comment>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
          <argument><expr><literal type="string">"Sketch version is "</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">". Only version 1 is supported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_REGISTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>registers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>inputBuffer</name><operator>.</operator><name>getShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><call><name><name>BetaMinHash</name><operator>.</operator><name>wrapRegisters</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>toBytes</name><parameter_list>(<parameter><decl><type><name>BetaMinHash</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>byteBuffer</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><call><name>sizeInBytes</name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>byteBuffer</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>SerializationTokens</name><operator>.</operator><name>getTokenForClass</name></name><argument_list>(<argument><expr><name><name>BetaMinHash</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>byteBuffer</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>BetaMinHash</name><operator>.</operator><name>VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>short</name></type> <name>s</name> <range>: <expr><name><name>sketch</name><operator>.</operator><name>registers</name></name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>byteBuffer</name><operator>.</operator><name>putShort</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>byteBuffer</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>sizeInBytes</name><parameter_list>(<parameter><decl><type><name>BetaMinHash</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>Byte</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// serde token</comment>
        <name><name>Byte</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// version</comment>
        <name>NUM_REGISTERS</name> <operator>*</operator> <name><name>Short</name><operator>.</operator><name>BYTES</name></name></expr>;</return> <comment type="line">// size of registers</comment>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/BitHelper.java" hash="10fee62d479065cf2fed50d773e2c4651fd24079"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<class>class <name>BitHelper</name> <block>{

  <comment type="block" format="javadoc">/**
   * @return the leftmost (most significant) {@code numBits} bits in {@code value} in int as the
   *     {@code numBits} least significant bits in that int.
   */</comment>
  <function><type><specifier>static</specifier> <name>long</name></type> <name>getLeftmostBits</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numBits</name> <operator>&gt;=</operator> <name><name>Long</name><operator>.</operator><name>SIZE</name></name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"numBits must be &lt; %d"</literal></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>numBits</name><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>longToBits</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>bits</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>Long</name><operator>.</operator><name>SIZE</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>Long</name><operator>.</operator><name>SIZE</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>num</name> <operator>&gt;&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>bits</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return the position of the leftmost one-bit among the 2^q bits _after_ the first p bits.
   *
   *     Bit position is 0-indexed within the 2^q bits. e.g. if p = 2 and q = 2, then the value
   *     returned for the hash value with bit string "100010..." would be 2.
   */</comment>

  <function><type><specifier>static</specifier> <name>short</name></type> <name>getLeftmostOneBitPosition</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>bits</name> <init>= <expr><call><name><name>BitHelper</name><operator>.</operator><name>getBitsAsBooleans</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getLeftmostOneBitPosition</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return The rightmost {@code r} bits from {@code hash}.
   */</comment>
  <function><type><specifier>static</specifier> <name>long</name></type> <name>getRightmostBits</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>bits</name> <init>= <expr><call><name><name>BitHelper</name><operator>.</operator><name>getBitsAsBooleans</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>BitHelper</name><operator>.</operator><name>bitsToLong</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>copyOfRange</name></name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>bits</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>r</name></expr></argument>, <argument><expr><name><name>bits</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @return the long represented by {@code bits}, interpretted in little-endian order.
   */</comment>
  <function><type><specifier>static</specifier> <name>long</name></type> <name>bitsToLong</name><parameter_list>(<parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>Long</name><operator>.</operator><name>SIZE</name></name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
          <argument><expr><literal type="string">"num bits is greater than size of long. Num bits: "</literal> <operator>+</operator> <name><name>bits</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>bits</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>out</name> <operator>+=</operator> <ternary><condition><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>out</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>short</name></type> <name>getLeftmostOneBitPosition</name><parameter_list>(<parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>_2toTheQ</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>offset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_2toTheQ</name> <operator>+</operator> <name>offset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>_2toTheQ</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBytes</name><parameter_list>(<parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>bitString</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>byteLen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><name><name>bitString</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>byteLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>exp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>byteIndex</name> <init>= <expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>bitString</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>bitString</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>byteIndex</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>exp</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>exp</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>byteIndex</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>bytes</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>getBitsAsBooleans</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>output</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <range>: <expr><name>bytes</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>shiftedMask</name> <init>= <expr><name>mask</name> <operator>&gt;&gt;&gt;</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>boolIndex</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name><name>Byte</name><operator>.</operator><name>SIZE</name></name><operator>)</operator> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>output</name><index>[<expr><name>boolIndex</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <name>shiftedMask</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>==</operator> <name>mask</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>output</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/HmhCardinalityEstimator.java" hash="33d9b60c855d5ecc3703c39a927a33bd6f019e31"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>math3</name><operator>.</operator><name>analysis</name><operator>.</operator><name>interpolation</name><operator>.</operator><name>LinearInterpolator</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<class>class <name>HmhCardinalityEstimator</name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MIN_P</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// Data from "Appendix to HyperLogLog in Practice: Algorithmic Engineering of a State of the Art</comment>
  <comment type="line">// Cardinality Estimation Algorithm."</comment>
  <comment type="line">// by Stefan Heule, Marc Nunkesser, and Alexander Hall.</comment>
  <comment type="line">// https://docs.google.com/document/d/1gyjfMHy43U9OWBXxfaeG-3MjGzejW1dlpyMwEYAAWEI/view?fullscreen#</comment>
  <comment type="line">//</comment>
  <comment type="line">// We can re-use this bias data because our registers track the number of leading zeroes in the</comment>
  <comment type="line">// first 64 - p bits in the hash, which is analogous to to tracking the number of leading zeroes</comment>
  <comment type="line">// in 64 - p least significant bits in a 64 bit hash, as HLL++ does.</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index><index>[]</index></name></type> <name>rawEstimateData</name> <init>= <expr><block>{
      <comment type="line">// precision 4</comment>
      <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11.717</literal></expr>, <expr><literal type="number">12.207</literal></expr>, <expr><literal type="number">12.7896</literal></expr>, <expr><literal type="number">13.2882</literal></expr>, <expr><literal type="number">13.8204</literal></expr>, <expr><literal type="number">14.3772</literal></expr>, <expr><literal type="number">14.9342</literal></expr>, <expr><literal type="number">15.5202</literal></expr>, <expr><literal type="number">16.161</literal></expr>, <expr><literal type="number">16.7722</literal></expr>,
          <expr><literal type="number">17.4636</literal></expr>, <expr><literal type="number">18.0396</literal></expr>, <expr><literal type="number">18.6766</literal></expr>, <expr><literal type="number">19.3566</literal></expr>, <expr><literal type="number">20.0454</literal></expr>, <expr><literal type="number">20.7936</literal></expr>, <expr><literal type="number">21.4856</literal></expr>, <expr><literal type="number">22.2666</literal></expr>, <expr><literal type="number">22.9946</literal></expr>, <expr><literal type="number">23.766</literal></expr>,
          <expr><literal type="number">24.4692</literal></expr>, <expr><literal type="number">25.3638</literal></expr>, <expr><literal type="number">26.0764</literal></expr>, <expr><literal type="number">26.7864</literal></expr>, <expr><literal type="number">27.7602</literal></expr>, <expr><literal type="number">28.4814</literal></expr>, <expr><literal type="number">29.433</literal></expr>, <expr><literal type="number">30.2926</literal></expr>, <expr><literal type="number">31.0664</literal></expr>, <expr><literal type="number">31.9996</literal></expr>,
          <expr><literal type="number">32.7956</literal></expr>, <expr><literal type="number">33.5366</literal></expr>, <expr><literal type="number">34.5894</literal></expr>, <expr><literal type="number">35.5738</literal></expr>, <expr><literal type="number">36.2698</literal></expr>, <expr><literal type="number">37.3682</literal></expr>, <expr><literal type="number">38.0544</literal></expr>, <expr><literal type="number">39.2342</literal></expr>, <expr><literal type="number">40.0108</literal></expr>, <expr><literal type="number">40.7966</literal></expr>,
          <expr><literal type="number">41.9298</literal></expr>, <expr><literal type="number">42.8704</literal></expr>, <expr><literal type="number">43.6358</literal></expr>, <expr><literal type="number">44.5194</literal></expr>, <expr><literal type="number">45.773</literal></expr>, <expr><literal type="number">46.6772</literal></expr>, <expr><literal type="number">47.6174</literal></expr>, <expr><literal type="number">48.4888</literal></expr>, <expr><literal type="number">49.3304</literal></expr>, <expr><literal type="number">50.2506</literal></expr>,
          <expr><literal type="number">51.4996</literal></expr>, <expr><literal type="number">52.3824</literal></expr>, <expr><literal type="number">53.3078</literal></expr>, <expr><literal type="number">54.3984</literal></expr>, <expr><literal type="number">55.5838</literal></expr>, <expr><literal type="number">56.6618</literal></expr>, <expr><literal type="number">57.2174</literal></expr>, <expr><literal type="number">58.3514</literal></expr>, <expr><literal type="number">59.0802</literal></expr>, <expr><literal type="number">60.1482</literal></expr>,
          <expr><literal type="number">61.0376</literal></expr>, <expr><literal type="number">62.3598</literal></expr>, <expr><literal type="number">62.8078</literal></expr>, <expr><literal type="number">63.9744</literal></expr>, <expr><literal type="number">64.914</literal></expr>, <expr><literal type="number">65.781</literal></expr>, <expr><literal type="number">67.1806</literal></expr>, <expr><literal type="number">68.0594</literal></expr>, <expr><literal type="number">68.8446</literal></expr>, <expr><literal type="number">69.7928</literal></expr>,
          <expr><literal type="number">70.8248</literal></expr>, <expr><literal type="number">71.8324</literal></expr>, <expr><literal type="number">72.8598</literal></expr>, <expr><literal type="number">73.6246</literal></expr>, <expr><literal type="number">74.7014</literal></expr>, <expr><literal type="number">75.393</literal></expr>, <expr><literal type="number">76.6708</literal></expr>, <expr><literal type="number">77.2394</literal></expr>,}</block></expr>,
      <comment type="line">// precision 5</comment>
      <expr><block>{<expr><literal type="number">23</literal></expr>, <expr><literal type="number">23.1194</literal></expr>, <expr><literal type="number">23.8208</literal></expr>, <expr><literal type="number">24.2318</literal></expr>, <expr><literal type="number">24.77</literal></expr>, <expr><literal type="number">25.2436</literal></expr>, <expr><literal type="number">25.7774</literal></expr>, <expr><literal type="number">26.2848</literal></expr>, <expr><literal type="number">26.8224</literal></expr>, <expr><literal type="number">27.3742</literal></expr>, <expr><literal type="number">27.9336</literal></expr>,
          <expr><literal type="number">28.503</literal></expr>, <expr><literal type="number">29.0494</literal></expr>, <expr><literal type="number">29.6292</literal></expr>, <expr><literal type="number">30.2124</literal></expr>, <expr><literal type="number">30.798</literal></expr>, <expr><literal type="number">31.367</literal></expr>, <expr><literal type="number">31.9728</literal></expr>, <expr><literal type="number">32.5944</literal></expr>, <expr><literal type="number">33.217</literal></expr>, <expr><literal type="number">33.8438</literal></expr>,
          <expr><literal type="number">34.3696</literal></expr>, <expr><literal type="number">35.0956</literal></expr>, <expr><literal type="number">35.7044</literal></expr>, <expr><literal type="number">36.324</literal></expr>, <expr><literal type="number">37.0668</literal></expr>, <expr><literal type="number">37.6698</literal></expr>, <expr><literal type="number">38.3644</literal></expr>, <expr><literal type="number">39.049</literal></expr>, <expr><literal type="number">39.6918</literal></expr>, <expr><literal type="number">40.4146</literal></expr>,
          <expr><literal type="number">41.082</literal></expr>, <expr><literal type="number">41.687</literal></expr>, <expr><literal type="number">42.5398</literal></expr>, <expr><literal type="number">43.2462</literal></expr>, <expr><literal type="number">43.857</literal></expr>, <expr><literal type="number">44.6606</literal></expr>, <expr><literal type="number">45.4168</literal></expr>, <expr><literal type="number">46.1248</literal></expr>, <expr><literal type="number">46.9222</literal></expr>, <expr><literal type="number">47.6804</literal></expr>,
          <expr><literal type="number">48.447</literal></expr>, <expr><literal type="number">49.3454</literal></expr>, <expr><literal type="number">49.9594</literal></expr>, <expr><literal type="number">50.7636</literal></expr>, <expr><literal type="number">51.5776</literal></expr>, <expr><literal type="number">52.331</literal></expr>, <expr><literal type="number">53.19</literal></expr>, <expr><literal type="number">53.9676</literal></expr>, <expr><literal type="number">54.7564</literal></expr>, <expr><literal type="number">55.5314</literal></expr>,
          <expr><literal type="number">56.4442</literal></expr>, <expr><literal type="number">57.3708</literal></expr>, <expr><literal type="number">57.9774</literal></expr>, <expr><literal type="number">58.9624</literal></expr>, <expr><literal type="number">59.8796</literal></expr>, <expr><literal type="number">60.755</literal></expr>, <expr><literal type="number">61.472</literal></expr>, <expr><literal type="number">62.2076</literal></expr>, <expr><literal type="number">63.1024</literal></expr>, <expr><literal type="number">63.8908</literal></expr>,
          <expr><literal type="number">64.7338</literal></expr>, <expr><literal type="number">65.7728</literal></expr>, <expr><literal type="number">66.629</literal></expr>, <expr><literal type="number">67.413</literal></expr>, <expr><literal type="number">68.3266</literal></expr>, <expr><literal type="number">69.1524</literal></expr>, <expr><literal type="number">70.2642</literal></expr>, <expr><literal type="number">71.1806</literal></expr>, <expr><literal type="number">72.0566</literal></expr>, <expr><literal type="number">72.9192</literal></expr>,
          <expr><literal type="number">73.7598</literal></expr>, <expr><literal type="number">74.3516</literal></expr>, <expr><literal type="number">75.5802</literal></expr>, <expr><literal type="number">76.4386</literal></expr>, <expr><literal type="number">77.4916</literal></expr>, <expr><literal type="number">78.1524</literal></expr>, <expr><literal type="number">79.1892</literal></expr>, <expr><literal type="number">79.8414</literal></expr>, <expr><literal type="number">80.8798</literal></expr>, <expr><literal type="number">81.8376</literal></expr>,
          <expr><literal type="number">82.4698</literal></expr>, <expr><literal type="number">83.7656</literal></expr>, <expr><literal type="number">84.331</literal></expr>, <expr><literal type="number">85.5914</literal></expr>, <expr><literal type="number">86.6012</literal></expr>, <expr><literal type="number">87.7016</literal></expr>, <expr><literal type="number">88.5582</literal></expr>, <expr><literal type="number">89.3394</literal></expr>, <expr><literal type="number">90.3544</literal></expr>, <expr><literal type="number">91.4912</literal></expr>,
          <expr><literal type="number">92.308</literal></expr>, <expr><literal type="number">93.3552</literal></expr>, <expr><literal type="number">93.9746</literal></expr>, <expr><literal type="number">95.2052</literal></expr>, <expr><literal type="number">95.727</literal></expr>, <expr><literal type="number">97.1322</literal></expr>, <expr><literal type="number">98.3944</literal></expr>, <expr><literal type="number">98.7588</literal></expr>, <expr><literal type="number">100.242</literal></expr>, <expr><literal type="number">101.1914</literal></expr>,
          <expr><literal type="number">102.2538</literal></expr>, <expr><literal type="number">102.8776</literal></expr>, <expr><literal type="number">103.6292</literal></expr>, <expr><literal type="number">105.1932</literal></expr>, <expr><literal type="number">105.9152</literal></expr>, <expr><literal type="number">107.0868</literal></expr>, <expr><literal type="number">107.6728</literal></expr>, <expr><literal type="number">108.7144</literal></expr>, <expr><literal type="number">110.3114</literal></expr>,
          <expr><literal type="number">110.8716</literal></expr>, <expr><literal type="number">111.245</literal></expr>, <expr><literal type="number">112.7908</literal></expr>, <expr><literal type="number">113.7064</literal></expr>, <expr><literal type="number">114.636</literal></expr>, <expr><literal type="number">115.7464</literal></expr>, <expr><literal type="number">116.1788</literal></expr>, <expr><literal type="number">117.7464</literal></expr>, <expr><literal type="number">118.4896</literal></expr>,
          <expr><literal type="number">119.6166</literal></expr>, <expr><literal type="number">120.5082</literal></expr>, <expr><literal type="number">121.7798</literal></expr>, <expr><literal type="number">122.9028</literal></expr>, <expr><literal type="number">123.4426</literal></expr>, <expr><literal type="number">124.8854</literal></expr>, <expr><literal type="number">125.705</literal></expr>, <expr><literal type="number">126.4652</literal></expr>, <expr><literal type="number">128.3464</literal></expr>,
          <expr><literal type="number">128.3462</literal></expr>, <expr><literal type="number">130.0398</literal></expr>, <expr><literal type="number">131.0342</literal></expr>, <expr><literal type="number">131.0042</literal></expr>, <expr><literal type="number">132.4766</literal></expr>, <expr><literal type="number">133.511</literal></expr>, <expr><literal type="number">134.7252</literal></expr>, <expr><literal type="number">135.425</literal></expr>, <expr><literal type="number">136.5172</literal></expr>,
          <expr><literal type="number">138.0572</literal></expr>, <expr><literal type="number">138.6694</literal></expr>, <expr><literal type="number">139.3712</literal></expr>, <expr><literal type="number">140.8598</literal></expr>, <expr><literal type="number">141.4594</literal></expr>, <expr><literal type="number">142.554</literal></expr>, <expr><literal type="number">143.4006</literal></expr>, <expr><literal type="number">144.7374</literal></expr>, <expr><literal type="number">146.1634</literal></expr>,
          <expr><literal type="number">146.8994</literal></expr>, <expr><literal type="number">147.605</literal></expr>, <expr><literal type="number">147.9304</literal></expr>, <expr><literal type="number">149.1636</literal></expr>, <expr><literal type="number">150.2468</literal></expr>, <expr><literal type="number">151.5876</literal></expr>, <expr><literal type="number">152.2096</literal></expr>, <expr><literal type="number">153.7032</literal></expr>, <expr><literal type="number">154.7146</literal></expr>,
          <expr><literal type="number">155.807</literal></expr>, <expr><literal type="number">156.9228</literal></expr>, <expr><literal type="number">157.0372</literal></expr>, <expr><literal type="number">158.5852</literal></expr>,}</block></expr>,
      <comment type="line">// precision 6</comment>
      <expr><block>{<expr><literal type="number">46</literal></expr>, <expr><literal type="number">46.1902</literal></expr>, <expr><literal type="number">47.271</literal></expr>, <expr><literal type="number">47.8358</literal></expr>, <expr><literal type="number">48.8142</literal></expr>, <expr><literal type="number">49.2854</literal></expr>, <expr><literal type="number">50.317</literal></expr>, <expr><literal type="number">51.354</literal></expr>, <expr><literal type="number">51.8924</literal></expr>, <expr><literal type="number">52.9436</literal></expr>, <expr><literal type="number">53.4596</literal></expr>,
          <expr><literal type="number">54.5262</literal></expr>, <expr><literal type="number">55.6248</literal></expr>, <expr><literal type="number">56.1574</literal></expr>, <expr><literal type="number">57.2822</literal></expr>, <expr><literal type="number">57.837</literal></expr>, <expr><literal type="number">58.9636</literal></expr>, <expr><literal type="number">60.074</literal></expr>, <expr><literal type="number">60.7042</literal></expr>, <expr><literal type="number">61.7976</literal></expr>, <expr><literal type="number">62.4772</literal></expr>,
          <expr><literal type="number">63.6564</literal></expr>, <expr><literal type="number">64.7942</literal></expr>, <expr><literal type="number">65.5004</literal></expr>, <expr><literal type="number">66.686</literal></expr>, <expr><literal type="number">67.291</literal></expr>, <expr><literal type="number">68.5672</literal></expr>, <expr><literal type="number">69.8556</literal></expr>, <expr><literal type="number">70.4982</literal></expr>, <expr><literal type="number">71.8204</literal></expr>, <expr><literal type="number">72.4252</literal></expr>,
          <expr><literal type="number">73.7744</literal></expr>, <expr><literal type="number">75.0786</literal></expr>, <expr><literal type="number">75.8344</literal></expr>, <expr><literal type="number">77.0294</literal></expr>, <expr><literal type="number">77.8098</literal></expr>, <expr><literal type="number">79.0794</literal></expr>, <expr><literal type="number">80.5732</literal></expr>, <expr><literal type="number">81.1878</literal></expr>, <expr><literal type="number">82.5648</literal></expr>, <expr><literal type="number">83.2902</literal></expr>,
          <expr><literal type="number">84.6784</literal></expr>, <expr><literal type="number">85.3352</literal></expr>, <expr><literal type="number">86.8946</literal></expr>, <expr><literal type="number">88.3712</literal></expr>, <expr><literal type="number">89.0852</literal></expr>, <expr><literal type="number">90.499</literal></expr>, <expr><literal type="number">91.2686</literal></expr>, <expr><literal type="number">92.6844</literal></expr>, <expr><literal type="number">94.2234</literal></expr>, <expr><literal type="number">94.9732</literal></expr>,
          <expr><literal type="number">96.3356</literal></expr>, <expr><literal type="number">97.2286</literal></expr>, <expr><literal type="number">98.7262</literal></expr>, <expr><literal type="number">100.3284</literal></expr>, <expr><literal type="number">101.1048</literal></expr>, <expr><literal type="number">102.5962</literal></expr>, <expr><literal type="number">103.3562</literal></expr>, <expr><literal type="number">105.1272</literal></expr>, <expr><literal type="number">106.4184</literal></expr>,
          <expr><literal type="number">107.4974</literal></expr>, <expr><literal type="number">109.0822</literal></expr>, <expr><literal type="number">109.856</literal></expr>, <expr><literal type="number">111.48</literal></expr>, <expr><literal type="number">113.2834</literal></expr>, <expr><literal type="number">114.0208</literal></expr>, <expr><literal type="number">115.637</literal></expr>, <expr><literal type="number">116.5174</literal></expr>, <expr><literal type="number">118.0576</literal></expr>,
          <expr><literal type="number">119.7476</literal></expr>, <expr><literal type="number">120.427</literal></expr>, <expr><literal type="number">122.1326</literal></expr>, <expr><literal type="number">123.2372</literal></expr>, <expr><literal type="number">125.2788</literal></expr>, <expr><literal type="number">126.6776</literal></expr>, <expr><literal type="number">127.7926</literal></expr>, <expr><literal type="number">129.1952</literal></expr>, <expr><literal type="number">129.9564</literal></expr>,
          <expr><literal type="number">131.6454</literal></expr>, <expr><literal type="number">133.87</literal></expr>, <expr><literal type="number">134.5428</literal></expr>, <expr><literal type="number">136.2</literal></expr>, <expr><literal type="number">137.0294</literal></expr>, <expr><literal type="number">138.6278</literal></expr>, <expr><literal type="number">139.6782</literal></expr>, <expr><literal type="number">141.792</literal></expr>, <expr><literal type="number">143.3516</literal></expr>,
          <expr><literal type="number">144.2832</literal></expr>, <expr><literal type="number">146.0394</literal></expr>, <expr><literal type="number">147.0748</literal></expr>, <expr><literal type="number">148.4912</literal></expr>, <expr><literal type="number">150.849</literal></expr>, <expr><literal type="number">151.696</literal></expr>, <expr><literal type="number">153.5404</literal></expr>, <expr><literal type="number">154.073</literal></expr>, <expr><literal type="number">156.3714</literal></expr>,
          <expr><literal type="number">157.7216</literal></expr>, <expr><literal type="number">158.7328</literal></expr>, <expr><literal type="number">160.4208</literal></expr>, <expr><literal type="number">161.4184</literal></expr>, <expr><literal type="number">163.9424</literal></expr>, <expr><literal type="number">165.2772</literal></expr>, <expr><literal type="number">166.411</literal></expr>, <expr><literal type="number">168.1308</literal></expr>, <expr><literal type="number">168.769</literal></expr>,
          <expr><literal type="number">170.9258</literal></expr>, <expr><literal type="number">172.6828</literal></expr>, <expr><literal type="number">173.7502</literal></expr>, <expr><literal type="number">175.706</literal></expr>, <expr><literal type="number">176.3886</literal></expr>, <expr><literal type="number">179.0186</literal></expr>, <expr><literal type="number">180.4518</literal></expr>, <expr><literal type="number">181.927</literal></expr>, <expr><literal type="number">183.4172</literal></expr>,
          <expr><literal type="number">184.4114</literal></expr>, <expr><literal type="number">186.033</literal></expr>, <expr><literal type="number">188.5124</literal></expr>, <expr><literal type="number">189.5564</literal></expr>, <expr><literal type="number">191.6008</literal></expr>, <expr><literal type="number">192.4172</literal></expr>, <expr><literal type="number">193.8044</literal></expr>, <expr><literal type="number">194.997</literal></expr>, <expr><literal type="number">197.4548</literal></expr>,
          <expr><literal type="number">198.8948</literal></expr>, <expr><literal type="number">200.2346</literal></expr>, <expr><literal type="number">202.3086</literal></expr>, <expr><literal type="number">203.1548</literal></expr>, <expr><literal type="number">204.8842</literal></expr>, <expr><literal type="number">206.6508</literal></expr>, <expr><literal type="number">206.6772</literal></expr>, <expr><literal type="number">209.7254</literal></expr>, <expr><literal type="number">210.4752</literal></expr>,
          <expr><literal type="number">212.7228</literal></expr>, <expr><literal type="number">214.6614</literal></expr>, <expr><literal type="number">215.1676</literal></expr>, <expr><literal type="number">217.793</literal></expr>, <expr><literal type="number">218.0006</literal></expr>, <expr><literal type="number">219.9052</literal></expr>, <expr><literal type="number">221.66</literal></expr>, <expr><literal type="number">223.5588</literal></expr>, <expr><literal type="number">225.1636</literal></expr>,
          <expr><literal type="number">225.6882</literal></expr>, <expr><literal type="number">227.7126</literal></expr>, <expr><literal type="number">229.4502</literal></expr>, <expr><literal type="number">231.1978</literal></expr>, <expr><literal type="number">232.9756</literal></expr>, <expr><literal type="number">233.1654</literal></expr>, <expr><literal type="number">236.727</literal></expr>, <expr><literal type="number">238.1974</literal></expr>, <expr><literal type="number">237.7474</literal></expr>,
          <expr><literal type="number">241.1346</literal></expr>, <expr><literal type="number">242.3048</literal></expr>, <expr><literal type="number">244.1948</literal></expr>, <expr><literal type="number">245.3134</literal></expr>, <expr><literal type="number">246.879</literal></expr>, <expr><literal type="number">249.1204</literal></expr>, <expr><literal type="number">249.853</literal></expr>, <expr><literal type="number">252.6792</literal></expr>, <expr><literal type="number">253.857</literal></expr>,
          <expr><literal type="number">254.4486</literal></expr>, <expr><literal type="number">257.2362</literal></expr>, <expr><literal type="number">257.9534</literal></expr>, <expr><literal type="number">260.0286</literal></expr>, <expr><literal type="number">260.5632</literal></expr>, <expr><literal type="number">262.663</literal></expr>, <expr><literal type="number">264.723</literal></expr>, <expr><literal type="number">265.7566</literal></expr>, <expr><literal type="number">267.2566</literal></expr>,
          <expr><literal type="number">267.1624</literal></expr>, <expr><literal type="number">270.62</literal></expr>, <expr><literal type="number">272.8216</literal></expr>, <expr><literal type="number">273.2166</literal></expr>, <expr><literal type="number">275.2056</literal></expr>, <expr><literal type="number">276.2202</literal></expr>, <expr><literal type="number">278.3726</literal></expr>, <expr><literal type="number">280.3344</literal></expr>, <expr><literal type="number">281.9284</literal></expr>,
          <expr><literal type="number">283.9728</literal></expr>, <expr><literal type="number">284.1924</literal></expr>, <expr><literal type="number">286.4872</literal></expr>, <expr><literal type="number">287.587</literal></expr>, <expr><literal type="number">289.807</literal></expr>, <expr><literal type="number">291.1206</literal></expr>, <expr><literal type="number">292.769</literal></expr>, <expr><literal type="number">294.8708</literal></expr>, <expr><literal type="number">296.665</literal></expr>,
          <expr><literal type="number">297.1182</literal></expr>, <expr><literal type="number">299.4012</literal></expr>, <expr><literal type="number">300.6352</literal></expr>, <expr><literal type="number">302.1354</literal></expr>, <expr><literal type="number">304.1756</literal></expr>, <expr><literal type="number">306.1606</literal></expr>, <expr><literal type="number">307.3462</literal></expr>, <expr><literal type="number">308.5214</literal></expr>, <expr><literal type="number">309.4134</literal></expr>,
          <expr><literal type="number">310.8352</literal></expr>, <expr><literal type="number">313.9684</literal></expr>, <expr><literal type="number">315.837</literal></expr>, <expr><literal type="number">316.7796</literal></expr>, <expr><literal type="number">318.9858</literal></expr>,}</block></expr>,
      <comment type="line">// precision 7</comment>
      <expr><block>{<expr><literal type="number">92</literal></expr>, <expr><literal type="number">93.4934</literal></expr>, <expr><literal type="number">94.9758</literal></expr>, <expr><literal type="number">96.4574</literal></expr>, <expr><literal type="number">97.9718</literal></expr>, <expr><literal type="number">99.4954</literal></expr>, <expr><literal type="number">101.5302</literal></expr>, <expr><literal type="number">103.0756</literal></expr>, <expr><literal type="number">104.6374</literal></expr>, <expr><literal type="number">106.1782</literal></expr>,
          <expr><literal type="number">107.7888</literal></expr>, <expr><literal type="number">109.9522</literal></expr>, <expr><literal type="number">111.592</literal></expr>, <expr><literal type="number">113.2532</literal></expr>, <expr><literal type="number">114.9086</literal></expr>, <expr><literal type="number">116.5938</literal></expr>, <expr><literal type="number">118.9474</literal></expr>, <expr><literal type="number">120.6796</literal></expr>, <expr><literal type="number">122.4394</literal></expr>,
          <expr><literal type="number">124.2176</literal></expr>, <expr><literal type="number">125.9768</literal></expr>, <expr><literal type="number">128.4214</literal></expr>, <expr><literal type="number">130.2528</literal></expr>, <expr><literal type="number">132.0102</literal></expr>, <expr><literal type="number">133.8658</literal></expr>, <expr><literal type="number">135.7278</literal></expr>, <expr><literal type="number">138.3044</literal></expr>, <expr><literal type="number">140.1316</literal></expr>,
          <expr><literal type="number">142.093</literal></expr>, <expr><literal type="number">144.0032</literal></expr>, <expr><literal type="number">145.9092</literal></expr>, <expr><literal type="number">148.6306</literal></expr>, <expr><literal type="number">150.5294</literal></expr>, <expr><literal type="number">152.5756</literal></expr>, <expr><literal type="number">154.6508</literal></expr>, <expr><literal type="number">156.662</literal></expr>, <expr><literal type="number">159.552</literal></expr>,
          <expr><literal type="number">161.3724</literal></expr>, <expr><literal type="number">163.617</literal></expr>, <expr><literal type="number">165.5754</literal></expr>, <expr><literal type="number">167.7872</literal></expr>, <expr><literal type="number">169.8444</literal></expr>, <expr><literal type="number">172.7988</literal></expr>, <expr><literal type="number">174.8606</literal></expr>, <expr><literal type="number">177.2118</literal></expr>, <expr><literal type="number">179.3566</literal></expr>,
          <expr><literal type="number">181.4476</literal></expr>, <expr><literal type="number">184.5882</literal></expr>, <expr><literal type="number">186.6816</literal></expr>, <expr><literal type="number">189.0824</literal></expr>, <expr><literal type="number">191.0258</literal></expr>, <expr><literal type="number">193.6048</literal></expr>, <expr><literal type="number">196.4436</literal></expr>, <expr><literal type="number">198.7274</literal></expr>, <expr><literal type="number">200.957</literal></expr>,
          <expr><literal type="number">203.147</literal></expr>, <expr><literal type="number">205.4364</literal></expr>, <expr><literal type="number">208.7592</literal></expr>, <expr><literal type="number">211.3386</literal></expr>, <expr><literal type="number">213.781</literal></expr>, <expr><literal type="number">215.8028</literal></expr>, <expr><literal type="number">218.656</literal></expr>, <expr><literal type="number">221.6544</literal></expr>, <expr><literal type="number">223.996</literal></expr>,
          <expr><literal type="number">226.4718</literal></expr>, <expr><literal type="number">229.1544</literal></expr>, <expr><literal type="number">231.6098</literal></expr>, <expr><literal type="number">234.5956</literal></expr>, <expr><literal type="number">237.0616</literal></expr>, <expr><literal type="number">239.5758</literal></expr>, <expr><literal type="number">242.4878</literal></expr>, <expr><literal type="number">244.5244</literal></expr>, <expr><literal type="number">248.2146</literal></expr>,
          <expr><literal type="number">250.724</literal></expr>, <expr><literal type="number">252.8722</literal></expr>, <expr><literal type="number">255.5198</literal></expr>, <expr><literal type="number">258.0414</literal></expr>, <expr><literal type="number">261.941</literal></expr>, <expr><literal type="number">264.9048</literal></expr>, <expr><literal type="number">266.87</literal></expr>, <expr><literal type="number">269.4304</literal></expr>, <expr><literal type="number">272.028</literal></expr>,
          <expr><literal type="number">274.4708</literal></expr>, <expr><literal type="number">278.37</literal></expr>, <expr><literal type="number">281.0624</literal></expr>, <expr><literal type="number">283.4668</literal></expr>, <expr><literal type="number">286.5532</literal></expr>, <expr><literal type="number">289.4352</literal></expr>, <expr><literal type="number">293.2564</literal></expr>, <expr><literal type="number">295.2744</literal></expr>, <expr><literal type="number">298.2118</literal></expr>,
          <expr><literal type="number">300.7472</literal></expr>, <expr><literal type="number">304.1456</literal></expr>, <expr><literal type="number">307.2928</literal></expr>, <expr><literal type="number">309.7504</literal></expr>, <expr><literal type="number">312.5528</literal></expr>, <expr><literal type="number">315.979</literal></expr>, <expr><literal type="number">318.2102</literal></expr>, <expr><literal type="number">322.1834</literal></expr>, <expr><literal type="number">324.3494</literal></expr>,
          <expr><literal type="number">327.325</literal></expr>, <expr><literal type="number">330.6614</literal></expr>, <expr><literal type="number">332.903</literal></expr>, <expr><literal type="number">337.2544</literal></expr>, <expr><literal type="number">339.9042</literal></expr>, <expr><literal type="number">343.215</literal></expr>, <expr><literal type="number">345.2864</literal></expr>, <expr><literal type="number">348.0814</literal></expr>, <expr><literal type="number">352.6764</literal></expr>,
          <expr><literal type="number">355.301</literal></expr>, <expr><literal type="number">357.139</literal></expr>, <expr><literal type="number">360.658</literal></expr>, <expr><literal type="number">363.1732</literal></expr>, <expr><literal type="number">366.5902</literal></expr>, <expr><literal type="number">369.9538</literal></expr>, <expr><literal type="number">373.0828</literal></expr>, <expr><literal type="number">375.922</literal></expr>, <expr><literal type="number">378.9902</literal></expr>,
          <expr><literal type="number">382.7328</literal></expr>, <expr><literal type="number">386.4538</literal></expr>, <expr><literal type="number">388.1136</literal></expr>, <expr><literal type="number">391.2234</literal></expr>, <expr><literal type="number">394.0878</literal></expr>, <expr><literal type="number">396.708</literal></expr>, <expr><literal type="number">401.1556</literal></expr>, <expr><literal type="number">404.1852</literal></expr>, <expr><literal type="number">406.6372</literal></expr>,
          <expr><literal type="number">409.6822</literal></expr>, <expr><literal type="number">412.7796</literal></expr>, <expr><literal type="number">416.6078</literal></expr>, <expr><literal type="number">418.4916</literal></expr>, <expr><literal type="number">422.131</literal></expr>, <expr><literal type="number">424.5376</literal></expr>, <expr><literal type="number">428.1988</literal></expr>, <expr><literal type="number">432.211</literal></expr>, <expr><literal type="number">434.4502</literal></expr>,
          <expr><literal type="number">438.5282</literal></expr>, <expr><literal type="number">440.912</literal></expr>, <expr><literal type="number">444.0448</literal></expr>, <expr><literal type="number">447.7432</literal></expr>, <expr><literal type="number">450.8524</literal></expr>, <expr><literal type="number">453.7988</literal></expr>, <expr><literal type="number">456.7858</literal></expr>, <expr><literal type="number">458.8868</literal></expr>, <expr><literal type="number">463.9886</literal></expr>,
          <expr><literal type="number">466.5064</literal></expr>, <expr><literal type="number">468.9124</literal></expr>, <expr><literal type="number">472.6616</literal></expr>, <expr><literal type="number">475.4682</literal></expr>, <expr><literal type="number">478.582</literal></expr>, <expr><literal type="number">481.304</literal></expr>, <expr><literal type="number">485.2738</literal></expr>, <expr><literal type="number">488.6894</literal></expr>, <expr><literal type="number">490.329</literal></expr>,
          <expr><literal type="number">496.106</literal></expr>, <expr><literal type="number">497.6908</literal></expr>, <expr><literal type="number">501.1374</literal></expr>, <expr><literal type="number">504.5322</literal></expr>, <expr><literal type="number">506.8848</literal></expr>, <expr><literal type="number">510.3324</literal></expr>, <expr><literal type="number">513.4512</literal></expr>, <expr><literal type="number">516.179</literal></expr>, <expr><literal type="number">520.4412</literal></expr>,
          <expr><literal type="number">522.6066</literal></expr>, <expr><literal type="number">526.167</literal></expr>, <expr><literal type="number">528.7794</literal></expr>, <expr><literal type="number">533.379</literal></expr>, <expr><literal type="number">536.067</literal></expr>, <expr><literal type="number">538.46</literal></expr>, <expr><literal type="number">542.9116</literal></expr>, <expr><literal type="number">545.692</literal></expr>, <expr><literal type="number">547.9546</literal></expr>,
          <expr><literal type="number">552.493</literal></expr>, <expr><literal type="number">555.2722</literal></expr>, <expr><literal type="number">557.335</literal></expr>, <expr><literal type="number">562.449</literal></expr>, <expr><literal type="number">564.2014</literal></expr>, <expr><literal type="number">569.0738</literal></expr>, <expr><literal type="number">571.0974</literal></expr>, <expr><literal type="number">574.8564</literal></expr>, <expr><literal type="number">578.2996</literal></expr>,
          <expr><literal type="number">581.409</literal></expr>, <expr><literal type="number">583.9704</literal></expr>, <expr><literal type="number">585.8098</literal></expr>, <expr><literal type="number">589.6528</literal></expr>, <expr><literal type="number">594.5998</literal></expr>, <expr><literal type="number">595.958</literal></expr>, <expr><literal type="number">600.068</literal></expr>, <expr><literal type="number">603.3278</literal></expr>, <expr><literal type="number">608.2016</literal></expr>,
          <expr><literal type="number">609.9632</literal></expr>, <expr><literal type="number">612.864</literal></expr>, <expr><literal type="number">615.43</literal></expr>, <expr><literal type="number">620.7794</literal></expr>, <expr><literal type="number">621.272</literal></expr>, <expr><literal type="number">625.8644</literal></expr>, <expr><literal type="number">629.206</literal></expr>, <expr><literal type="number">633.219</literal></expr>, <expr><literal type="number">634.5154</literal></expr>,
          <expr><literal type="number">638.6102</literal></expr>,}</block></expr>,
      <comment type="line">// precision 8</comment>
      <expr><block>{<expr><literal type="number">184.2152</literal></expr>, <expr><literal type="number">187.2454</literal></expr>, <expr><literal type="number">190.2096</literal></expr>, <expr><literal type="number">193.6652</literal></expr>, <expr><literal type="number">196.6312</literal></expr>, <expr><literal type="number">199.6822</literal></expr>, <expr><literal type="number">203.249</literal></expr>, <expr><literal type="number">206.3296</literal></expr>, <expr><literal type="number">210.0038</literal></expr>,
          <expr><literal type="number">213.2074</literal></expr>, <expr><literal type="number">216.4612</literal></expr>, <expr><literal type="number">220.27</literal></expr>, <expr><literal type="number">223.5178</literal></expr>, <expr><literal type="number">227.4412</literal></expr>, <expr><literal type="number">230.8032</literal></expr>, <expr><literal type="number">234.1634</literal></expr>, <expr><literal type="number">238.1688</literal></expr>, <expr><literal type="number">241.6074</literal></expr>,
          <expr><literal type="number">245.6946</literal></expr>, <expr><literal type="number">249.2664</literal></expr>, <expr><literal type="number">252.8228</literal></expr>, <expr><literal type="number">257.0432</literal></expr>, <expr><literal type="number">260.6824</literal></expr>, <expr><literal type="number">264.9464</literal></expr>, <expr><literal type="number">268.6268</literal></expr>, <expr><literal type="number">272.2626</literal></expr>, <expr><literal type="number">276.8376</literal></expr>,
          <expr><literal type="number">280.4034</literal></expr>, <expr><literal type="number">284.8956</literal></expr>, <expr><literal type="number">288.8522</literal></expr>, <expr><literal type="number">292.7638</literal></expr>, <expr><literal type="number">297.3552</literal></expr>, <expr><literal type="number">301.3556</literal></expr>, <expr><literal type="number">305.7526</literal></expr>, <expr><literal type="number">309.9292</literal></expr>, <expr><literal type="number">313.8954</literal></expr>,
          <expr><literal type="number">318.8198</literal></expr>, <expr><literal type="number">322.7668</literal></expr>, <expr><literal type="number">327.298</literal></expr>, <expr><literal type="number">331.6688</literal></expr>, <expr><literal type="number">335.9466</literal></expr>, <expr><literal type="number">340.9746</literal></expr>, <expr><literal type="number">345.1672</literal></expr>, <expr><literal type="number">349.3474</literal></expr>, <expr><literal type="number">354.3028</literal></expr>,
          <expr><literal type="number">358.8912</literal></expr>, <expr><literal type="number">364.114</literal></expr>, <expr><literal type="number">368.4646</literal></expr>, <expr><literal type="number">372.9744</literal></expr>, <expr><literal type="number">378.4092</literal></expr>, <expr><literal type="number">382.6022</literal></expr>, <expr><literal type="number">387.843</literal></expr>, <expr><literal type="number">392.5684</literal></expr>, <expr><literal type="number">397.1652</literal></expr>,
          <expr><literal type="number">402.5426</literal></expr>, <expr><literal type="number">407.4152</literal></expr>, <expr><literal type="number">412.5388</literal></expr>, <expr><literal type="number">417.3592</literal></expr>, <expr><literal type="number">422.1366</literal></expr>, <expr><literal type="number">427.486</literal></expr>, <expr><literal type="number">432.3918</literal></expr>, <expr><literal type="number">437.5076</literal></expr>, <expr><literal type="number">442.509</literal></expr>,
          <expr><literal type="number">447.3834</literal></expr>, <expr><literal type="number">453.3498</literal></expr>, <expr><literal type="number">458.0668</literal></expr>, <expr><literal type="number">463.7346</literal></expr>, <expr><literal type="number">469.1228</literal></expr>, <expr><literal type="number">473.4528</literal></expr>, <expr><literal type="number">479.7</literal></expr>, <expr><literal type="number">484.644</literal></expr>, <expr><literal type="number">491.0518</literal></expr>,
          <expr><literal type="number">495.5774</literal></expr>, <expr><literal type="number">500.9068</literal></expr>, <expr><literal type="number">506.432</literal></expr>, <expr><literal type="number">512.1666</literal></expr>, <expr><literal type="number">517.434</literal></expr>, <expr><literal type="number">522.6644</literal></expr>, <expr><literal type="number">527.4894</literal></expr>, <expr><literal type="number">533.6312</literal></expr>, <expr><literal type="number">538.3804</literal></expr>,
          <expr><literal type="number">544.292</literal></expr>, <expr><literal type="number">550.5496</literal></expr>, <expr><literal type="number">556.0234</literal></expr>, <expr><literal type="number">562.8206</literal></expr>, <expr><literal type="number">566.6146</literal></expr>, <expr><literal type="number">572.4188</literal></expr>, <expr><literal type="number">579.117</literal></expr>, <expr><literal type="number">583.6762</literal></expr>, <expr><literal type="number">590.6576</literal></expr>,
          <expr><literal type="number">595.7864</literal></expr>, <expr><literal type="number">601.509</literal></expr>, <expr><literal type="number">607.5334</literal></expr>, <expr><literal type="number">612.9204</literal></expr>, <expr><literal type="number">619.772</literal></expr>, <expr><literal type="number">624.2924</literal></expr>, <expr><literal type="number">630.8654</literal></expr>, <expr><literal type="number">636.1836</literal></expr>, <expr><literal type="number">642.745</literal></expr>,
          <expr><literal type="number">649.1316</literal></expr>, <expr><literal type="number">655.0386</literal></expr>, <expr><literal type="number">660.0136</literal></expr>, <expr><literal type="number">666.6342</literal></expr>, <expr><literal type="number">671.6196</literal></expr>, <expr><literal type="number">678.1866</literal></expr>, <expr><literal type="number">684.4282</literal></expr>, <expr><literal type="number">689.3324</literal></expr>, <expr><literal type="number">695.4794</literal></expr>,
          <expr><literal type="number">702.5038</literal></expr>, <expr><literal type="number">708.129</literal></expr>, <expr><literal type="number">713.528</literal></expr>, <expr><literal type="number">720.3204</literal></expr>, <expr><literal type="number">726.463</literal></expr>, <expr><literal type="number">732.7928</literal></expr>, <expr><literal type="number">739.123</literal></expr>, <expr><literal type="number">744.7418</literal></expr>, <expr><literal type="number">751.2192</literal></expr>,
          <expr><literal type="number">756.5102</literal></expr>, <expr><literal type="number">762.6066</literal></expr>, <expr><literal type="number">769.0184</literal></expr>, <expr><literal type="number">775.2224</literal></expr>, <expr><literal type="number">781.4014</literal></expr>, <expr><literal type="number">787.7618</literal></expr>, <expr><literal type="number">794.1436</literal></expr>, <expr><literal type="number">798.6506</literal></expr>, <expr><literal type="number">805.6378</literal></expr>,
          <expr><literal type="number">811.766</literal></expr>, <expr><literal type="number">819.7514</literal></expr>, <expr><literal type="number">824.5776</literal></expr>, <expr><literal type="number">828.7322</literal></expr>, <expr><literal type="number">837.8048</literal></expr>, <expr><literal type="number">843.6302</literal></expr>, <expr><literal type="number">849.9336</literal></expr>, <expr><literal type="number">854.4798</literal></expr>, <expr><literal type="number">861.3388</literal></expr>,
          <expr><literal type="number">867.9894</literal></expr>, <expr><literal type="number">873.8196</literal></expr>, <expr><literal type="number">880.3136</literal></expr>, <expr><literal type="number">886.2308</literal></expr>, <expr><literal type="number">892.4588</literal></expr>, <expr><literal type="number">899.0816</literal></expr>, <expr><literal type="number">905.4076</literal></expr>, <expr><literal type="number">912.0064</literal></expr>, <expr><literal type="number">917.3878</literal></expr>,
          <expr><literal type="number">923.619</literal></expr>, <expr><literal type="number">929.998</literal></expr>, <expr><literal type="number">937.3482</literal></expr>, <expr><literal type="number">943.9506</literal></expr>, <expr><literal type="number">947.991</literal></expr>, <expr><literal type="number">955.1144</literal></expr>, <expr><literal type="number">962.203</literal></expr>, <expr><literal type="number">968.8222</literal></expr>, <expr><literal type="number">975.7324</literal></expr>,
          <expr><literal type="number">981.7826</literal></expr>, <expr><literal type="number">988.7666</literal></expr>, <expr><literal type="number">994.2648</literal></expr>, <expr><literal type="number">1000.3128</literal></expr>, <expr><literal type="number">1007.4082</literal></expr>, <expr><literal type="number">1013.7536</literal></expr>, <expr><literal type="number">1020.3376</literal></expr>, <expr><literal type="number">1026.7156</literal></expr>,
          <expr><literal type="number">1031.7478</literal></expr>, <expr><literal type="number">1037.4292</literal></expr>, <expr><literal type="number">1045.393</literal></expr>, <expr><literal type="number">1051.2278</literal></expr>, <expr><literal type="number">1058.3434</literal></expr>, <expr><literal type="number">1062.8726</literal></expr>, <expr><literal type="number">1071.884</literal></expr>, <expr><literal type="number">1076.806</literal></expr>,
          <expr><literal type="number">1082.9176</literal></expr>, <expr><literal type="number">1089.1678</literal></expr>, <expr><literal type="number">1095.5032</literal></expr>, <expr><literal type="number">1102.525</literal></expr>, <expr><literal type="number">1107.2264</literal></expr>, <expr><literal type="number">1115.315</literal></expr>, <expr><literal type="number">1120.93</literal></expr>, <expr><literal type="number">1127.252</literal></expr>,
          <expr><literal type="number">1134.1496</literal></expr>, <expr><literal type="number">1139.0408</literal></expr>, <expr><literal type="number">1147.5448</literal></expr>, <expr><literal type="number">1153.3296</literal></expr>, <expr><literal type="number">1158.1974</literal></expr>, <expr><literal type="number">1166.5262</literal></expr>, <expr><literal type="number">1174.3328</literal></expr>, <expr><literal type="number">1175.657</literal></expr>,
          <expr><literal type="number">1184.4222</literal></expr>, <expr><literal type="number">1190.9172</literal></expr>, <expr><literal type="number">1197.1292</literal></expr>, <expr><literal type="number">1204.4606</literal></expr>, <expr><literal type="number">1210.4578</literal></expr>, <expr><literal type="number">1218.8728</literal></expr>, <expr><literal type="number">1225.3336</literal></expr>, <expr><literal type="number">1226.6592</literal></expr>,
          <expr><literal type="number">1236.5768</literal></expr>, <expr><literal type="number">1241.363</literal></expr>, <expr><literal type="number">1249.4074</literal></expr>, <expr><literal type="number">1254.6566</literal></expr>, <expr><literal type="number">1260.8014</literal></expr>, <expr><literal type="number">1266.5454</literal></expr>, <expr><literal type="number">1274.5192</literal></expr>,}</block></expr>,
      <comment type="line">// precision 9</comment>
      <expr><block>{<expr><literal type="number">369</literal></expr>, <expr><literal type="number">374.8294</literal></expr>, <expr><literal type="number">381.2452</literal></expr>, <expr><literal type="number">387.6698</literal></expr>, <expr><literal type="number">394.1464</literal></expr>, <expr><literal type="number">400.2024</literal></expr>, <expr><literal type="number">406.8782</literal></expr>, <expr><literal type="number">413.6598</literal></expr>, <expr><literal type="number">420.462</literal></expr>, <expr><literal type="number">427.2826</literal></expr>,
          <expr><literal type="number">433.7102</literal></expr>, <expr><literal type="number">440.7416</literal></expr>, <expr><literal type="number">447.9366</literal></expr>, <expr><literal type="number">455.1046</literal></expr>, <expr><literal type="number">462.285</literal></expr>, <expr><literal type="number">469.0668</literal></expr>, <expr><literal type="number">476.306</literal></expr>, <expr><literal type="number">483.8448</literal></expr>, <expr><literal type="number">491.301</literal></expr>,
          <expr><literal type="number">498.9886</literal></expr>, <expr><literal type="number">506.2422</literal></expr>, <expr><literal type="number">513.8138</literal></expr>, <expr><literal type="number">521.7074</literal></expr>, <expr><literal type="number">529.7428</literal></expr>, <expr><literal type="number">537.8402</literal></expr>, <expr><literal type="number">545.1664</literal></expr>, <expr><literal type="number">553.3534</literal></expr>, <expr><literal type="number">561.594</literal></expr>,
          <expr><literal type="number">569.6886</literal></expr>, <expr><literal type="number">577.7876</literal></expr>, <expr><literal type="number">585.65</literal></expr>, <expr><literal type="number">594.228</literal></expr>, <expr><literal type="number">602.8036</literal></expr>, <expr><literal type="number">611.1666</literal></expr>, <expr><literal type="number">620.0818</literal></expr>, <expr><literal type="number">628.0824</literal></expr>, <expr><literal type="number">637.2574</literal></expr>,
          <expr><literal type="number">646.302</literal></expr>, <expr><literal type="number">655.1644</literal></expr>, <expr><literal type="number">664.0056</literal></expr>, <expr><literal type="number">672.3802</literal></expr>, <expr><literal type="number">681.7192</literal></expr>, <expr><literal type="number">690.5234</literal></expr>, <expr><literal type="number">700.2084</literal></expr>, <expr><literal type="number">708.831</literal></expr>, <expr><literal type="number">718.485</literal></expr>,
          <expr><literal type="number">728.1112</literal></expr>, <expr><literal type="number">737.4764</literal></expr>, <expr><literal type="number">746.76</literal></expr>, <expr><literal type="number">756.3368</literal></expr>, <expr><literal type="number">766.5538</literal></expr>, <expr><literal type="number">775.5058</literal></expr>, <expr><literal type="number">785.2646</literal></expr>, <expr><literal type="number">795.5902</literal></expr>, <expr><literal type="number">804.3818</literal></expr>,
          <expr><literal type="number">814.8998</literal></expr>, <expr><literal type="number">824.9532</literal></expr>, <expr><literal type="number">835.2062</literal></expr>, <expr><literal type="number">845.2798</literal></expr>, <expr><literal type="number">854.4728</literal></expr>, <expr><literal type="number">864.9582</literal></expr>, <expr><literal type="number">875.3292</literal></expr>, <expr><literal type="number">886.171</literal></expr>, <expr><literal type="number">896.781</literal></expr>,
          <expr><literal type="number">906.5716</literal></expr>, <expr><literal type="number">916.7048</literal></expr>, <expr><literal type="number">927.5322</literal></expr>, <expr><literal type="number">937.875</literal></expr>, <expr><literal type="number">949.3972</literal></expr>, <expr><literal type="number">958.3464</literal></expr>, <expr><literal type="number">969.7274</literal></expr>, <expr><literal type="number">980.2834</literal></expr>, <expr><literal type="number">992.1444</literal></expr>,
          <expr><literal type="number">1003.4264</literal></expr>, <expr><literal type="number">1013.0166</literal></expr>, <expr><literal type="number">1024.018</literal></expr>, <expr><literal type="number">1035.0438</literal></expr>, <expr><literal type="number">1046.34</literal></expr>, <expr><literal type="number">1057.6856</literal></expr>, <expr><literal type="number">1068.9836</literal></expr>, <expr><literal type="number">1079.0312</literal></expr>,
          <expr><literal type="number">1091.677</literal></expr>, <expr><literal type="number">1102.3188</literal></expr>, <expr><literal type="number">1113.4846</literal></expr>, <expr><literal type="number">1124.4424</literal></expr>, <expr><literal type="number">1135.739</literal></expr>, <expr><literal type="number">1147.1488</literal></expr>, <expr><literal type="number">1158.9202</literal></expr>, <expr><literal type="number">1169.406</literal></expr>,
          <expr><literal type="number">1181.5342</literal></expr>, <expr><literal type="number">1193.2834</literal></expr>, <expr><literal type="number">1203.8954</literal></expr>, <expr><literal type="number">1216.3286</literal></expr>, <expr><literal type="number">1226.2146</literal></expr>, <expr><literal type="number">1239.6684</literal></expr>, <expr><literal type="number">1251.9946</literal></expr>, <expr><literal type="number">1262.123</literal></expr>,
          <expr><literal type="number">1275.4338</literal></expr>, <expr><literal type="number">1285.7378</literal></expr>, <expr><literal type="number">1296.076</literal></expr>, <expr><literal type="number">1308.9692</literal></expr>, <expr><literal type="number">1320.4964</literal></expr>, <expr><literal type="number">1333.0998</literal></expr>, <expr><literal type="number">1343.9864</literal></expr>, <expr><literal type="number">1357.7754</literal></expr>,
          <expr><literal type="number">1368.3208</literal></expr>, <expr><literal type="number">1380.4838</literal></expr>, <expr><literal type="number">1392.7388</literal></expr>, <expr><literal type="number">1406.0758</literal></expr>, <expr><literal type="number">1416.9098</literal></expr>, <expr><literal type="number">1428.9728</literal></expr>, <expr><literal type="number">1440.9228</literal></expr>, <expr><literal type="number">1453.9292</literal></expr>,
          <expr><literal type="number">1462.617</literal></expr>, <expr><literal type="number">1476.05</literal></expr>, <expr><literal type="number">1490.2996</literal></expr>, <expr><literal type="number">1500.6128</literal></expr>, <expr><literal type="number">1513.7392</literal></expr>, <expr><literal type="number">1524.5174</literal></expr>, <expr><literal type="number">1536.6322</literal></expr>, <expr><literal type="number">1548.2584</literal></expr>,
          <expr><literal type="number">1562.3766</literal></expr>, <expr><literal type="number">1572.423</literal></expr>, <expr><literal type="number">1587.1232</literal></expr>, <expr><literal type="number">1596.5164</literal></expr>, <expr><literal type="number">1610.5938</literal></expr>, <expr><literal type="number">1622.5972</literal></expr>, <expr><literal type="number">1633.1222</literal></expr>, <expr><literal type="number">1647.7674</literal></expr>,
          <expr><literal type="number">1658.5044</literal></expr>, <expr><literal type="number">1671.57</literal></expr>, <expr><literal type="number">1683.7044</literal></expr>, <expr><literal type="number">1695.4142</literal></expr>, <expr><literal type="number">1708.7102</literal></expr>, <expr><literal type="number">1720.6094</literal></expr>, <expr><literal type="number">1732.6522</literal></expr>, <expr><literal type="number">1747.841</literal></expr>,
          <expr><literal type="number">1756.4072</literal></expr>, <expr><literal type="number">1769.9786</literal></expr>, <expr><literal type="number">1782.3276</literal></expr>, <expr><literal type="number">1797.5216</literal></expr>, <expr><literal type="number">1808.3186</literal></expr>, <expr><literal type="number">1819.0694</literal></expr>, <expr><literal type="number">1834.354</literal></expr>, <expr><literal type="number">1844.575</literal></expr>,
          <expr><literal type="number">1856.2808</literal></expr>, <expr><literal type="number">1871.1288</literal></expr>, <expr><literal type="number">1880.7852</literal></expr>, <expr><literal type="number">1893.9622</literal></expr>, <expr><literal type="number">1906.3418</literal></expr>, <expr><literal type="number">1920.6548</literal></expr>, <expr><literal type="number">1932.9302</literal></expr>, <expr><literal type="number">1945.8584</literal></expr>,
          <expr><literal type="number">1955.473</literal></expr>, <expr><literal type="number">1968.8248</literal></expr>, <expr><literal type="number">1980.6446</literal></expr>, <expr><literal type="number">1995.9598</literal></expr>, <expr><literal type="number">2008.349</literal></expr>, <expr><literal type="number">2019.8556</literal></expr>, <expr><literal type="number">2033.0334</literal></expr>, <expr><literal type="number">2044.0206</literal></expr>,
          <expr><literal type="number">2059.3956</literal></expr>, <expr><literal type="number">2069.9174</literal></expr>, <expr><literal type="number">2082.6084</literal></expr>, <expr><literal type="number">2093.7036</literal></expr>, <expr><literal type="number">2106.6108</literal></expr>, <expr><literal type="number">2118.9124</literal></expr>, <expr><literal type="number">2132.301</literal></expr>, <expr><literal type="number">2144.7628</literal></expr>,
          <expr><literal type="number">2159.8422</literal></expr>, <expr><literal type="number">2171.0212</literal></expr>, <expr><literal type="number">2183.101</literal></expr>, <expr><literal type="number">2193.5112</literal></expr>, <expr><literal type="number">2208.052</literal></expr>, <expr><literal type="number">2221.3194</literal></expr>, <expr><literal type="number">2233.3282</literal></expr>, <expr><literal type="number">2247.295</literal></expr>,
          <expr><literal type="number">2257.7222</literal></expr>, <expr><literal type="number">2273.342</literal></expr>, <expr><literal type="number">2286.5638</literal></expr>, <expr><literal type="number">2299.6786</literal></expr>, <expr><literal type="number">2310.8114</literal></expr>, <expr><literal type="number">2322.3312</literal></expr>, <expr><literal type="number">2335.516</literal></expr>, <expr><literal type="number">2349.874</literal></expr>,
          <expr><literal type="number">2363.5968</literal></expr>, <expr><literal type="number">2373.865</literal></expr>, <expr><literal type="number">2387.1918</literal></expr>, <expr><literal type="number">2401.8328</literal></expr>, <expr><literal type="number">2414.8496</literal></expr>, <expr><literal type="number">2424.544</literal></expr>, <expr><literal type="number">2436.7592</literal></expr>, <expr><literal type="number">2447.1682</literal></expr>,
          <expr><literal type="number">2464.1958</literal></expr>, <expr><literal type="number">2474.3438</literal></expr>, <expr><literal type="number">2489.0006</literal></expr>, <expr><literal type="number">2497.4526</literal></expr>, <expr><literal type="number">2513.6586</literal></expr>, <expr><literal type="number">2527.19</literal></expr>, <expr><literal type="number">2540.7028</literal></expr>, <expr><literal type="number">2553.768</literal></expr>,}</block></expr>,
      <comment type="line">// precision 10</comment>
      <expr><block>{<expr><literal type="number">738.1256</literal></expr>, <expr><literal type="number">750.4234</literal></expr>, <expr><literal type="number">763.1064</literal></expr>, <expr><literal type="number">775.4732</literal></expr>, <expr><literal type="number">788.4636</literal></expr>, <expr><literal type="number">801.0644</literal></expr>, <expr><literal type="number">814.488</literal></expr>, <expr><literal type="number">827.9654</literal></expr>, <expr><literal type="number">841.0832</literal></expr>,
          <expr><literal type="number">854.7864</literal></expr>, <expr><literal type="number">868.1992</literal></expr>, <expr><literal type="number">882.2176</literal></expr>, <expr><literal type="number">896.5228</literal></expr>, <expr><literal type="number">910.1716</literal></expr>, <expr><literal type="number">924.7752</literal></expr>, <expr><literal type="number">938.899</literal></expr>, <expr><literal type="number">953.6126</literal></expr>, <expr><literal type="number">968.6492</literal></expr>,
          <expr><literal type="number">982.9474</literal></expr>, <expr><literal type="number">998.5214</literal></expr>, <expr><literal type="number">1013.1064</literal></expr>, <expr><literal type="number">1028.6364</literal></expr>, <expr><literal type="number">1044.2468</literal></expr>, <expr><literal type="number">1059.4588</literal></expr>, <expr><literal type="number">1075.3832</literal></expr>, <expr><literal type="number">1091.0584</literal></expr>,
          <expr><literal type="number">1106.8606</literal></expr>, <expr><literal type="number">1123.3868</literal></expr>, <expr><literal type="number">1139.5062</literal></expr>, <expr><literal type="number">1156.1862</literal></expr>, <expr><literal type="number">1172.463</literal></expr>, <expr><literal type="number">1189.339</literal></expr>, <expr><literal type="number">1206.1936</literal></expr>, <expr><literal type="number">1223.1292</literal></expr>,
          <expr><literal type="number">1240.1854</literal></expr>, <expr><literal type="number">1257.2908</literal></expr>, <expr><literal type="number">1275.3324</literal></expr>, <expr><literal type="number">1292.8518</literal></expr>, <expr><literal type="number">1310.5204</literal></expr>, <expr><literal type="number">1328.4854</literal></expr>, <expr><literal type="number">1345.9318</literal></expr>, <expr><literal type="number">1364.552</literal></expr>,
          <expr><literal type="number">1381.4658</literal></expr>, <expr><literal type="number">1400.4256</literal></expr>, <expr><literal type="number">1419.849</literal></expr>, <expr><literal type="number">1438.152</literal></expr>, <expr><literal type="number">1456.8956</literal></expr>, <expr><literal type="number">1474.8792</literal></expr>, <expr><literal type="number">1494.118</literal></expr>, <expr><literal type="number">1513.62</literal></expr>,
          <expr><literal type="number">1532.5132</literal></expr>, <expr><literal type="number">1551.9322</literal></expr>, <expr><literal type="number">1570.7726</literal></expr>, <expr><literal type="number">1590.6086</literal></expr>, <expr><literal type="number">1610.5332</literal></expr>, <expr><literal type="number">1630.5918</literal></expr>, <expr><literal type="number">1650.4294</literal></expr>, <expr><literal type="number">1669.7662</literal></expr>,
          <expr><literal type="number">1690.4106</literal></expr>, <expr><literal type="number">1710.7338</literal></expr>, <expr><literal type="number">1730.9012</literal></expr>, <expr><literal type="number">1750.4486</literal></expr>, <expr><literal type="number">1770.1556</literal></expr>, <expr><literal type="number">1791.6338</literal></expr>, <expr><literal type="number">1812.7312</literal></expr>, <expr><literal type="number">1833.6264</literal></expr>,
          <expr><literal type="number">1853.9526</literal></expr>, <expr><literal type="number">1874.8742</literal></expr>, <expr><literal type="number">1896.8326</literal></expr>, <expr><literal type="number">1918.1966</literal></expr>, <expr><literal type="number">1939.5594</literal></expr>, <expr><literal type="number">1961.07</literal></expr>, <expr><literal type="number">1983.037</literal></expr>, <expr><literal type="number">2003.1804</literal></expr>,
          <expr><literal type="number">2026.071</literal></expr>, <expr><literal type="number">2047.4884</literal></expr>, <expr><literal type="number">2070.0848</literal></expr>, <expr><literal type="number">2091.2944</literal></expr>, <expr><literal type="number">2114.333</literal></expr>, <expr><literal type="number">2135.9626</literal></expr>, <expr><literal type="number">2158.2902</literal></expr>, <expr><literal type="number">2181.0814</literal></expr>,
          <expr><literal type="number">2202.0334</literal></expr>, <expr><literal type="number">2224.4832</literal></expr>, <expr><literal type="number">2246.39</literal></expr>, <expr><literal type="number">2269.7202</literal></expr>, <expr><literal type="number">2292.1714</literal></expr>, <expr><literal type="number">2314.2358</literal></expr>, <expr><literal type="number">2338.9346</literal></expr>, <expr><literal type="number">2360.891</literal></expr>,
          <expr><literal type="number">2384.0264</literal></expr>, <expr><literal type="number">2408.3834</literal></expr>, <expr><literal type="number">2430.1544</literal></expr>, <expr><literal type="number">2454.8684</literal></expr>, <expr><literal type="number">2476.9896</literal></expr>, <expr><literal type="number">2501.4368</literal></expr>, <expr><literal type="number">2522.8702</literal></expr>, <expr><literal type="number">2548.0408</literal></expr>,
          <expr><literal type="number">2570.6738</literal></expr>, <expr><literal type="number">2593.5208</literal></expr>, <expr><literal type="number">2617.0158</literal></expr>, <expr><literal type="number">2640.2302</literal></expr>, <expr><literal type="number">2664.0962</literal></expr>, <expr><literal type="number">2687.4986</literal></expr>, <expr><literal type="number">2714.2588</literal></expr>, <expr><literal type="number">2735.3914</literal></expr>,
          <expr><literal type="number">2759.6244</literal></expr>, <expr><literal type="number">2781.8378</literal></expr>, <expr><literal type="number">2808.0072</literal></expr>, <expr><literal type="number">2830.6516</literal></expr>, <expr><literal type="number">2856.2454</literal></expr>, <expr><literal type="number">2877.2136</literal></expr>, <expr><literal type="number">2903.4546</literal></expr>, <expr><literal type="number">2926.785</literal></expr>,
          <expr><literal type="number">2951.2294</literal></expr>, <expr><literal type="number">2976.468</literal></expr>, <expr><literal type="number">3000.867</literal></expr>, <expr><literal type="number">3023.6508</literal></expr>, <expr><literal type="number">3049.91</literal></expr>, <expr><literal type="number">3073.5984</literal></expr>, <expr><literal type="number">3098.162</literal></expr>, <expr><literal type="number">3121.5564</literal></expr>,
          <expr><literal type="number">3146.2328</literal></expr>, <expr><literal type="number">3170.9484</literal></expr>, <expr><literal type="number">3195.5902</literal></expr>, <expr><literal type="number">3221.3346</literal></expr>, <expr><literal type="number">3242.7032</literal></expr>, <expr><literal type="number">3271.6112</literal></expr>, <expr><literal type="number">3296.5546</literal></expr>, <expr><literal type="number">3317.7376</literal></expr>,
          <expr><literal type="number">3345.072</literal></expr>, <expr><literal type="number">3369.9518</literal></expr>, <expr><literal type="number">3394.326</literal></expr>, <expr><literal type="number">3418.1818</literal></expr>, <expr><literal type="number">3444.6926</literal></expr>, <expr><literal type="number">3469.086</literal></expr>, <expr><literal type="number">3494.2754</literal></expr>, <expr><literal type="number">3517.8698</literal></expr>,
          <expr><literal type="number">3544.248</literal></expr>, <expr><literal type="number">3565.3768</literal></expr>, <expr><literal type="number">3588.7234</literal></expr>, <expr><literal type="number">3616.979</literal></expr>, <expr><literal type="number">3643.7504</literal></expr>, <expr><literal type="number">3668.6812</literal></expr>, <expr><literal type="number">3695.72</literal></expr>, <expr><literal type="number">3719.7392</literal></expr>,
          <expr><literal type="number">3742.6224</literal></expr>, <expr><literal type="number">3770.4456</literal></expr>, <expr><literal type="number">3795.6602</literal></expr>, <expr><literal type="number">3819.9058</literal></expr>, <expr><literal type="number">3844.002</literal></expr>, <expr><literal type="number">3869.517</literal></expr>, <expr><literal type="number">3895.6824</literal></expr>, <expr><literal type="number">3920.8622</literal></expr>,
          <expr><literal type="number">3947.1364</literal></expr>, <expr><literal type="number">3973.985</literal></expr>, <expr><literal type="number">3995.4772</literal></expr>, <expr><literal type="number">4021.62</literal></expr>, <expr><literal type="number">4046.628</literal></expr>, <expr><literal type="number">4074.65</literal></expr>, <expr><literal type="number">4096.2256</literal></expr>, <expr><literal type="number">4121.831</literal></expr>,
          <expr><literal type="number">4146.6406</literal></expr>, <expr><literal type="number">4173.276</literal></expr>, <expr><literal type="number">4195.0744</literal></expr>, <expr><literal type="number">4223.9696</literal></expr>, <expr><literal type="number">4251.3708</literal></expr>, <expr><literal type="number">4272.9966</literal></expr>, <expr><literal type="number">4300.8046</literal></expr>, <expr><literal type="number">4326.302</literal></expr>,
          <expr><literal type="number">4353.1248</literal></expr>, <expr><literal type="number">4374.312</literal></expr>, <expr><literal type="number">4403.0322</literal></expr>, <expr><literal type="number">4426.819</literal></expr>, <expr><literal type="number">4450.0598</literal></expr>, <expr><literal type="number">4478.5206</literal></expr>, <expr><literal type="number">4504.8116</literal></expr>, <expr><literal type="number">4528.8928</literal></expr>,
          <expr><literal type="number">4553.9584</literal></expr>, <expr><literal type="number">4578.8712</literal></expr>, <expr><literal type="number">4603.8384</literal></expr>, <expr><literal type="number">4632.3872</literal></expr>, <expr><literal type="number">4655.5128</literal></expr>, <expr><literal type="number">4675.821</literal></expr>, <expr><literal type="number">4704.6222</literal></expr>, <expr><literal type="number">4731.9862</literal></expr>,
          <expr><literal type="number">4755.4174</literal></expr>, <expr><literal type="number">4781.2628</literal></expr>, <expr><literal type="number">4804.332</literal></expr>, <expr><literal type="number">4832.3048</literal></expr>, <expr><literal type="number">4862.8752</literal></expr>, <expr><literal type="number">4883.4148</literal></expr>, <expr><literal type="number">4906.9544</literal></expr>, <expr><literal type="number">4935.3516</literal></expr>,
          <expr><literal type="number">4954.3532</literal></expr>, <expr><literal type="number">4984.0248</literal></expr>, <expr><literal type="number">5011.217</literal></expr>, <expr><literal type="number">5035.3258</literal></expr>, <expr><literal type="number">5057.3672</literal></expr>, <expr><literal type="number">5084.1828</literal></expr>,}</block></expr>,
      <comment type="line">// precision 11</comment>
      <expr><block>{<expr><literal type="number">1477</literal></expr>, <expr><literal type="number">1501.6014</literal></expr>, <expr><literal type="number">1526.5802</literal></expr>, <expr><literal type="number">1551.7942</literal></expr>, <expr><literal type="number">1577.3042</literal></expr>, <expr><literal type="number">1603.2062</literal></expr>, <expr><literal type="number">1629.8402</literal></expr>, <expr><literal type="number">1656.2292</literal></expr>, <expr><literal type="number">1682.9462</literal></expr>,
          <expr><literal type="number">1709.9926</literal></expr>, <expr><literal type="number">1737.3026</literal></expr>, <expr><literal type="number">1765.4252</literal></expr>, <expr><literal type="number">1793.0578</literal></expr>, <expr><literal type="number">1821.6092</literal></expr>, <expr><literal type="number">1849.626</literal></expr>, <expr><literal type="number">1878.5568</literal></expr>, <expr><literal type="number">1908.527</literal></expr>,
          <expr><literal type="number">1937.5154</literal></expr>, <expr><literal type="number">1967.1874</literal></expr>, <expr><literal type="number">1997.3878</literal></expr>, <expr><literal type="number">2027.37</literal></expr>, <expr><literal type="number">2058.1972</literal></expr>, <expr><literal type="number">2089.5728</literal></expr>, <expr><literal type="number">2120.1012</literal></expr>, <expr><literal type="number">2151.9668</literal></expr>,
          <expr><literal type="number">2183.292</literal></expr>, <expr><literal type="number">2216.0772</literal></expr>, <expr><literal type="number">2247.8578</literal></expr>, <expr><literal type="number">2280.6562</literal></expr>, <expr><literal type="number">2313.041</literal></expr>, <expr><literal type="number">2345.714</literal></expr>, <expr><literal type="number">2380.3112</literal></expr>, <expr><literal type="number">2414.1806</literal></expr>,
          <expr><literal type="number">2447.9854</literal></expr>, <expr><literal type="number">2481.656</literal></expr>, <expr><literal type="number">2516.346</literal></expr>, <expr><literal type="number">2551.5154</literal></expr>, <expr><literal type="number">2586.8378</literal></expr>, <expr><literal type="number">2621.7448</literal></expr>, <expr><literal type="number">2656.6722</literal></expr>, <expr><literal type="number">2693.5722</literal></expr>,
          <expr><literal type="number">2729.1462</literal></expr>, <expr><literal type="number">2765.4124</literal></expr>, <expr><literal type="number">2802.8728</literal></expr>, <expr><literal type="number">2838.898</literal></expr>, <expr><literal type="number">2876.408</literal></expr>, <expr><literal type="number">2913.4926</literal></expr>, <expr><literal type="number">2951.4938</literal></expr>, <expr><literal type="number">2989.6776</literal></expr>,
          <expr><literal type="number">3026.282</literal></expr>, <expr><literal type="number">3065.7704</literal></expr>, <expr><literal type="number">3104.1012</literal></expr>, <expr><literal type="number">3143.7388</literal></expr>, <expr><literal type="number">3181.6876</literal></expr>, <expr><literal type="number">3221.1872</literal></expr>, <expr><literal type="number">3261.5048</literal></expr>, <expr><literal type="number">3300.0214</literal></expr>,
          <expr><literal type="number">3339.806</literal></expr>, <expr><literal type="number">3381.409</literal></expr>, <expr><literal type="number">3421.4144</literal></expr>, <expr><literal type="number">3461.4294</literal></expr>, <expr><literal type="number">3502.2286</literal></expr>, <expr><literal type="number">3544.651</literal></expr>, <expr><literal type="number">3586.6156</literal></expr>, <expr><literal type="number">3627.337</literal></expr>,
          <expr><literal type="number">3670.083</literal></expr>, <expr><literal type="number">3711.1538</literal></expr>, <expr><literal type="number">3753.5094</literal></expr>, <expr><literal type="number">3797.01</literal></expr>, <expr><literal type="number">3838.6686</literal></expr>, <expr><literal type="number">3882.1678</literal></expr>, <expr><literal type="number">3922.8116</literal></expr>, <expr><literal type="number">3967.9978</literal></expr>,
          <expr><literal type="number">4009.9204</literal></expr>, <expr><literal type="number">4054.3286</literal></expr>, <expr><literal type="number">4097.5706</literal></expr>, <expr><literal type="number">4140.6014</literal></expr>, <expr><literal type="number">4185.544</literal></expr>, <expr><literal type="number">4229.5976</literal></expr>, <expr><literal type="number">4274.583</literal></expr>, <expr><literal type="number">4316.9438</literal></expr>,
          <expr><literal type="number">4361.672</literal></expr>, <expr><literal type="number">4406.2786</literal></expr>, <expr><literal type="number">4451.8628</literal></expr>, <expr><literal type="number">4496.1834</literal></expr>, <expr><literal type="number">4543.505</literal></expr>, <expr><literal type="number">4589.1816</literal></expr>, <expr><literal type="number">4632.5188</literal></expr>, <expr><literal type="number">4678.2294</literal></expr>,
          <expr><literal type="number">4724.8908</literal></expr>, <expr><literal type="number">4769.0194</literal></expr>, <expr><literal type="number">4817.052</literal></expr>, <expr><literal type="number">4861.4588</literal></expr>, <expr><literal type="number">4910.1596</literal></expr>, <expr><literal type="number">4956.4344</literal></expr>, <expr><literal type="number">5002.5238</literal></expr>, <expr><literal type="number">5048.13</literal></expr>,
          <expr><literal type="number">5093.6374</literal></expr>, <expr><literal type="number">5142.8162</literal></expr>, <expr><literal type="number">5187.7894</literal></expr>, <expr><literal type="number">5237.3984</literal></expr>, <expr><literal type="number">5285.6078</literal></expr>, <expr><literal type="number">5331.0858</literal></expr>, <expr><literal type="number">5379.1036</literal></expr>, <expr><literal type="number">5428.6258</literal></expr>,
          <expr><literal type="number">5474.6018</literal></expr>, <expr><literal type="number">5522.7618</literal></expr>, <expr><literal type="number">5571.5822</literal></expr>, <expr><literal type="number">5618.59</literal></expr>, <expr><literal type="number">5667.9992</literal></expr>, <expr><literal type="number">5714.88</literal></expr>, <expr><literal type="number">5763.454</literal></expr>, <expr><literal type="number">5808.6982</literal></expr>,
          <expr><literal type="number">5860.3644</literal></expr>, <expr><literal type="number">5910.2914</literal></expr>, <expr><literal type="number">5953.571</literal></expr>, <expr><literal type="number">6005.9232</literal></expr>, <expr><literal type="number">6055.1914</literal></expr>, <expr><literal type="number">6104.5882</literal></expr>, <expr><literal type="number">6154.5702</literal></expr>, <expr><literal type="number">6199.7036</literal></expr>,
          <expr><literal type="number">6251.1764</literal></expr>, <expr><literal type="number">6298.7596</literal></expr>, <expr><literal type="number">6350.0302</literal></expr>, <expr><literal type="number">6398.061</literal></expr>, <expr><literal type="number">6448.4694</literal></expr>, <expr><literal type="number">6495.933</literal></expr>, <expr><literal type="number">6548.0474</literal></expr>, <expr><literal type="number">6597.7166</literal></expr>,
          <expr><literal type="number">6646.9416</literal></expr>, <expr><literal type="number">6695.9208</literal></expr>, <expr><literal type="number">6742.6328</literal></expr>, <expr><literal type="number">6793.5276</literal></expr>, <expr><literal type="number">6842.1934</literal></expr>, <expr><literal type="number">6894.2372</literal></expr>, <expr><literal type="number">6945.3864</literal></expr>, <expr><literal type="number">6996.9228</literal></expr>,
          <expr><literal type="number">7044.2372</literal></expr>, <expr><literal type="number">7094.1374</literal></expr>, <expr><literal type="number">7142.2272</literal></expr>, <expr><literal type="number">7192.2942</literal></expr>, <expr><literal type="number">7238.8338</literal></expr>, <expr><literal type="number">7288.9006</literal></expr>, <expr><literal type="number">7344.0908</literal></expr>, <expr><literal type="number">7394.8544</literal></expr>,
          <expr><literal type="number">7443.5176</literal></expr>, <expr><literal type="number">7490.4148</literal></expr>, <expr><literal type="number">7542.9314</literal></expr>, <expr><literal type="number">7595.6738</literal></expr>, <expr><literal type="number">7641.9878</literal></expr>, <expr><literal type="number">7694.3688</literal></expr>, <expr><literal type="number">7743.0448</literal></expr>, <expr><literal type="number">7797.522</literal></expr>,
          <expr><literal type="number">7845.53</literal></expr>, <expr><literal type="number">7899.594</literal></expr>, <expr><literal type="number">7950.3132</literal></expr>, <expr><literal type="number">7996.455</literal></expr>, <expr><literal type="number">8050.9442</literal></expr>, <expr><literal type="number">8092.9114</literal></expr>, <expr><literal type="number">8153.1374</literal></expr>, <expr><literal type="number">8197.4472</literal></expr>,
          <expr><literal type="number">8252.8278</literal></expr>, <expr><literal type="number">8301.8728</literal></expr>, <expr><literal type="number">8348.6776</literal></expr>, <expr><literal type="number">8401.4698</literal></expr>, <expr><literal type="number">8453.551</literal></expr>, <expr><literal type="number">8504.6598</literal></expr>, <expr><literal type="number">8553.8944</literal></expr>, <expr><literal type="number">8604.1276</literal></expr>,
          <expr><literal type="number">8657.6514</literal></expr>, <expr><literal type="number">8710.3062</literal></expr>, <expr><literal type="number">8758.908</literal></expr>, <expr><literal type="number">8807.8706</literal></expr>, <expr><literal type="number">8862.1702</literal></expr>, <expr><literal type="number">8910.4668</literal></expr>, <expr><literal type="number">8960.77</literal></expr>, <expr><literal type="number">9007.2766</literal></expr>,
          <expr><literal type="number">9063.164</literal></expr>, <expr><literal type="number">9121.0534</literal></expr>, <expr><literal type="number">9164.1354</literal></expr>, <expr><literal type="number">9218.1594</literal></expr>, <expr><literal type="number">9267.767</literal></expr>, <expr><literal type="number">9319.0594</literal></expr>, <expr><literal type="number">9372.155</literal></expr>, <expr><literal type="number">9419.7126</literal></expr>,
          <expr><literal type="number">9474.3722</literal></expr>, <expr><literal type="number">9520.1338</literal></expr>, <expr><literal type="number">9572.368</literal></expr>, <expr><literal type="number">9622.7702</literal></expr>, <expr><literal type="number">9675.8448</literal></expr>, <expr><literal type="number">9726.5396</literal></expr>, <expr><literal type="number">9778.7378</literal></expr>, <expr><literal type="number">9827.6554</literal></expr>,
          <expr><literal type="number">9878.1922</literal></expr>, <expr><literal type="number">9928.7782</literal></expr>, <expr><literal type="number">9978.3984</literal></expr>, <expr><literal type="number">10026.578</literal></expr>, <expr><literal type="number">10076.5626</literal></expr>, <expr><literal type="number">10137.1618</literal></expr>, <expr><literal type="number">10177.5244</literal></expr>,
          <expr><literal type="number">10229.9176</literal></expr>,}</block></expr>,
      <comment type="line">// precision 12</comment>
      <expr><block>{<expr><literal type="number">2954</literal></expr>, <expr><literal type="number">3003.4782</literal></expr>, <expr><literal type="number">3053.3568</literal></expr>, <expr><literal type="number">3104.3666</literal></expr>, <expr><literal type="number">3155.324</literal></expr>, <expr><literal type="number">3206.9598</literal></expr>, <expr><literal type="number">3259.648</literal></expr>, <expr><literal type="number">3312.539</literal></expr>, <expr><literal type="number">3366.1474</literal></expr>,
          <expr><literal type="number">3420.2576</literal></expr>, <expr><literal type="number">3474.8376</literal></expr>, <expr><literal type="number">3530.6076</literal></expr>, <expr><literal type="number">3586.451</literal></expr>, <expr><literal type="number">3643.38</literal></expr>, <expr><literal type="number">3700.4104</literal></expr>, <expr><literal type="number">3757.5638</literal></expr>, <expr><literal type="number">3815.9676</literal></expr>,
          <expr><literal type="number">3875.193</literal></expr>, <expr><literal type="number">3934.838</literal></expr>, <expr><literal type="number">3994.8548</literal></expr>, <expr><literal type="number">4055.018</literal></expr>, <expr><literal type="number">4117.1742</literal></expr>, <expr><literal type="number">4178.4482</literal></expr>, <expr><literal type="number">4241.1294</literal></expr>, <expr><literal type="number">4304.4776</literal></expr>,
          <expr><literal type="number">4367.4044</literal></expr>, <expr><literal type="number">4431.8724</literal></expr>, <expr><literal type="number">4496.3732</literal></expr>, <expr><literal type="number">4561.4304</literal></expr>, <expr><literal type="number">4627.5326</literal></expr>, <expr><literal type="number">4693.949</literal></expr>, <expr><literal type="number">4761.5532</literal></expr>, <expr><literal type="number">4828.7256</literal></expr>,
          <expr><literal type="number">4897.6182</literal></expr>, <expr><literal type="number">4965.5186</literal></expr>, <expr><literal type="number">5034.4528</literal></expr>, <expr><literal type="number">5104.865</literal></expr>, <expr><literal type="number">5174.7164</literal></expr>, <expr><literal type="number">5244.6828</literal></expr>, <expr><literal type="number">5316.6708</literal></expr>, <expr><literal type="number">5387.8312</literal></expr>,
          <expr><literal type="number">5459.9036</literal></expr>, <expr><literal type="number">5532.476</literal></expr>, <expr><literal type="number">5604.8652</literal></expr>, <expr><literal type="number">5679.6718</literal></expr>, <expr><literal type="number">5753.757</literal></expr>, <expr><literal type="number">5830.2072</literal></expr>, <expr><literal type="number">5905.2828</literal></expr>, <expr><literal type="number">5980.0434</literal></expr>,
          <expr><literal type="number">6056.6264</literal></expr>, <expr><literal type="number">6134.3192</literal></expr>, <expr><literal type="number">6211.5746</literal></expr>, <expr><literal type="number">6290.0816</literal></expr>, <expr><literal type="number">6367.1176</literal></expr>, <expr><literal type="number">6447.9796</literal></expr>, <expr><literal type="number">6526.5576</literal></expr>, <expr><literal type="number">6606.1858</literal></expr>,
          <expr><literal type="number">6686.9144</literal></expr>, <expr><literal type="number">6766.1142</literal></expr>, <expr><literal type="number">6847.0818</literal></expr>, <expr><literal type="number">6927.9664</literal></expr>, <expr><literal type="number">7010.9096</literal></expr>, <expr><literal type="number">7091.0816</literal></expr>, <expr><literal type="number">7175.3962</literal></expr>, <expr><literal type="number">7260.3454</literal></expr>,
          <expr><literal type="number">7344.018</literal></expr>, <expr><literal type="number">7426.4214</literal></expr>, <expr><literal type="number">7511.3106</literal></expr>, <expr><literal type="number">7596.0686</literal></expr>, <expr><literal type="number">7679.8094</literal></expr>, <expr><literal type="number">7765.818</literal></expr>, <expr><literal type="number">7852.4248</literal></expr>, <expr><literal type="number">7936.834</literal></expr>,
          <expr><literal type="number">8022.363</literal></expr>, <expr><literal type="number">8109.5066</literal></expr>, <expr><literal type="number">8200.4554</literal></expr>, <expr><literal type="number">8288.5832</literal></expr>, <expr><literal type="number">8373.366</literal></expr>, <expr><literal type="number">8463.4808</literal></expr>, <expr><literal type="number">8549.7682</literal></expr>, <expr><literal type="number">8642.0522</literal></expr>,
          <expr><literal type="number">8728.3288</literal></expr>, <expr><literal type="number">8820.9528</literal></expr>, <expr><literal type="number">8907.727</literal></expr>, <expr><literal type="number">9001.0794</literal></expr>, <expr><literal type="number">9091.2522</literal></expr>, <expr><literal type="number">9179.988</literal></expr>, <expr><literal type="number">9269.852</literal></expr>, <expr><literal type="number">9362.6394</literal></expr>,
          <expr><literal type="number">9453.642</literal></expr>, <expr><literal type="number">9546.9024</literal></expr>, <expr><literal type="number">9640.6616</literal></expr>, <expr><literal type="number">9732.6622</literal></expr>, <expr><literal type="number">9824.3254</literal></expr>, <expr><literal type="number">9917.7484</literal></expr>, <expr><literal type="number">10007.9392</literal></expr>, <expr><literal type="number">10106.7508</literal></expr>,
          <expr><literal type="number">10196.2152</literal></expr>, <expr><literal type="number">10289.8114</literal></expr>, <expr><literal type="number">10383.5494</literal></expr>, <expr><literal type="number">10482.3064</literal></expr>, <expr><literal type="number">10576.8734</literal></expr>, <expr><literal type="number">10668.7872</literal></expr>, <expr><literal type="number">10764.7156</literal></expr>,
          <expr><literal type="number">10862.0196</literal></expr>, <expr><literal type="number">10952.793</literal></expr>, <expr><literal type="number">11049.9748</literal></expr>, <expr><literal type="number">11146.0702</literal></expr>, <expr><literal type="number">11241.4492</literal></expr>, <expr><literal type="number">11339.2772</literal></expr>, <expr><literal type="number">11434.2336</literal></expr>,
          <expr><literal type="number">11530.741</literal></expr>, <expr><literal type="number">11627.6136</literal></expr>, <expr><literal type="number">11726.311</literal></expr>, <expr><literal type="number">11821.5964</literal></expr>, <expr><literal type="number">11918.837</literal></expr>, <expr><literal type="number">12015.3724</literal></expr>, <expr><literal type="number">12113.0162</literal></expr>,
          <expr><literal type="number">12213.0424</literal></expr>, <expr><literal type="number">12306.9804</literal></expr>, <expr><literal type="number">12408.4518</literal></expr>, <expr><literal type="number">12504.8968</literal></expr>, <expr><literal type="number">12604.586</literal></expr>, <expr><literal type="number">12700.9332</literal></expr>, <expr><literal type="number">12798.705</literal></expr>,
          <expr><literal type="number">12898.5142</literal></expr>, <expr><literal type="number">12997.0488</literal></expr>, <expr><literal type="number">13094.788</literal></expr>, <expr><literal type="number">13198.475</literal></expr>, <expr><literal type="number">13292.7764</literal></expr>, <expr><literal type="number">13392.9698</literal></expr>, <expr><literal type="number">13486.8574</literal></expr>,
          <expr><literal type="number">13590.1616</literal></expr>, <expr><literal type="number">13686.5838</literal></expr>, <expr><literal type="number">13783.6264</literal></expr>, <expr><literal type="number">13887.2638</literal></expr>, <expr><literal type="number">13992.0978</literal></expr>, <expr><literal type="number">14081.0844</literal></expr>, <expr><literal type="number">14189.9956</literal></expr>,
          <expr><literal type="number">14280.0912</literal></expr>, <expr><literal type="number">14382.4956</literal></expr>, <expr><literal type="number">14486.4384</literal></expr>, <expr><literal type="number">14588.1082</literal></expr>, <expr><literal type="number">14686.2392</literal></expr>, <expr><literal type="number">14782.276</literal></expr>, <expr><literal type="number">14888.0284</literal></expr>,
          <expr><literal type="number">14985.1864</literal></expr>, <expr><literal type="number">15088.8596</literal></expr>, <expr><literal type="number">15187.0998</literal></expr>, <expr><literal type="number">15285.027</literal></expr>, <expr><literal type="number">15383.6694</literal></expr>, <expr><literal type="number">15495.8266</literal></expr>, <expr><literal type="number">15591.3736</literal></expr>,
          <expr><literal type="number">15694.2008</literal></expr>, <expr><literal type="number">15790.3246</literal></expr>, <expr><literal type="number">15898.4116</literal></expr>, <expr><literal type="number">15997.4522</literal></expr>, <expr><literal type="number">16095.5014</literal></expr>, <expr><literal type="number">16198.8514</literal></expr>, <expr><literal type="number">16291.7492</literal></expr>,
          <expr><literal type="number">16402.6424</literal></expr>, <expr><literal type="number">16499.1266</literal></expr>, <expr><literal type="number">16606.2436</literal></expr>, <expr><literal type="number">16697.7186</literal></expr>, <expr><literal type="number">16796.3946</literal></expr>, <expr><literal type="number">16902.3376</literal></expr>, <expr><literal type="number">17005.7672</literal></expr>,
          <expr><literal type="number">17100.814</literal></expr>, <expr><literal type="number">17206.8282</literal></expr>, <expr><literal type="number">17305.8262</literal></expr>, <expr><literal type="number">17416.0744</literal></expr>, <expr><literal type="number">17508.4092</literal></expr>, <expr><literal type="number">17617.0178</literal></expr>, <expr><literal type="number">17715.4554</literal></expr>,
          <expr><literal type="number">17816.758</literal></expr>, <expr><literal type="number">17920.1748</literal></expr>, <expr><literal type="number">18012.9236</literal></expr>, <expr><literal type="number">18119.7984</literal></expr>, <expr><literal type="number">18223.2248</literal></expr>, <expr><literal type="number">18324.2482</literal></expr>, <expr><literal type="number">18426.6276</literal></expr>,
          <expr><literal type="number">18525.0932</literal></expr>, <expr><literal type="number">18629.8976</literal></expr>, <expr><literal type="number">18733.2588</literal></expr>, <expr><literal type="number">18831.0466</literal></expr>, <expr><literal type="number">18940.1366</literal></expr>, <expr><literal type="number">19032.2696</literal></expr>, <expr><literal type="number">19131.729</literal></expr>,
          <expr><literal type="number">19243.4864</literal></expr>, <expr><literal type="number">19349.6932</literal></expr>, <expr><literal type="number">19442.866</literal></expr>, <expr><literal type="number">19547.9448</literal></expr>, <expr><literal type="number">19653.2798</literal></expr>, <expr><literal type="number">19754.4034</literal></expr>, <expr><literal type="number">19854.0692</literal></expr>,
          <expr><literal type="number">19965.1224</literal></expr>, <expr><literal type="number">20065.1774</literal></expr>, <expr><literal type="number">20158.2212</literal></expr>, <expr><literal type="number">20253.353</literal></expr>, <expr><literal type="number">20366.3264</literal></expr>, <expr><literal type="number">20463.22</literal></expr>,}</block></expr>,
      <comment type="line">// precision 13</comment>
      <expr><block>{<expr><literal type="number">5908.5052</literal></expr>, <expr><literal type="number">6007.2672</literal></expr>, <expr><literal type="number">6107.347</literal></expr>, <expr><literal type="number">6208.5794</literal></expr>, <expr><literal type="number">6311.2622</literal></expr>, <expr><literal type="number">6414.5514</literal></expr>, <expr><literal type="number">6519.3376</literal></expr>, <expr><literal type="number">6625.6952</literal></expr>,
          <expr><literal type="number">6732.5988</literal></expr>, <expr><literal type="number">6841.3552</literal></expr>, <expr><literal type="number">6950.5972</literal></expr>, <expr><literal type="number">7061.3082</literal></expr>, <expr><literal type="number">7173.5646</literal></expr>, <expr><literal type="number">7287.109</literal></expr>, <expr><literal type="number">7401.8216</literal></expr>, <expr><literal type="number">7516.4344</literal></expr>,
          <expr><literal type="number">7633.3802</literal></expr>, <expr><literal type="number">7751.2962</literal></expr>, <expr><literal type="number">7870.3784</literal></expr>, <expr><literal type="number">7990.292</literal></expr>, <expr><literal type="number">8110.79</literal></expr>, <expr><literal type="number">8233.4574</literal></expr>, <expr><literal type="number">8356.6036</literal></expr>, <expr><literal type="number">8482.2712</literal></expr>,
          <expr><literal type="number">8607.7708</literal></expr>, <expr><literal type="number">8735.099</literal></expr>, <expr><literal type="number">8863.1858</literal></expr>, <expr><literal type="number">8993.4746</literal></expr>, <expr><literal type="number">9123.8496</literal></expr>, <expr><literal type="number">9255.6794</literal></expr>, <expr><literal type="number">9388.5448</literal></expr>, <expr><literal type="number">9522.7516</literal></expr>,
          <expr><literal type="number">9657.3106</literal></expr>, <expr><literal type="number">9792.6094</literal></expr>, <expr><literal type="number">9930.5642</literal></expr>, <expr><literal type="number">10068.794</literal></expr>, <expr><literal type="number">10206.7256</literal></expr>, <expr><literal type="number">10347.81</literal></expr>, <expr><literal type="number">10490.3196</literal></expr>, <expr><literal type="number">10632.0778</literal></expr>,
          <expr><literal type="number">10775.9916</literal></expr>, <expr><literal type="number">10920.4662</literal></expr>, <expr><literal type="number">11066.124</literal></expr>, <expr><literal type="number">11213.073</literal></expr>, <expr><literal type="number">11358.0362</literal></expr>, <expr><literal type="number">11508.1006</literal></expr>, <expr><literal type="number">11659.1716</literal></expr>,
          <expr><literal type="number">11808.7514</literal></expr>, <expr><literal type="number">11959.4884</literal></expr>, <expr><literal type="number">12112.1314</literal></expr>, <expr><literal type="number">12265.037</literal></expr>, <expr><literal type="number">12420.3756</literal></expr>, <expr><literal type="number">12578.933</literal></expr>, <expr><literal type="number">12734.311</literal></expr>,
          <expr><literal type="number">12890.0006</literal></expr>, <expr><literal type="number">13047.2144</literal></expr>, <expr><literal type="number">13207.3096</literal></expr>, <expr><literal type="number">13368.5144</literal></expr>, <expr><literal type="number">13528.024</literal></expr>, <expr><literal type="number">13689.847</literal></expr>, <expr><literal type="number">13852.7528</literal></expr>,
          <expr><literal type="number">14018.3168</literal></expr>, <expr><literal type="number">14180.5372</literal></expr>, <expr><literal type="number">14346.9668</literal></expr>, <expr><literal type="number">14513.5074</literal></expr>, <expr><literal type="number">14677.867</literal></expr>, <expr><literal type="number">14846.2186</literal></expr>, <expr><literal type="number">15017.4186</literal></expr>,
          <expr><literal type="number">15184.9716</literal></expr>, <expr><literal type="number">15356.339</literal></expr>, <expr><literal type="number">15529.2972</literal></expr>, <expr><literal type="number">15697.3578</literal></expr>, <expr><literal type="number">15871.8686</literal></expr>, <expr><literal type="number">16042.187</literal></expr>, <expr><literal type="number">16216.4094</literal></expr>,
          <expr><literal type="number">16389.4188</literal></expr>, <expr><literal type="number">16565.9126</literal></expr>, <expr><literal type="number">16742.3272</literal></expr>, <expr><literal type="number">16919.0042</literal></expr>, <expr><literal type="number">17094.7592</literal></expr>, <expr><literal type="number">17273.965</literal></expr>, <expr><literal type="number">17451.8342</literal></expr>,
          <expr><literal type="number">17634.4254</literal></expr>, <expr><literal type="number">17810.5984</literal></expr>, <expr><literal type="number">17988.9242</literal></expr>, <expr><literal type="number">18171.051</literal></expr>, <expr><literal type="number">18354.7938</literal></expr>, <expr><literal type="number">18539.466</literal></expr>, <expr><literal type="number">18721.0408</literal></expr>,
          <expr><literal type="number">18904.9972</literal></expr>, <expr><literal type="number">19081.867</literal></expr>, <expr><literal type="number">19271.9118</literal></expr>, <expr><literal type="number">19451.8694</literal></expr>, <expr><literal type="number">19637.9816</literal></expr>, <expr><literal type="number">19821.2922</literal></expr>, <expr><literal type="number">20013.1292</literal></expr>,
          <expr><literal type="number">20199.3858</literal></expr>, <expr><literal type="number">20387.8726</literal></expr>, <expr><literal type="number">20572.9514</literal></expr>, <expr><literal type="number">20770.7764</literal></expr>, <expr><literal type="number">20955.1714</literal></expr>, <expr><literal type="number">21144.751</literal></expr>, <expr><literal type="number">21329.9952</literal></expr>,
          <expr><literal type="number">21520.709</literal></expr>, <expr><literal type="number">21712.7016</literal></expr>, <expr><literal type="number">21906.3868</literal></expr>, <expr><literal type="number">22096.2626</literal></expr>, <expr><literal type="number">22286.0524</literal></expr>, <expr><literal type="number">22475.051</literal></expr>, <expr><literal type="number">22665.5098</literal></expr>,
          <expr><literal type="number">22862.8492</literal></expr>, <expr><literal type="number">23055.5294</literal></expr>, <expr><literal type="number">23249.6138</literal></expr>, <expr><literal type="number">23437.848</literal></expr>, <expr><literal type="number">23636.273</literal></expr>, <expr><literal type="number">23826.093</literal></expr>, <expr><literal type="number">24020.3296</literal></expr>,
          <expr><literal type="number">24213.3896</literal></expr>, <expr><literal type="number">24411.7392</literal></expr>, <expr><literal type="number">24602.9614</literal></expr>, <expr><literal type="number">24805.7952</literal></expr>, <expr><literal type="number">24998.1552</literal></expr>, <expr><literal type="number">25193.9588</literal></expr>, <expr><literal type="number">25389.0166</literal></expr>,
          <expr><literal type="number">25585.8392</literal></expr>, <expr><literal type="number">25780.6976</literal></expr>, <expr><literal type="number">25981.2728</literal></expr>, <expr><literal type="number">26175.977</literal></expr>, <expr><literal type="number">26376.5252</literal></expr>, <expr><literal type="number">26570.1964</literal></expr>, <expr><literal type="number">26773.387</literal></expr>,
          <expr><literal type="number">26962.9812</literal></expr>, <expr><literal type="number">27163.0586</literal></expr>, <expr><literal type="number">27368.164</literal></expr>, <expr><literal type="number">27565.0534</literal></expr>, <expr><literal type="number">27758.7428</literal></expr>, <expr><literal type="number">27961.1276</literal></expr>, <expr><literal type="number">28163.2324</literal></expr>,
          <expr><literal type="number">28362.3816</literal></expr>, <expr><literal type="number">28565.7668</literal></expr>, <expr><literal type="number">28758.644</literal></expr>, <expr><literal type="number">28956.9768</literal></expr>, <expr><literal type="number">29163.4722</literal></expr>, <expr><literal type="number">29354.7026</literal></expr>, <expr><literal type="number">29561.1186</literal></expr>,
          <expr><literal type="number">29767.9948</literal></expr>, <expr><literal type="number">29959.9986</literal></expr>, <expr><literal type="number">30164.0492</literal></expr>, <expr><literal type="number">30366.9818</literal></expr>, <expr><literal type="number">30562.5338</literal></expr>, <expr><literal type="number">30762.9928</literal></expr>, <expr><literal type="number">30976.1592</literal></expr>,
          <expr><literal type="number">31166.274</literal></expr>, <expr><literal type="number">31376.722</literal></expr>, <expr><literal type="number">31570.3734</literal></expr>, <expr><literal type="number">31770.809</literal></expr>, <expr><literal type="number">31974.8934</literal></expr>, <expr><literal type="number">32179.5286</literal></expr>, <expr><literal type="number">32387.5442</literal></expr>,
          <expr><literal type="number">32582.3504</literal></expr>, <expr><literal type="number">32794.076</literal></expr>, <expr><literal type="number">32989.9528</literal></expr>, <expr><literal type="number">33191.842</literal></expr>, <expr><literal type="number">33392.4684</literal></expr>, <expr><literal type="number">33595.659</literal></expr>, <expr><literal type="number">33801.8672</literal></expr>,
          <expr><literal type="number">34000.3414</literal></expr>, <expr><literal type="number">34200.0922</literal></expr>, <expr><literal type="number">34402.6792</literal></expr>, <expr><literal type="number">34610.0638</literal></expr>, <expr><literal type="number">34804.0084</literal></expr>, <expr><literal type="number">35011.13</literal></expr>, <expr><literal type="number">35218.669</literal></expr>,
          <expr><literal type="number">35418.6634</literal></expr>, <expr><literal type="number">35619.0792</literal></expr>, <expr><literal type="number">35830.6534</literal></expr>, <expr><literal type="number">36028.4966</literal></expr>, <expr><literal type="number">36229.7902</literal></expr>, <expr><literal type="number">36438.6422</literal></expr>, <expr><literal type="number">36630.7764</literal></expr>,
          <expr><literal type="number">36833.3102</literal></expr>, <expr><literal type="number">37048.6728</literal></expr>, <expr><literal type="number">37247.3916</literal></expr>, <expr><literal type="number">37453.5904</literal></expr>, <expr><literal type="number">37669.3614</literal></expr>, <expr><literal type="number">37854.5526</literal></expr>, <expr><literal type="number">38059.305</literal></expr>,
          <expr><literal type="number">38268.0936</literal></expr>, <expr><literal type="number">38470.2516</literal></expr>, <expr><literal type="number">38674.7064</literal></expr>, <expr><literal type="number">38876.167</literal></expr>, <expr><literal type="number">39068.3794</literal></expr>, <expr><literal type="number">39281.9144</literal></expr>, <expr><literal type="number">39492.8566</literal></expr>,
          <expr><literal type="number">39684.8628</literal></expr>, <expr><literal type="number">39898.4108</literal></expr>, <expr><literal type="number">40093.1836</literal></expr>, <expr><literal type="number">40297.6858</literal></expr>, <expr><literal type="number">40489.7086</literal></expr>, <expr><literal type="number">40717.2424</literal></expr>,}</block></expr>,
      <comment type="line">// precision 14</comment>
      <expr><block>{<expr><literal type="number">11817.475</literal></expr>, <expr><literal type="number">12015.0046</literal></expr>, <expr><literal type="number">12215.3792</literal></expr>, <expr><literal type="number">12417.7504</literal></expr>, <expr><literal type="number">12623.1814</literal></expr>, <expr><literal type="number">12830.0086</literal></expr>, <expr><literal type="number">13040.0072</literal></expr>, <expr><literal type="number">13252.503</literal></expr>,
          <expr><literal type="number">13466.178</literal></expr>, <expr><literal type="number">13683.2738</literal></expr>, <expr><literal type="number">13902.0344</literal></expr>, <expr><literal type="number">14123.9798</literal></expr>, <expr><literal type="number">14347.394</literal></expr>, <expr><literal type="number">14573.7784</literal></expr>, <expr><literal type="number">14802.6894</literal></expr>,
          <expr><literal type="number">15033.6824</literal></expr>, <expr><literal type="number">15266.9134</literal></expr>, <expr><literal type="number">15502.8624</literal></expr>, <expr><literal type="number">15741.4944</literal></expr>, <expr><literal type="number">15980.7956</literal></expr>, <expr><literal type="number">16223.8916</literal></expr>, <expr><literal type="number">16468.6316</literal></expr>,
          <expr><literal type="number">16715.733</literal></expr>, <expr><literal type="number">16965.5726</literal></expr>, <expr><literal type="number">17217.204</literal></expr>, <expr><literal type="number">17470.666</literal></expr>, <expr><literal type="number">17727.8516</literal></expr>, <expr><literal type="number">17986.7886</literal></expr>, <expr><literal type="number">18247.6902</literal></expr>,
          <expr><literal type="number">18510.9632</literal></expr>, <expr><literal type="number">18775.304</literal></expr>, <expr><literal type="number">19044.7486</literal></expr>, <expr><literal type="number">19314.4408</literal></expr>, <expr><literal type="number">19587.202</literal></expr>, <expr><literal type="number">19862.2576</literal></expr>, <expr><literal type="number">20135.924</literal></expr>,
          <expr><literal type="number">20417.0324</literal></expr>, <expr><literal type="number">20697.9788</literal></expr>, <expr><literal type="number">20979.6112</literal></expr>, <expr><literal type="number">21265.0274</literal></expr>, <expr><literal type="number">21550.723</literal></expr>, <expr><literal type="number">21841.6906</literal></expr>, <expr><literal type="number">22132.162</literal></expr>,
          <expr><literal type="number">22428.1406</literal></expr>, <expr><literal type="number">22722.127</literal></expr>, <expr><literal type="number">23020.5606</literal></expr>, <expr><literal type="number">23319.7394</literal></expr>, <expr><literal type="number">23620.4014</literal></expr>, <expr><literal type="number">23925.2728</literal></expr>, <expr><literal type="number">24226.9224</literal></expr>,
          <expr><literal type="number">24535.581</literal></expr>, <expr><literal type="number">24845.505</literal></expr>, <expr><literal type="number">25155.9618</literal></expr>, <expr><literal type="number">25470.3828</literal></expr>, <expr><literal type="number">25785.9702</literal></expr>, <expr><literal type="number">26103.7764</literal></expr>, <expr><literal type="number">26420.4132</literal></expr>,
          <expr><literal type="number">26742.0186</literal></expr>, <expr><literal type="number">27062.8852</literal></expr>, <expr><literal type="number">27388.415</literal></expr>, <expr><literal type="number">27714.6024</literal></expr>, <expr><literal type="number">28042.296</literal></expr>, <expr><literal type="number">28365.4494</literal></expr>, <expr><literal type="number">28701.1526</literal></expr>,
          <expr><literal type="number">29031.8008</literal></expr>, <expr><literal type="number">29364.2156</literal></expr>, <expr><literal type="number">29704.497</literal></expr>, <expr><literal type="number">30037.1458</literal></expr>, <expr><literal type="number">30380.111</literal></expr>, <expr><literal type="number">30723.8168</literal></expr>, <expr><literal type="number">31059.5114</literal></expr>,
          <expr><literal type="number">31404.9498</literal></expr>, <expr><literal type="number">31751.6752</literal></expr>, <expr><literal type="number">32095.2686</literal></expr>, <expr><literal type="number">32444.7792</literal></expr>, <expr><literal type="number">32794.767</literal></expr>, <expr><literal type="number">33145.204</literal></expr>, <expr><literal type="number">33498.4226</literal></expr>,
          <expr><literal type="number">33847.6502</literal></expr>, <expr><literal type="number">34209.006</literal></expr>, <expr><literal type="number">34560.849</literal></expr>, <expr><literal type="number">34919.4838</literal></expr>, <expr><literal type="number">35274.9778</literal></expr>, <expr><literal type="number">35635.1322</literal></expr>, <expr><literal type="number">35996.3266</literal></expr>,
          <expr><literal type="number">36359.1394</literal></expr>, <expr><literal type="number">36722.8266</literal></expr>, <expr><literal type="number">37082.8516</literal></expr>, <expr><literal type="number">37447.7354</literal></expr>, <expr><literal type="number">37815.9606</literal></expr>, <expr><literal type="number">38191.0692</literal></expr>, <expr><literal type="number">38559.4106</literal></expr>,
          <expr><literal type="number">38924.8112</literal></expr>, <expr><literal type="number">39294.6726</literal></expr>, <expr><literal type="number">39663.973</literal></expr>, <expr><literal type="number">40042.261</literal></expr>, <expr><literal type="number">40416.2036</literal></expr>, <expr><literal type="number">40779.2036</literal></expr>, <expr><literal type="number">41161.6436</literal></expr>,
          <expr><literal type="number">41540.9014</literal></expr>, <expr><literal type="number">41921.1998</literal></expr>, <expr><literal type="number">42294.7698</literal></expr>, <expr><literal type="number">42678.5264</literal></expr>, <expr><literal type="number">43061.3464</literal></expr>, <expr><literal type="number">43432.375</literal></expr>, <expr><literal type="number">43818.432</literal></expr>,
          <expr><literal type="number">44198.6598</literal></expr>, <expr><literal type="number">44583.0138</literal></expr>, <expr><literal type="number">44970.4794</literal></expr>, <expr><literal type="number">45353.924</literal></expr>, <expr><literal type="number">45729.858</literal></expr>, <expr><literal type="number">46118.2224</literal></expr>, <expr><literal type="number">46511.5724</literal></expr>,
          <expr><literal type="number">46900.7386</literal></expr>, <expr><literal type="number">47280.6964</literal></expr>, <expr><literal type="number">47668.1472</literal></expr>, <expr><literal type="number">48055.6796</literal></expr>, <expr><literal type="number">48446.9436</literal></expr>, <expr><literal type="number">48838.7146</literal></expr>, <expr><literal type="number">49217.7296</literal></expr>,
          <expr><literal type="number">49613.7796</literal></expr>, <expr><literal type="number">50010.7508</literal></expr>, <expr><literal type="number">50410.0208</literal></expr>, <expr><literal type="number">50793.7886</literal></expr>, <expr><literal type="number">51190.2456</literal></expr>, <expr><literal type="number">51583.1882</literal></expr>, <expr><literal type="number">51971.0796</literal></expr>,
          <expr><literal type="number">52376.5338</literal></expr>, <expr><literal type="number">52763.319</literal></expr>, <expr><literal type="number">53165.5534</literal></expr>, <expr><literal type="number">53556.5594</literal></expr>, <expr><literal type="number">53948.2702</literal></expr>, <expr><literal type="number">54346.352</literal></expr>, <expr><literal type="number">54748.7914</literal></expr>,
          <expr><literal type="number">55138.577</literal></expr>, <expr><literal type="number">55543.4824</literal></expr>, <expr><literal type="number">55941.1748</literal></expr>, <expr><literal type="number">56333.7746</literal></expr>, <expr><literal type="number">56745.1552</literal></expr>, <expr><literal type="number">57142.7944</literal></expr>, <expr><literal type="number">57545.2236</literal></expr>,
          <expr><literal type="number">57935.9956</literal></expr>, <expr><literal type="number">58348.5268</literal></expr>, <expr><literal type="number">58737.5474</literal></expr>, <expr><literal type="number">59158.5962</literal></expr>, <expr><literal type="number">59542.6896</literal></expr>, <expr><literal type="number">59958.8004</literal></expr>, <expr><literal type="number">60349.3788</literal></expr>,
          <expr><literal type="number">60755.0212</literal></expr>, <expr><literal type="number">61147.6144</literal></expr>, <expr><literal type="number">61548.194</literal></expr>, <expr><literal type="number">61946.0696</literal></expr>, <expr><literal type="number">62348.6042</literal></expr>, <expr><literal type="number">62763.603</literal></expr>, <expr><literal type="number">63162.781</literal></expr>,
          <expr><literal type="number">63560.635</literal></expr>, <expr><literal type="number">63974.3482</literal></expr>, <expr><literal type="number">64366.4908</literal></expr>, <expr><literal type="number">64771.5876</literal></expr>, <expr><literal type="number">65176.7346</literal></expr>, <expr><literal type="number">65597.3916</literal></expr>, <expr><literal type="number">65995.915</literal></expr>,
          <expr><literal type="number">66394.0384</literal></expr>, <expr><literal type="number">66822.9396</literal></expr>, <expr><literal type="number">67203.6336</literal></expr>, <expr><literal type="number">67612.2032</literal></expr>, <expr><literal type="number">68019.0078</literal></expr>, <expr><literal type="number">68420.0388</literal></expr>, <expr><literal type="number">68821.22</literal></expr>,
          <expr><literal type="number">69235.8388</literal></expr>, <expr><literal type="number">69640.0724</literal></expr>, <expr><literal type="number">70055.155</literal></expr>, <expr><literal type="number">70466.357</literal></expr>, <expr><literal type="number">70863.4266</literal></expr>, <expr><literal type="number">71276.2482</literal></expr>, <expr><literal type="number">71677.0306</literal></expr>,
          <expr><literal type="number">72080.2006</literal></expr>, <expr><literal type="number">72493.0214</literal></expr>, <expr><literal type="number">72893.5952</literal></expr>, <expr><literal type="number">73314.5856</literal></expr>, <expr><literal type="number">73714.9852</literal></expr>, <expr><literal type="number">74125.3022</literal></expr>, <expr><literal type="number">74521.2122</literal></expr>,
          <expr><literal type="number">74933.6814</literal></expr>, <expr><literal type="number">75341.5904</literal></expr>, <expr><literal type="number">75743.0244</literal></expr>, <expr><literal type="number">76166.0278</literal></expr>, <expr><literal type="number">76572.1322</literal></expr>, <expr><literal type="number">76973.1028</literal></expr>, <expr><literal type="number">77381.6284</literal></expr>,
          <expr><literal type="number">77800.6092</literal></expr>, <expr><literal type="number">78189.328</literal></expr>, <expr><literal type="number">78607.0962</literal></expr>, <expr><literal type="number">79012.2508</literal></expr>, <expr><literal type="number">79407.8358</literal></expr>, <expr><literal type="number">79825.725</literal></expr>, <expr><literal type="number">80238.701</literal></expr>,
          <expr><literal type="number">80646.891</literal></expr>, <expr><literal type="number">81035.6436</literal></expr>, <expr><literal type="number">81460.0448</literal></expr>, <expr><literal type="number">81876.3884</literal></expr>,}</block></expr>,
      <comment type="line">// precision 15</comment>
      <expr><block>{<expr><literal type="number">23635.0036</literal></expr>, <expr><literal type="number">24030.8034</literal></expr>, <expr><literal type="number">24431.4744</literal></expr>, <expr><literal type="number">24837.1524</literal></expr>, <expr><literal type="number">25246.7928</literal></expr>, <expr><literal type="number">25661.326</literal></expr>, <expr><literal type="number">26081.3532</literal></expr>,
          <expr><literal type="number">26505.2806</literal></expr>, <expr><literal type="number">26933.9892</literal></expr>, <expr><literal type="number">27367.7098</literal></expr>, <expr><literal type="number">27805.318</literal></expr>, <expr><literal type="number">28248.799</literal></expr>, <expr><literal type="number">28696.4382</literal></expr>, <expr><literal type="number">29148.8244</literal></expr>,
          <expr><literal type="number">29605.5138</literal></expr>, <expr><literal type="number">30066.8668</literal></expr>, <expr><literal type="number">30534.2344</literal></expr>, <expr><literal type="number">31006.32</literal></expr>, <expr><literal type="number">31480.778</literal></expr>, <expr><literal type="number">31962.2418</literal></expr>, <expr><literal type="number">32447.3324</literal></expr>,
          <expr><literal type="number">32938.0232</literal></expr>, <expr><literal type="number">33432.731</literal></expr>, <expr><literal type="number">33930.728</literal></expr>, <expr><literal type="number">34433.9896</literal></expr>, <expr><literal type="number">34944.1402</literal></expr>, <expr><literal type="number">35457.5588</literal></expr>, <expr><literal type="number">35974.5958</literal></expr>,
          <expr><literal type="number">36497.3296</literal></expr>, <expr><literal type="number">37021.9096</literal></expr>, <expr><literal type="number">37554.326</literal></expr>, <expr><literal type="number">38088.0826</literal></expr>, <expr><literal type="number">38628.8816</literal></expr>, <expr><literal type="number">39171.3192</literal></expr>, <expr><literal type="number">39723.2326</literal></expr>,
          <expr><literal type="number">40274.5554</literal></expr>, <expr><literal type="number">40832.3142</literal></expr>, <expr><literal type="number">41390.613</literal></expr>, <expr><literal type="number">41959.5908</literal></expr>, <expr><literal type="number">42532.5466</literal></expr>, <expr><literal type="number">43102.0344</literal></expr>, <expr><literal type="number">43683.5072</literal></expr>,
          <expr><literal type="number">44266.694</literal></expr>, <expr><literal type="number">44851.2822</literal></expr>, <expr><literal type="number">45440.7862</literal></expr>, <expr><literal type="number">46038.0586</literal></expr>, <expr><literal type="number">46640.3164</literal></expr>, <expr><literal type="number">47241.064</literal></expr>, <expr><literal type="number">47846.155</literal></expr>,
          <expr><literal type="number">48454.7396</literal></expr>, <expr><literal type="number">49076.9168</literal></expr>, <expr><literal type="number">49692.542</literal></expr>, <expr><literal type="number">50317.4778</literal></expr>, <expr><literal type="number">50939.65</literal></expr>, <expr><literal type="number">51572.5596</literal></expr>, <expr><literal type="number">52210.2906</literal></expr>,
          <expr><literal type="number">52843.7396</literal></expr>, <expr><literal type="number">53481.3996</literal></expr>, <expr><literal type="number">54127.236</literal></expr>, <expr><literal type="number">54770.406</literal></expr>, <expr><literal type="number">55422.6598</literal></expr>, <expr><literal type="number">56078.7958</literal></expr>, <expr><literal type="number">56736.7174</literal></expr>,
          <expr><literal type="number">57397.6784</literal></expr>, <expr><literal type="number">58064.5784</literal></expr>, <expr><literal type="number">58730.308</literal></expr>, <expr><literal type="number">59404.9784</literal></expr>, <expr><literal type="number">60077.0864</literal></expr>, <expr><literal type="number">60751.9158</literal></expr>, <expr><literal type="number">61444.1386</literal></expr>,
          <expr><literal type="number">62115.817</literal></expr>, <expr><literal type="number">62808.7742</literal></expr>, <expr><literal type="number">63501.4774</literal></expr>, <expr><literal type="number">64187.5454</literal></expr>, <expr><literal type="number">64883.6622</literal></expr>, <expr><literal type="number">65582.7468</literal></expr>, <expr><literal type="number">66274.5318</literal></expr>,
          <expr><literal type="number">66976.9276</literal></expr>, <expr><literal type="number">67688.7764</literal></expr>, <expr><literal type="number">68402.138</literal></expr>, <expr><literal type="number">69109.6274</literal></expr>, <expr><literal type="number">69822.9706</literal></expr>, <expr><literal type="number">70543.6108</literal></expr>, <expr><literal type="number">71265.5202</literal></expr>,
          <expr><literal type="number">71983.3848</literal></expr>, <expr><literal type="number">72708.4656</literal></expr>, <expr><literal type="number">73433.384</literal></expr>, <expr><literal type="number">74158.4664</literal></expr>, <expr><literal type="number">74896.4868</literal></expr>, <expr><literal type="number">75620.9564</literal></expr>, <expr><literal type="number">76362.1434</literal></expr>,
          <expr><literal type="number">77098.3204</literal></expr>, <expr><literal type="number">77835.7662</literal></expr>, <expr><literal type="number">78582.6114</literal></expr>, <expr><literal type="number">79323.9902</literal></expr>, <expr><literal type="number">80067.8658</literal></expr>, <expr><literal type="number">80814.9246</literal></expr>, <expr><literal type="number">81567.0136</literal></expr>,
          <expr><literal type="number">82310.8536</literal></expr>, <expr><literal type="number">83061.9952</literal></expr>, <expr><literal type="number">83821.4096</literal></expr>, <expr><literal type="number">84580.8608</literal></expr>, <expr><literal type="number">85335.547</literal></expr>, <expr><literal type="number">86092.5802</literal></expr>, <expr><literal type="number">86851.6506</literal></expr>,
          <expr><literal type="number">87612.311</literal></expr>, <expr><literal type="number">88381.2016</literal></expr>, <expr><literal type="number">89146.3296</literal></expr>, <expr><literal type="number">89907.8974</literal></expr>, <expr><literal type="number">90676.846</literal></expr>, <expr><literal type="number">91451.4152</literal></expr>, <expr><literal type="number">92224.5518</literal></expr>,
          <expr><literal type="number">92995.8686</literal></expr>, <expr><literal type="number">93763.5066</literal></expr>, <expr><literal type="number">94551.2796</literal></expr>, <expr><literal type="number">95315.1944</literal></expr>, <expr><literal type="number">96096.1806</literal></expr>, <expr><literal type="number">96881.0918</literal></expr>, <expr><literal type="number">97665.679</literal></expr>,
          <expr><literal type="number">98442.68</literal></expr>, <expr><literal type="number">99229.3002</literal></expr>, <expr><literal type="number">100011.0994</literal></expr>, <expr><literal type="number">100790.6386</literal></expr>, <expr><literal type="number">101580.1564</literal></expr>, <expr><literal type="number">102377.7484</literal></expr>, <expr><literal type="number">103152.1392</literal></expr>,
          <expr><literal type="number">103944.2712</literal></expr>, <expr><literal type="number">104730.216</literal></expr>, <expr><literal type="number">105528.6336</literal></expr>, <expr><literal type="number">106324.9398</literal></expr>, <expr><literal type="number">107117.6706</literal></expr>, <expr><literal type="number">107890.3988</literal></expr>, <expr><literal type="number">108695.2266</literal></expr>,
          <expr><literal type="number">109485.238</literal></expr>, <expr><literal type="number">110294.7876</literal></expr>, <expr><literal type="number">111075.0958</literal></expr>, <expr><literal type="number">111878.0496</literal></expr>, <expr><literal type="number">112695.2864</literal></expr>, <expr><literal type="number">113464.5486</literal></expr>, <expr><literal type="number">114270.0474</literal></expr>,
          <expr><literal type="number">115068.608</literal></expr>, <expr><literal type="number">115884.3626</literal></expr>, <expr><literal type="number">116673.2588</literal></expr>, <expr><literal type="number">117483.3716</literal></expr>, <expr><literal type="number">118275.097</literal></expr>, <expr><literal type="number">119085.4092</literal></expr>, <expr><literal type="number">119879.2808</literal></expr>,
          <expr><literal type="number">120687.5868</literal></expr>, <expr><literal type="number">121499.9944</literal></expr>, <expr><literal type="number">122284.916</literal></expr>, <expr><literal type="number">123095.9254</literal></expr>, <expr><literal type="number">123912.5038</literal></expr>, <expr><literal type="number">124709.0454</literal></expr>, <expr><literal type="number">125503.7182</literal></expr>,
          <expr><literal type="number">126323.259</literal></expr>, <expr><literal type="number">127138.9412</literal></expr>, <expr><literal type="number">127943.8294</literal></expr>, <expr><literal type="number">128755.646</literal></expr>, <expr><literal type="number">129556.5354</literal></expr>, <expr><literal type="number">130375.3298</literal></expr>, <expr><literal type="number">131161.4734</literal></expr>,
          <expr><literal type="number">131971.1962</literal></expr>, <expr><literal type="number">132787.5458</literal></expr>, <expr><literal type="number">133588.1056</literal></expr>, <expr><literal type="number">134431.351</literal></expr>, <expr><literal type="number">135220.2906</literal></expr>, <expr><literal type="number">136023.398</literal></expr>, <expr><literal type="number">136846.6558</literal></expr>,
          <expr><literal type="number">137667.0004</literal></expr>, <expr><literal type="number">138463.663</literal></expr>, <expr><literal type="number">139283.7154</literal></expr>, <expr><literal type="number">140074.6146</literal></expr>, <expr><literal type="number">140901.3072</literal></expr>, <expr><literal type="number">141721.8548</literal></expr>, <expr><literal type="number">142543.2322</literal></expr>,
          <expr><literal type="number">143356.1096</literal></expr>, <expr><literal type="number">144173.7412</literal></expr>, <expr><literal type="number">144973.0948</literal></expr>, <expr><literal type="number">145794.3162</literal></expr>, <expr><literal type="number">146609.5714</literal></expr>, <expr><literal type="number">147420.003</literal></expr>, <expr><literal type="number">148237.9784</literal></expr>,
          <expr><literal type="number">149050.5696</literal></expr>, <expr><literal type="number">149854.761</literal></expr>, <expr><literal type="number">150663.1966</literal></expr>, <expr><literal type="number">151494.0754</literal></expr>, <expr><literal type="number">152313.1416</literal></expr>, <expr><literal type="number">153112.6902</literal></expr>, <expr><literal type="number">153935.7206</literal></expr>,
          <expr><literal type="number">154746.9262</literal></expr>, <expr><literal type="number">155559.547</literal></expr>, <expr><literal type="number">156401.9746</literal></expr>, <expr><literal type="number">157228.7036</literal></expr>, <expr><literal type="number">158008.7254</literal></expr>, <expr><literal type="number">158820.75</literal></expr>, <expr><literal type="number">159646.9184</literal></expr>,
          <expr><literal type="number">160470.4458</literal></expr>, <expr><literal type="number">161279.5348</literal></expr>, <expr><literal type="number">162093.3114</literal></expr>, <expr><literal type="number">162918.542</literal></expr>, <expr><literal type="number">163729.2842</literal></expr>,}</block></expr>,
      <comment type="line">// precision 16</comment>
      <expr><block>{<expr><literal type="number">47271</literal></expr>, <expr><literal type="number">48062.3584</literal></expr>, <expr><literal type="number">48862.7074</literal></expr>, <expr><literal type="number">49673.152</literal></expr>, <expr><literal type="number">50492.8416</literal></expr>, <expr><literal type="number">51322.9514</literal></expr>, <expr><literal type="number">52161.03</literal></expr>, <expr><literal type="number">53009.407</literal></expr>,
          <expr><literal type="number">53867.6348</literal></expr>, <expr><literal type="number">54734.206</literal></expr>, <expr><literal type="number">55610.5144</literal></expr>, <expr><literal type="number">56496.2096</literal></expr>, <expr><literal type="number">57390.795</literal></expr>, <expr><literal type="number">58297.268</literal></expr>, <expr><literal type="number">59210.6448</literal></expr>,
          <expr><literal type="number">60134.665</literal></expr>, <expr><literal type="number">61068.0248</literal></expr>, <expr><literal type="number">62010.4472</literal></expr>, <expr><literal type="number">62962.5204</literal></expr>, <expr><literal type="number">63923.5742</literal></expr>, <expr><literal type="number">64895.0194</literal></expr>, <expr><literal type="number">65876.4182</literal></expr>,
          <expr><literal type="number">66862.6136</literal></expr>, <expr><literal type="number">67862.6968</literal></expr>, <expr><literal type="number">68868.8908</literal></expr>, <expr><literal type="number">69882.8544</literal></expr>, <expr><literal type="number">70911.271</literal></expr>, <expr><literal type="number">71944.0924</literal></expr>, <expr><literal type="number">72990.0326</literal></expr>,
          <expr><literal type="number">74040.692</literal></expr>, <expr><literal type="number">75100.6336</literal></expr>, <expr><literal type="number">76174.7826</literal></expr>, <expr><literal type="number">77252.5998</literal></expr>, <expr><literal type="number">78340.2974</literal></expr>, <expr><literal type="number">79438.2572</literal></expr>, <expr><literal type="number">80545.4976</literal></expr>,
          <expr><literal type="number">81657.2796</literal></expr>, <expr><literal type="number">82784.6336</literal></expr>, <expr><literal type="number">83915.515</literal></expr>, <expr><literal type="number">85059.7362</literal></expr>, <expr><literal type="number">86205.9368</literal></expr>, <expr><literal type="number">87364.4424</literal></expr>, <expr><literal type="number">88530.3358</literal></expr>,
          <expr><literal type="number">89707.3744</literal></expr>, <expr><literal type="number">90885.9638</literal></expr>, <expr><literal type="number">92080.197</literal></expr>, <expr><literal type="number">93275.5738</literal></expr>, <expr><literal type="number">94479.391</literal></expr>, <expr><literal type="number">95695.918</literal></expr>, <expr><literal type="number">96919.2236</literal></expr>,
          <expr><literal type="number">98148.4602</literal></expr>, <expr><literal type="number">99382.3474</literal></expr>, <expr><literal type="number">100625.6974</literal></expr>, <expr><literal type="number">101878.0284</literal></expr>, <expr><literal type="number">103141.6278</literal></expr>, <expr><literal type="number">104409.4588</literal></expr>, <expr><literal type="number">105686.2882</literal></expr>,
          <expr><literal type="number">106967.5402</literal></expr>, <expr><literal type="number">108261.6032</literal></expr>, <expr><literal type="number">109548.1578</literal></expr>, <expr><literal type="number">110852.0728</literal></expr>, <expr><literal type="number">112162.231</literal></expr>, <expr><literal type="number">113479.0072</literal></expr>, <expr><literal type="number">114806.2626</literal></expr>,
          <expr><literal type="number">116137.9072</literal></expr>, <expr><literal type="number">117469.5048</literal></expr>, <expr><literal type="number">118813.5186</literal></expr>, <expr><literal type="number">120165.4876</literal></expr>, <expr><literal type="number">121516.2556</literal></expr>, <expr><literal type="number">122875.766</literal></expr>, <expr><literal type="number">124250.5444</literal></expr>,
          <expr><literal type="number">125621.2222</literal></expr>, <expr><literal type="number">127003.2352</literal></expr>, <expr><literal type="number">128387.848</literal></expr>, <expr><literal type="number">129775.2644</literal></expr>, <expr><literal type="number">131181.7776</literal></expr>, <expr><literal type="number">132577.3086</literal></expr>, <expr><literal type="number">133979.9458</literal></expr>,
          <expr><literal type="number">135394.1132</literal></expr>, <expr><literal type="number">136800.9078</literal></expr>, <expr><literal type="number">138233.217</literal></expr>, <expr><literal type="number">139668.5308</literal></expr>, <expr><literal type="number">141085.212</literal></expr>, <expr><literal type="number">142535.2122</literal></expr>, <expr><literal type="number">143969.0684</literal></expr>,
          <expr><literal type="number">145420.2872</literal></expr>, <expr><literal type="number">146878.1542</literal></expr>, <expr><literal type="number">148332.7572</literal></expr>, <expr><literal type="number">149800.3202</literal></expr>, <expr><literal type="number">151269.66</literal></expr>, <expr><literal type="number">152743.6104</literal></expr>, <expr><literal type="number">154213.0948</literal></expr>,
          <expr><literal type="number">155690.288</literal></expr>, <expr><literal type="number">157169.4246</literal></expr>, <expr><literal type="number">158672.1756</literal></expr>, <expr><literal type="number">160160.059</literal></expr>, <expr><literal type="number">161650.6854</literal></expr>, <expr><literal type="number">163145.7772</literal></expr>, <expr><literal type="number">164645.6726</literal></expr>,
          <expr><literal type="number">166159.1952</literal></expr>, <expr><literal type="number">167682.1578</literal></expr>, <expr><literal type="number">169177.3328</literal></expr>, <expr><literal type="number">170700.0118</literal></expr>, <expr><literal type="number">172228.8964</literal></expr>, <expr><literal type="number">173732.6664</literal></expr>, <expr><literal type="number">175265.5556</literal></expr>,
          <expr><literal type="number">176787.799</literal></expr>, <expr><literal type="number">178317.111</literal></expr>, <expr><literal type="number">179856.6914</literal></expr>, <expr><literal type="number">181400.865</literal></expr>, <expr><literal type="number">182943.4612</literal></expr>, <expr><literal type="number">184486.742</literal></expr>, <expr><literal type="number">186033.4698</literal></expr>,
          <expr><literal type="number">187583.7886</literal></expr>, <expr><literal type="number">189148.1868</literal></expr>, <expr><literal type="number">190688.4526</literal></expr>, <expr><literal type="number">192250.1926</literal></expr>, <expr><literal type="number">193810.9042</literal></expr>, <expr><literal type="number">195354.2972</literal></expr>, <expr><literal type="number">196938.7682</literal></expr>,
          <expr><literal type="number">198493.5898</literal></expr>, <expr><literal type="number">200079.2824</literal></expr>, <expr><literal type="number">201618.912</literal></expr>, <expr><literal type="number">203205.5492</literal></expr>, <expr><literal type="number">204765.5798</literal></expr>, <expr><literal type="number">206356.1124</literal></expr>, <expr><literal type="number">207929.3064</literal></expr>,
          <expr><literal type="number">209498.7196</literal></expr>, <expr><literal type="number">211086.229</literal></expr>, <expr><literal type="number">212675.1324</literal></expr>, <expr><literal type="number">214256.7892</literal></expr>, <expr><literal type="number">215826.2392</literal></expr>, <expr><literal type="number">217412.8474</literal></expr>, <expr><literal type="number">218995.6724</literal></expr>,
          <expr><literal type="number">220618.6038</literal></expr>, <expr><literal type="number">222207.1166</literal></expr>, <expr><literal type="number">223781.0364</literal></expr>, <expr><literal type="number">225387.4332</literal></expr>, <expr><literal type="number">227005.7928</literal></expr>, <expr><literal type="number">228590.4336</literal></expr>, <expr><literal type="number">230217.8738</literal></expr>,
          <expr><literal type="number">231805.1054</literal></expr>, <expr><literal type="number">233408.9</literal></expr>, <expr><literal type="number">234995.3432</literal></expr>, <expr><literal type="number">236601.4956</literal></expr>, <expr><literal type="number">238190.7904</literal></expr>, <expr><literal type="number">239817.2548</literal></expr>, <expr><literal type="number">241411.2832</literal></expr>,
          <expr><literal type="number">243002.4066</literal></expr>, <expr><literal type="number">244640.1884</literal></expr>, <expr><literal type="number">246255.3128</literal></expr>, <expr><literal type="number">247849.3508</literal></expr>, <expr><literal type="number">249479.9734</literal></expr>, <expr><literal type="number">251106.8822</literal></expr>, <expr><literal type="number">252705.027</literal></expr>,
          <expr><literal type="number">254332.9242</literal></expr>, <expr><literal type="number">255935.129</literal></expr>, <expr><literal type="number">257526.9014</literal></expr>, <expr><literal type="number">259154.772</literal></expr>, <expr><literal type="number">260777.625</literal></expr>, <expr><literal type="number">262390.253</literal></expr>, <expr><literal type="number">264004.4906</literal></expr>,
          <expr><literal type="number">265643.59</literal></expr>, <expr><literal type="number">267255.4076</literal></expr>, <expr><literal type="number">268873.426</literal></expr>, <expr><literal type="number">270470.7252</literal></expr>, <expr><literal type="number">272106.4804</literal></expr>, <expr><literal type="number">273722.4456</literal></expr>, <expr><literal type="number">275337.794</literal></expr>,
          <expr><literal type="number">276945.7038</literal></expr>, <expr><literal type="number">278592.9154</literal></expr>, <expr><literal type="number">280204.3726</literal></expr>, <expr><literal type="number">281841.1606</literal></expr>, <expr><literal type="number">283489.171</literal></expr>, <expr><literal type="number">285130.1716</literal></expr>, <expr><literal type="number">286735.3362</literal></expr>,
          <expr><literal type="number">288364.7164</literal></expr>, <expr><literal type="number">289961.1814</literal></expr>, <expr><literal type="number">291595.5524</literal></expr>, <expr><literal type="number">293285.683</literal></expr>, <expr><literal type="number">294899.6668</literal></expr>, <expr><literal type="number">296499.3434</literal></expr>, <expr><literal type="number">298128.0462</literal></expr>,
          <expr><literal type="number">299761.8946</literal></expr>, <expr><literal type="number">301394.2424</literal></expr>, <expr><literal type="number">302997.6748</literal></expr>, <expr><literal type="number">304615.1478</literal></expr>, <expr><literal type="number">306269.7724</literal></expr>, <expr><literal type="number">307886.114</literal></expr>, <expr><literal type="number">309543.1028</literal></expr>,
          <expr><literal type="number">311153.2862</literal></expr>, <expr><literal type="number">312782.8546</literal></expr>, <expr><literal type="number">314421.2008</literal></expr>, <expr><literal type="number">316033.2438</literal></expr>, <expr><literal type="number">317692.9636</literal></expr>, <expr><literal type="number">319305.2648</literal></expr>, <expr><literal type="number">320948.7406</literal></expr>,
          <expr><literal type="number">322566.3364</literal></expr>, <expr><literal type="number">324228.4224</literal></expr>, <expr><literal type="number">325847.1542</literal></expr>,}</block></expr>,
      <comment type="line">// precision 17</comment>
      <expr><block>{<expr><literal type="number">94542</literal></expr>, <expr><literal type="number">96125.811</literal></expr>, <expr><literal type="number">97728.019</literal></expr>, <expr><literal type="number">99348.558</literal></expr>, <expr><literal type="number">100987.9705</literal></expr>, <expr><literal type="number">102646.7565</literal></expr>, <expr><literal type="number">104324.5125</literal></expr>, <expr><literal type="number">106021.7435</literal></expr>,
          <expr><literal type="number">107736.7865</literal></expr>, <expr><literal type="number">109469.272</literal></expr>, <expr><literal type="number">111223.9465</literal></expr>, <expr><literal type="number">112995.219</literal></expr>, <expr><literal type="number">114787.432</literal></expr>, <expr><literal type="number">116593.152</literal></expr>, <expr><literal type="number">118422.71</literal></expr>,
          <expr><literal type="number">120267.2345</literal></expr>, <expr><literal type="number">122134.6765</literal></expr>, <expr><literal type="number">124020.937</literal></expr>, <expr><literal type="number">125927.2705</literal></expr>, <expr><literal type="number">127851.255</literal></expr>, <expr><literal type="number">129788.9485</literal></expr>, <expr><literal type="number">131751.016</literal></expr>,
          <expr><literal type="number">133726.8225</literal></expr>, <expr><literal type="number">135722.592</literal></expr>, <expr><literal type="number">137736.789</literal></expr>, <expr><literal type="number">139770.568</literal></expr>, <expr><literal type="number">141821.518</literal></expr>, <expr><literal type="number">143891.343</literal></expr>, <expr><literal type="number">145982.1415</literal></expr>,
          <expr><literal type="number">148095.387</literal></expr>, <expr><literal type="number">150207.526</literal></expr>, <expr><literal type="number">152355.649</literal></expr>, <expr><literal type="number">154515.6415</literal></expr>, <expr><literal type="number">156696.05</literal></expr>, <expr><literal type="number">158887.7575</literal></expr>, <expr><literal type="number">161098.159</literal></expr>,
          <expr><literal type="number">163329.852</literal></expr>, <expr><literal type="number">165569.053</literal></expr>, <expr><literal type="number">167837.4005</literal></expr>, <expr><literal type="number">170121.6165</literal></expr>, <expr><literal type="number">172420.4595</literal></expr>, <expr><literal type="number">174732.6265</literal></expr>, <expr><literal type="number">177062.77</literal></expr>,
          <expr><literal type="number">179412.502</literal></expr>, <expr><literal type="number">181774.035</literal></expr>, <expr><literal type="number">184151.939</literal></expr>, <expr><literal type="number">186551.6895</literal></expr>, <expr><literal type="number">188965.691</literal></expr>, <expr><literal type="number">191402.8095</literal></expr>, <expr><literal type="number">193857.949</literal></expr>,
          <expr><literal type="number">196305.0775</literal></expr>, <expr><literal type="number">198774.6715</literal></expr>, <expr><literal type="number">201271.2585</literal></expr>, <expr><literal type="number">203764.78</literal></expr>, <expr><literal type="number">206299.3695</literal></expr>, <expr><literal type="number">208818.1365</literal></expr>, <expr><literal type="number">211373.115</literal></expr>,
          <expr><literal type="number">213946.7465</literal></expr>, <expr><literal type="number">216532.076</literal></expr>, <expr><literal type="number">219105.541</literal></expr>, <expr><literal type="number">221714.5375</literal></expr>, <expr><literal type="number">224337.5135</literal></expr>, <expr><literal type="number">226977.5125</literal></expr>, <expr><literal type="number">229613.0655</literal></expr>,
          <expr><literal type="number">232270.2685</literal></expr>, <expr><literal type="number">234952.2065</literal></expr>, <expr><literal type="number">237645.3555</literal></expr>, <expr><literal type="number">240331.1925</literal></expr>, <expr><literal type="number">243034.517</literal></expr>, <expr><literal type="number">245756.0725</literal></expr>, <expr><literal type="number">248517.6865</literal></expr>,
          <expr><literal type="number">251232.737</literal></expr>, <expr><literal type="number">254011.3955</literal></expr>, <expr><literal type="number">256785.995</literal></expr>, <expr><literal type="number">259556.44</literal></expr>, <expr><literal type="number">262368.335</literal></expr>, <expr><literal type="number">265156.911</literal></expr>, <expr><literal type="number">267965.266</literal></expr>,
          <expr><literal type="number">270785.583</literal></expr>, <expr><literal type="number">273616.0495</literal></expr>, <expr><literal type="number">276487.4835</literal></expr>, <expr><literal type="number">279346.639</literal></expr>, <expr><literal type="number">282202.509</literal></expr>, <expr><literal type="number">285074.3885</literal></expr>, <expr><literal type="number">287942.2855</literal></expr>,
          <expr><literal type="number">290856.018</literal></expr>, <expr><literal type="number">293774.0345</literal></expr>, <expr><literal type="number">296678.5145</literal></expr>, <expr><literal type="number">299603.6355</literal></expr>, <expr><literal type="number">302552.6575</literal></expr>, <expr><literal type="number">305492.9785</literal></expr>, <expr><literal type="number">308466.8605</literal></expr>,
          <expr><literal type="number">311392.581</literal></expr>, <expr><literal type="number">314347.538</literal></expr>, <expr><literal type="number">317319.4295</literal></expr>, <expr><literal type="number">320285.9785</literal></expr>, <expr><literal type="number">323301.7325</literal></expr>, <expr><literal type="number">326298.3235</literal></expr>, <expr><literal type="number">329301.3105</literal></expr>,
          <expr><literal type="number">332301.987</literal></expr>, <expr><literal type="number">335309.791</literal></expr>, <expr><literal type="number">338370.762</literal></expr>, <expr><literal type="number">341382.923</literal></expr>, <expr><literal type="number">344431.1265</literal></expr>, <expr><literal type="number">347464.1545</literal></expr>, <expr><literal type="number">350507.28</literal></expr>,
          <expr><literal type="number">353619.2345</literal></expr>, <expr><literal type="number">356631.2005</literal></expr>, <expr><literal type="number">359685.203</literal></expr>, <expr><literal type="number">362776.7845</literal></expr>, <expr><literal type="number">365886.488</literal></expr>, <expr><literal type="number">368958.2255</literal></expr>, <expr><literal type="number">372060.6825</literal></expr>,
          <expr><literal type="number">375165.4335</literal></expr>, <expr><literal type="number">378237.935</literal></expr>, <expr><literal type="number">381328.311</literal></expr>, <expr><literal type="number">384430.5225</literal></expr>, <expr><literal type="number">387576.425</literal></expr>, <expr><literal type="number">390683.242</literal></expr>, <expr><literal type="number">393839.648</literal></expr>,
          <expr><literal type="number">396977.8425</literal></expr>, <expr><literal type="number">400101.9805</literal></expr>, <expr><literal type="number">403271.296</literal></expr>, <expr><literal type="number">406409.8425</literal></expr>, <expr><literal type="number">409529.5485</literal></expr>, <expr><literal type="number">412678.7</literal></expr>, <expr><literal type="number">415847.423</literal></expr>,
          <expr><literal type="number">419020.8035</literal></expr>, <expr><literal type="number">422157.081</literal></expr>, <expr><literal type="number">425337.749</literal></expr>, <expr><literal type="number">428479.6165</literal></expr>, <expr><literal type="number">431700.902</literal></expr>, <expr><literal type="number">434893.1915</literal></expr>, <expr><literal type="number">438049.582</literal></expr>,
          <expr><literal type="number">441210.5415</literal></expr>, <expr><literal type="number">444379.2545</literal></expr>, <expr><literal type="number">447577.356</literal></expr>, <expr><literal type="number">450741.931</literal></expr>, <expr><literal type="number">453959.548</literal></expr>, <expr><literal type="number">457137.0935</literal></expr>, <expr><literal type="number">460329.846</literal></expr>,
          <expr><literal type="number">463537.4815</literal></expr>, <expr><literal type="number">466732.3345</literal></expr>, <expr><literal type="number">469960.5615</literal></expr>, <expr><literal type="number">473164.681</literal></expr>, <expr><literal type="number">476347.6345</literal></expr>, <expr><literal type="number">479496.173</literal></expr>, <expr><literal type="number">482813.1645</literal></expr>,
          <expr><literal type="number">486025.6995</literal></expr>, <expr><literal type="number">489249.4885</literal></expr>, <expr><literal type="number">492460.1945</literal></expr>, <expr><literal type="number">495675.8805</literal></expr>, <expr><literal type="number">498908.0075</literal></expr>, <expr><literal type="number">502131.802</literal></expr>, <expr><literal type="number">505374.3855</literal></expr>,
          <expr><literal type="number">508550.9915</literal></expr>, <expr><literal type="number">511806.7305</literal></expr>, <expr><literal type="number">515026.776</literal></expr>, <expr><literal type="number">518217.0005</literal></expr>, <expr><literal type="number">521523.9855</literal></expr>, <expr><literal type="number">524705.9855</literal></expr>, <expr><literal type="number">527950.997</literal></expr>,
          <expr><literal type="number">531210.0265</literal></expr>, <expr><literal type="number">534472.497</literal></expr>, <expr><literal type="number">537750.7315</literal></expr>, <expr><literal type="number">540926.922</literal></expr>, <expr><literal type="number">544207.094</literal></expr>, <expr><literal type="number">547429.4345</literal></expr>, <expr><literal type="number">550666.3745</literal></expr>,
          <expr><literal type="number">553975.3475</literal></expr>, <expr><literal type="number">557150.7185</literal></expr>, <expr><literal type="number">560399.6165</literal></expr>, <expr><literal type="number">563662.697</literal></expr>, <expr><literal type="number">566916.7395</literal></expr>, <expr><literal type="number">570146.1215</literal></expr>, <expr><literal type="number">573447.425</literal></expr>,
          <expr><literal type="number">576689.6245</literal></expr>, <expr><literal type="number">579874.5745</literal></expr>, <expr><literal type="number">583202.337</literal></expr>, <expr><literal type="number">586503.0255</literal></expr>, <expr><literal type="number">589715.635</literal></expr>, <expr><literal type="number">592910.161</literal></expr>, <expr><literal type="number">596214.3885</literal></expr>,
          <expr><literal type="number">599488.035</literal></expr>, <expr><literal type="number">602740.92</literal></expr>, <expr><literal type="number">605983.0685</literal></expr>, <expr><literal type="number">609248.67</literal></expr>, <expr><literal type="number">612491.3605</literal></expr>, <expr><literal type="number">615787.912</literal></expr>, <expr><literal type="number">619107.5245</literal></expr>,
          <expr><literal type="number">622307.9555</literal></expr>, <expr><literal type="number">625577.333</literal></expr>, <expr><literal type="number">628840.4385</literal></expr>, <expr><literal type="number">632085.2155</literal></expr>, <expr><literal type="number">635317.6135</literal></expr>, <expr><literal type="number">638691.7195</literal></expr>, <expr><literal type="number">641887.467</literal></expr>,
          <expr><literal type="number">645139.9405</literal></expr>, <expr><literal type="number">648441.546</literal></expr>, <expr><literal type="number">651666.252</literal></expr>, <expr><literal type="number">654941.845</literal></expr>,}</block></expr>,
      <comment type="line">// precision 18</comment>
      <expr><block>{<expr><literal type="number">189084</literal></expr>, <expr><literal type="number">192250.913</literal></expr>, <expr><literal type="number">195456.774</literal></expr>, <expr><literal type="number">198696.946</literal></expr>, <expr><literal type="number">201977.762</literal></expr>, <expr><literal type="number">205294.444</literal></expr>, <expr><literal type="number">208651.754</literal></expr>, <expr><literal type="number">212042.099</literal></expr>,
          <expr><literal type="number">215472.269</literal></expr>, <expr><literal type="number">218941.91</literal></expr>, <expr><literal type="number">222443.912</literal></expr>, <expr><literal type="number">225996.845</literal></expr>, <expr><literal type="number">229568.199</literal></expr>, <expr><literal type="number">233193.568</literal></expr>, <expr><literal type="number">236844.457</literal></expr>,
          <expr><literal type="number">240543.233</literal></expr>, <expr><literal type="number">244279.475</literal></expr>, <expr><literal type="number">248044.27</literal></expr>, <expr><literal type="number">251854.588</literal></expr>, <expr><literal type="number">255693.2</literal></expr>, <expr><literal type="number">259583.619</literal></expr>, <expr><literal type="number">263494.621</literal></expr>,
          <expr><literal type="number">267445.385</literal></expr>, <expr><literal type="number">271454.061</literal></expr>, <expr><literal type="number">275468.769</literal></expr>, <expr><literal type="number">279549.456</literal></expr>, <expr><literal type="number">283646.446</literal></expr>, <expr><literal type="number">287788.198</literal></expr>, <expr><literal type="number">291966.099</literal></expr>,
          <expr><literal type="number">296181.164</literal></expr>, <expr><literal type="number">300431.469</literal></expr>, <expr><literal type="number">304718.618</literal></expr>, <expr><literal type="number">309024.004</literal></expr>, <expr><literal type="number">313393.508</literal></expr>, <expr><literal type="number">317760.803</literal></expr>, <expr><literal type="number">322209.731</literal></expr>,
          <expr><literal type="number">326675.061</literal></expr>, <expr><literal type="number">331160.627</literal></expr>, <expr><literal type="number">335654.47</literal></expr>, <expr><literal type="number">340241.442</literal></expr>, <expr><literal type="number">344841.833</literal></expr>, <expr><literal type="number">349467.132</literal></expr>, <expr><literal type="number">354130.629</literal></expr>,
          <expr><literal type="number">358819.432</literal></expr>, <expr><literal type="number">363574.626</literal></expr>, <expr><literal type="number">368296.587</literal></expr>, <expr><literal type="number">373118.482</literal></expr>, <expr><literal type="number">377914.93</literal></expr>, <expr><literal type="number">382782.301</literal></expr>, <expr><literal type="number">387680.669</literal></expr>,
          <expr><literal type="number">392601.981</literal></expr>, <expr><literal type="number">397544.323</literal></expr>, <expr><literal type="number">402529.115</literal></expr>, <expr><literal type="number">407546.018</literal></expr>, <expr><literal type="number">412593.658</literal></expr>, <expr><literal type="number">417638.657</literal></expr>, <expr><literal type="number">422762.865</literal></expr>,
          <expr><literal type="number">427886.169</literal></expr>, <expr><literal type="number">433017.167</literal></expr>, <expr><literal type="number">438213.273</literal></expr>, <expr><literal type="number">443441.254</literal></expr>, <expr><literal type="number">448692.421</literal></expr>, <expr><literal type="number">453937.533</literal></expr>, <expr><literal type="number">459239.049</literal></expr>,
          <expr><literal type="number">464529.569</literal></expr>, <expr><literal type="number">469910.083</literal></expr>, <expr><literal type="number">475274.03</literal></expr>, <expr><literal type="number">480684.473</literal></expr>, <expr><literal type="number">486070.26</literal></expr>, <expr><literal type="number">491515.237</literal></expr>, <expr><literal type="number">496995.651</literal></expr>,
          <expr><literal type="number">502476.617</literal></expr>, <expr><literal type="number">507973.609</literal></expr>, <expr><literal type="number">513497.19</literal></expr>, <expr><literal type="number">519083.233</literal></expr>, <expr><literal type="number">524726.509</literal></expr>, <expr><literal type="number">530305.505</literal></expr>, <expr><literal type="number">535945.728</literal></expr>,
          <expr><literal type="number">541584.404</literal></expr>, <expr><literal type="number">547274.055</literal></expr>, <expr><literal type="number">552967.236</literal></expr>, <expr><literal type="number">558667.862</literal></expr>, <expr><literal type="number">564360.216</literal></expr>, <expr><literal type="number">570128.148</literal></expr>, <expr><literal type="number">575965.08</literal></expr>,
          <expr><literal type="number">581701.952</literal></expr>, <expr><literal type="number">587532.523</literal></expr>, <expr><literal type="number">593361.144</literal></expr>, <expr><literal type="number">599246.128</literal></expr>, <expr><literal type="number">605033.418</literal></expr>, <expr><literal type="number">610958.779</literal></expr>, <expr><literal type="number">616837.117</literal></expr>,
          <expr><literal type="number">622772.818</literal></expr>, <expr><literal type="number">628672.04</literal></expr>, <expr><literal type="number">634675.369</literal></expr>, <expr><literal type="number">640574.831</literal></expr>, <expr><literal type="number">646585.739</literal></expr>, <expr><literal type="number">652574.547</literal></expr>, <expr><literal type="number">658611.217</literal></expr>,
          <expr><literal type="number">664642.684</literal></expr>, <expr><literal type="number">670713.914</literal></expr>, <expr><literal type="number">676737.681</literal></expr>, <expr><literal type="number">682797.313</literal></expr>, <expr><literal type="number">688837.897</literal></expr>, <expr><literal type="number">694917.874</literal></expr>, <expr><literal type="number">701009.882</literal></expr>,
          <expr><literal type="number">707173.648</literal></expr>, <expr><literal type="number">713257.254</literal></expr>, <expr><literal type="number">719415.392</literal></expr>, <expr><literal type="number">725636.761</literal></expr>, <expr><literal type="number">731710.697</literal></expr>, <expr><literal type="number">737906.209</literal></expr>, <expr><literal type="number">744103.074</literal></expr>,
          <expr><literal type="number">750313.39</literal></expr>, <expr><literal type="number">756504.185</literal></expr>, <expr><literal type="number">762712.579</literal></expr>, <expr><literal type="number">768876.985</literal></expr>, <expr><literal type="number">775167.859</literal></expr>, <expr><literal type="number">781359</literal></expr>, <expr><literal type="number">787615.959</literal></expr>, <expr><literal type="number">793863.597</literal></expr>,
          <expr><literal type="number">800245.477</literal></expr>, <expr><literal type="number">806464.582</literal></expr>, <expr><literal type="number">812785.294</literal></expr>, <expr><literal type="number">819005.925</literal></expr>, <expr><literal type="number">825403.057</literal></expr>, <expr><literal type="number">831676.197</literal></expr>, <expr><literal type="number">837936.284</literal></expr>,
          <expr><literal type="number">844266.968</literal></expr>, <expr><literal type="number">850642.711</literal></expr>, <expr><literal type="number">856959.756</literal></expr>, <expr><literal type="number">863322.774</literal></expr>, <expr><literal type="number">869699.931</literal></expr>, <expr><literal type="number">876102.478</literal></expr>, <expr><literal type="number">882355.787</literal></expr>,
          <expr><literal type="number">888694.463</literal></expr>, <expr><literal type="number">895159.952</literal></expr>, <expr><literal type="number">901536.143</literal></expr>, <expr><literal type="number">907872.631</literal></expr>, <expr><literal type="number">914293.672</literal></expr>, <expr><literal type="number">920615.14</literal></expr>, <expr><literal type="number">927130.974</literal></expr>,
          <expr><literal type="number">933409.404</literal></expr>, <expr><literal type="number">939922.178</literal></expr>, <expr><literal type="number">946331.47</literal></expr>, <expr><literal type="number">952745.93</literal></expr>, <expr><literal type="number">959209.264</literal></expr>, <expr><literal type="number">965590.224</literal></expr>, <expr><literal type="number">972077.284</literal></expr>,
          <expr><literal type="number">978501.961</literal></expr>, <expr><literal type="number">984953.19</literal></expr>, <expr><literal type="number">991413.271</literal></expr>, <expr><literal type="number">997817.479</literal></expr>, <expr><literal type="number">1004222.658</literal></expr>, <expr><literal type="number">1010725.676</literal></expr>, <expr><literal type="number">1017177.138</literal></expr>,
          <expr><literal type="number">1023612.529</literal></expr>, <expr><literal type="number">1030098.236</literal></expr>, <expr><literal type="number">1036493.719</literal></expr>, <expr><literal type="number">1043112.207</literal></expr>, <expr><literal type="number">1049537.036</literal></expr>, <expr><literal type="number">1056008.096</literal></expr>, <expr><literal type="number">1062476.184</literal></expr>,
          <expr><literal type="number">1068942.337</literal></expr>, <expr><literal type="number">1075524.95</literal></expr>, <expr><literal type="number">1081932.864</literal></expr>, <expr><literal type="number">1088426.025</literal></expr>, <expr><literal type="number">1094776.005</literal></expr>, <expr><literal type="number">1101327.448</literal></expr>, <expr><literal type="number">1107901.673</literal></expr>,
          <expr><literal type="number">1114423.639</literal></expr>, <expr><literal type="number">1120884.602</literal></expr>, <expr><literal type="number">1127324.923</literal></expr>, <expr><literal type="number">1133794.24</literal></expr>, <expr><literal type="number">1140328.886</literal></expr>, <expr><literal type="number">1146849.376</literal></expr>, <expr><literal type="number">1153346.682</literal></expr>,
          <expr><literal type="number">1159836.502</literal></expr>, <expr><literal type="number">1166478.703</literal></expr>, <expr><literal type="number">1172953.304</literal></expr>, <expr><literal type="number">1179391.502</literal></expr>, <expr><literal type="number">1185950.982</literal></expr>, <expr><literal type="number">1192544.052</literal></expr>, <expr><literal type="number">1198913.41</literal></expr>,
          <expr><literal type="number">1205430.994</literal></expr>, <expr><literal type="number">1212015.525</literal></expr>, <expr><literal type="number">1218674.042</literal></expr>, <expr><literal type="number">1225121.683</literal></expr>, <expr><literal type="number">1231551.101</literal></expr>, <expr><literal type="number">1238126.379</literal></expr>, <expr><literal type="number">1244673.795</literal></expr>,
          <expr><literal type="number">1251260.649</literal></expr>, <expr><literal type="number">1257697.86</literal></expr>, <expr><literal type="number">1264320.983</literal></expr>, <expr><literal type="number">1270736.319</literal></expr>, <expr><literal type="number">1277274.694</literal></expr>, <expr><literal type="number">1283804.95</literal></expr>, <expr><literal type="number">1290211.514</literal></expr>,
          <expr><literal type="number">1296858.568</literal></expr>, <expr><literal type="number">1303455.691</literal></expr>,}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index><index>[]</index></name></type> <name>biasData</name> <init>= <expr><block>{
      <comment type="line">// precision 4</comment>
      <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">9.717</literal></expr>, <expr><literal type="number">9.207</literal></expr>, <expr><literal type="number">8.7896</literal></expr>, <expr><literal type="number">8.2882</literal></expr>, <expr><literal type="number">7.8204</literal></expr>, <expr><literal type="number">7.3772</literal></expr>, <expr><literal type="number">6.9342</literal></expr>, <expr><literal type="number">6.5202</literal></expr>, <expr><literal type="number">6.161</literal></expr>, <expr><literal type="number">5.7722</literal></expr>, <expr><literal type="number">5.4636</literal></expr>,
          <expr><literal type="number">5.0396</literal></expr>, <expr><literal type="number">4.6766</literal></expr>, <expr><literal type="number">4.3566</literal></expr>, <expr><literal type="number">4.0454</literal></expr>, <expr><literal type="number">3.7936</literal></expr>, <expr><literal type="number">3.4856</literal></expr>, <expr><literal type="number">3.2666</literal></expr>, <expr><literal type="number">2.9946</literal></expr>, <expr><literal type="number">2.766</literal></expr>, <expr><literal type="number">2.4692</literal></expr>, <expr><literal type="number">2.3638</literal></expr>,
          <expr><literal type="number">2.0764</literal></expr>, <expr><literal type="number">1.7864</literal></expr>, <expr><literal type="number">1.7602</literal></expr>, <expr><literal type="number">1.4814</literal></expr>, <expr><literal type="number">1.433</literal></expr>, <expr><literal type="number">1.2926</literal></expr>, <expr><literal type="number">1.0664</literal></expr>, <expr><literal type="number">0.999600000000001</literal></expr>, <expr><literal type="number">0.7956</literal></expr>, <expr><literal type="number">0.5366</literal></expr>,
          <expr><literal type="number">0.589399999999998</literal></expr>, <expr><literal type="number">0.573799999999999</literal></expr>, <expr><literal type="number">0.269799999999996</literal></expr>, <expr><literal type="number">0.368200000000002</literal></expr>,
          <expr><literal type="number">0.0544000000000011</literal></expr>, <expr><literal type="number">0.234200000000001</literal></expr>, <expr><literal type="number">0.0108000000000033</literal></expr>, <expr><operator>-</operator><literal type="number">0.203400000000002</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.0701999999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.129600000000003</literal></expr>, <expr><operator>-</operator><literal type="number">0.364199999999997</literal></expr>, <expr><operator>-</operator><literal type="number">0.480600000000003</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.226999999999997</literal></expr>, <expr><operator>-</operator><literal type="number">0.322800000000001</literal></expr>, <expr><operator>-</operator><literal type="number">0.382599999999996</literal></expr>, <expr><operator>-</operator><literal type="number">0.511200000000002</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.669600000000003</literal></expr>, <expr><operator>-</operator><literal type="number">0.749400000000001</literal></expr>, <expr><operator>-</operator><literal type="number">0.500399999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.617600000000003</literal></expr>, <expr><operator>-</operator><literal type="number">0.6922</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.601599999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.416200000000003</literal></expr>, <expr><operator>-</operator><literal type="number">0.338200000000001</literal></expr>, <expr><operator>-</operator><literal type="number">0.782600000000002</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.648600000000002</literal></expr>, <expr><operator>-</operator><literal type="number">0.919800000000002</literal></expr>, <expr><operator>-</operator><literal type="number">0.851799999999997</literal></expr>, <expr><operator>-</operator><literal type="number">0.962400000000002</literal></expr>, <expr><operator>-</operator><literal type="number">0.6402</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.1922</literal></expr>, <expr><operator>-</operator><literal type="number">1.0256</literal></expr>, <expr><operator>-</operator><literal type="number">1.086</literal></expr>, <expr><operator>-</operator><literal type="number">1.21899999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.819400000000002</literal></expr>, <expr><operator>-</operator><literal type="number">0.940600000000003</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.1554</literal></expr>, <expr><operator>-</operator><literal type="number">1.2072</literal></expr>, <expr><operator>-</operator><literal type="number">1.1752</literal></expr>, <expr><operator>-</operator><literal type="number">1.16759999999999</literal></expr>, <expr><operator>-</operator><literal type="number">1.14019999999999</literal></expr>, <expr><operator>-</operator><literal type="number">1.3754</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.29859999999999</literal></expr>, <expr><operator>-</operator><literal type="number">1.607</literal></expr>, <expr><operator>-</operator><literal type="number">1.3292</literal></expr>, <expr><operator>-</operator><literal type="number">1.7606</literal></expr>,}</block></expr>,
      <comment type="line">// precision 5</comment>
      <expr><block>{<expr><literal type="number">22</literal></expr>, <expr><literal type="number">21.1194</literal></expr>, <expr><literal type="number">20.8208</literal></expr>, <expr><literal type="number">20.2318</literal></expr>, <expr><literal type="number">19.77</literal></expr>, <expr><literal type="number">19.2436</literal></expr>, <expr><literal type="number">18.7774</literal></expr>, <expr><literal type="number">18.2848</literal></expr>, <expr><literal type="number">17.8224</literal></expr>, <expr><literal type="number">17.3742</literal></expr>, <expr><literal type="number">16.9336</literal></expr>,
          <expr><literal type="number">16.503</literal></expr>, <expr><literal type="number">16.0494</literal></expr>, <expr><literal type="number">15.6292</literal></expr>, <expr><literal type="number">15.2124</literal></expr>, <expr><literal type="number">14.798</literal></expr>, <expr><literal type="number">14.367</literal></expr>, <expr><literal type="number">13.9728</literal></expr>, <expr><literal type="number">13.5944</literal></expr>, <expr><literal type="number">13.217</literal></expr>, <expr><literal type="number">12.8438</literal></expr>,
          <expr><literal type="number">12.3696</literal></expr>, <expr><literal type="number">12.0956</literal></expr>, <expr><literal type="number">11.7044</literal></expr>, <expr><literal type="number">11.324</literal></expr>, <expr><literal type="number">11.0668</literal></expr>, <expr><literal type="number">10.6698</literal></expr>, <expr><literal type="number">10.3644</literal></expr>, <expr><literal type="number">10.049</literal></expr>, <expr><literal type="number">9.6918</literal></expr>, <expr><literal type="number">9.4146</literal></expr>,
          <expr><literal type="number">9.082</literal></expr>, <expr><literal type="number">8.687</literal></expr>, <expr><literal type="number">8.5398</literal></expr>, <expr><literal type="number">8.2462</literal></expr>, <expr><literal type="number">7.857</literal></expr>, <expr><literal type="number">7.6606</literal></expr>, <expr><literal type="number">7.4168</literal></expr>, <expr><literal type="number">7.1248</literal></expr>, <expr><literal type="number">6.9222</literal></expr>, <expr><literal type="number">6.6804</literal></expr>, <expr><literal type="number">6.447</literal></expr>,
          <expr><literal type="number">6.3454</literal></expr>, <expr><literal type="number">5.9594</literal></expr>, <expr><literal type="number">5.7636</literal></expr>, <expr><literal type="number">5.5776</literal></expr>, <expr><literal type="number">5.331</literal></expr>, <expr><literal type="number">5.19</literal></expr>, <expr><literal type="number">4.9676</literal></expr>, <expr><literal type="number">4.7564</literal></expr>, <expr><literal type="number">4.5314</literal></expr>, <expr><literal type="number">4.4442</literal></expr>, <expr><literal type="number">4.3708</literal></expr>,
          <expr><literal type="number">3.9774</literal></expr>, <expr><literal type="number">3.9624</literal></expr>, <expr><literal type="number">3.8796</literal></expr>, <expr><literal type="number">3.755</literal></expr>, <expr><literal type="number">3.472</literal></expr>, <expr><literal type="number">3.2076</literal></expr>, <expr><literal type="number">3.1024</literal></expr>, <expr><literal type="number">2.8908</literal></expr>, <expr><literal type="number">2.7338</literal></expr>, <expr><literal type="number">2.7728</literal></expr>, <expr><literal type="number">2.629</literal></expr>,
          <expr><literal type="number">2.413</literal></expr>, <expr><literal type="number">2.3266</literal></expr>, <expr><literal type="number">2.1524</literal></expr>, <expr><literal type="number">2.2642</literal></expr>, <expr><literal type="number">2.1806</literal></expr>, <expr><literal type="number">2.0566</literal></expr>, <expr><literal type="number">1.9192</literal></expr>, <expr><literal type="number">1.7598</literal></expr>, <expr><literal type="number">1.3516</literal></expr>, <expr><literal type="number">1.5802</literal></expr>,
          <expr><literal type="number">1.43859999999999</literal></expr>, <expr><literal type="number">1.49160000000001</literal></expr>, <expr><literal type="number">1.1524</literal></expr>, <expr><literal type="number">1.1892</literal></expr>, <expr><literal type="number">0.841399999999993</literal></expr>, <expr><literal type="number">0.879800000000003</literal></expr>,
          <expr><literal type="number">0.837599999999995</literal></expr>, <expr><literal type="number">0.469800000000006</literal></expr>, <expr><literal type="number">0.765600000000006</literal></expr>, <expr><literal type="number">0.331000000000003</literal></expr>,
          <expr><literal type="number">0.591399999999993</literal></expr>, <expr><literal type="number">0.601200000000006</literal></expr>, <expr><literal type="number">0.701599999999999</literal></expr>, <expr><literal type="number">0.558199999999999</literal></expr>,
          <expr><literal type="number">0.339399999999998</literal></expr>, <expr><literal type="number">0.354399999999998</literal></expr>, <expr><literal type="number">0.491200000000006</literal></expr>, <expr><literal type="number">0.308000000000007</literal></expr>,
          <expr><literal type="number">0.355199999999996</literal></expr>, <expr><operator>-</operator><literal type="number">0.0254000000000048</literal></expr>, <expr><literal type="number">0.205200000000005</literal></expr>, <expr><operator>-</operator><literal type="number">0.272999999999996</literal></expr>,
          <expr><literal type="number">0.132199999999997</literal></expr>, <expr><literal type="number">0.394400000000005</literal></expr>, <expr><operator>-</operator><literal type="number">0.241200000000006</literal></expr>, <expr><literal type="number">0.242000000000004</literal></expr>,
          <expr><literal type="number">0.191400000000002</literal></expr>, <expr><literal type="number">0.253799999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.122399999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.370800000000003</literal></expr>,
          <expr><literal type="number">0.193200000000004</literal></expr>, <expr><operator>-</operator><literal type="number">0.0848000000000013</literal></expr>, <expr><literal type="number">0.0867999999999967</literal></expr>, <expr><operator>-</operator><literal type="number">0.327200000000005</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.285600000000002</literal></expr>, <expr><literal type="number">0.311400000000006</literal></expr>, <expr><operator>-</operator><literal type="number">0.128399999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.754999999999995</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.209199999999996</literal></expr>, <expr><operator>-</operator><literal type="number">0.293599999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.364000000000004</literal></expr>, <expr><operator>-</operator><literal type="number">0.253600000000006</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.821200000000005</literal></expr>, <expr><operator>-</operator><literal type="number">0.253600000000006</literal></expr>, <expr><operator>-</operator><literal type="number">0.510400000000004</literal></expr>, <expr><operator>-</operator><literal type="number">0.383399999999995</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.491799999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.220200000000006</literal></expr>, <expr><operator>-</operator><literal type="number">0.0972000000000008</literal></expr>, <expr><operator>-</operator><literal type="number">0.557400000000001</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.114599999999996</literal></expr>, <expr><operator>-</operator><literal type="number">0.295000000000002</literal></expr>, <expr><operator>-</operator><literal type="number">0.534800000000004</literal></expr>, <expr><literal type="number">0.346399999999988</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.65379999999999</literal></expr>, <expr><literal type="number">0.0398000000000138</literal></expr>, <expr><literal type="number">0.0341999999999985</literal></expr>, <expr><operator>-</operator><literal type="number">0.995800000000003</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.523400000000009</literal></expr>, <expr><operator>-</operator><literal type="number">0.489000000000004</literal></expr>, <expr><operator>-</operator><literal type="number">0.274799999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.574999999999989</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.482799999999997</literal></expr>, <expr><literal type="number">0.0571999999999946</literal></expr>, <expr><operator>-</operator><literal type="number">0.330600000000004</literal></expr>, <expr><operator>-</operator><literal type="number">0.628800000000012</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.140199999999993</literal></expr>, <expr><operator>-</operator><literal type="number">0.540600000000012</literal></expr>, <expr><operator>-</operator><literal type="number">0.445999999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.599400000000003</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.262599999999992</literal></expr>, <expr><literal type="number">0.163399999999996</literal></expr>, <expr><operator>-</operator><literal type="number">0.100599999999986</literal></expr>, <expr><operator>-</operator><literal type="number">0.39500000000001</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.06960000000001</literal></expr>, <expr><operator>-</operator><literal type="number">0.836399999999998</literal></expr>, <expr><operator>-</operator><literal type="number">0.753199999999993</literal></expr>, <expr><operator>-</operator><literal type="number">0.412399999999991</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.790400000000005</literal></expr>, <expr><operator>-</operator><literal type="number">0.29679999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.28540000000001</literal></expr>, <expr><operator>-</operator><literal type="number">0.193000000000012</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.0772000000000048</literal></expr>, <expr><operator>-</operator><literal type="number">0.962799999999987</literal></expr>, <expr><operator>-</operator><literal type="number">0.414800000000014</literal></expr>,}</block></expr>,
      <comment type="line">// precision 6</comment>
      <expr><block>{<expr><literal type="number">45</literal></expr>, <expr><literal type="number">44.1902</literal></expr>, <expr><literal type="number">43.271</literal></expr>, <expr><literal type="number">42.8358</literal></expr>, <expr><literal type="number">41.8142</literal></expr>, <expr><literal type="number">41.2854</literal></expr>, <expr><literal type="number">40.317</literal></expr>, <expr><literal type="number">39.354</literal></expr>, <expr><literal type="number">38.8924</literal></expr>, <expr><literal type="number">37.9436</literal></expr>, <expr><literal type="number">37.4596</literal></expr>,
          <expr><literal type="number">36.5262</literal></expr>, <expr><literal type="number">35.6248</literal></expr>, <expr><literal type="number">35.1574</literal></expr>, <expr><literal type="number">34.2822</literal></expr>, <expr><literal type="number">33.837</literal></expr>, <expr><literal type="number">32.9636</literal></expr>, <expr><literal type="number">32.074</literal></expr>, <expr><literal type="number">31.7042</literal></expr>, <expr><literal type="number">30.7976</literal></expr>, <expr><literal type="number">30.4772</literal></expr>,
          <expr><literal type="number">29.6564</literal></expr>, <expr><literal type="number">28.7942</literal></expr>, <expr><literal type="number">28.5004</literal></expr>, <expr><literal type="number">27.686</literal></expr>, <expr><literal type="number">27.291</literal></expr>, <expr><literal type="number">26.5672</literal></expr>, <expr><literal type="number">25.8556</literal></expr>, <expr><literal type="number">25.4982</literal></expr>, <expr><literal type="number">24.8204</literal></expr>, <expr><literal type="number">24.4252</literal></expr>,
          <expr><literal type="number">23.7744</literal></expr>, <expr><literal type="number">23.0786</literal></expr>, <expr><literal type="number">22.8344</literal></expr>, <expr><literal type="number">22.0294</literal></expr>, <expr><literal type="number">21.8098</literal></expr>, <expr><literal type="number">21.0794</literal></expr>, <expr><literal type="number">20.5732</literal></expr>, <expr><literal type="number">20.1878</literal></expr>, <expr><literal type="number">19.5648</literal></expr>, <expr><literal type="number">19.2902</literal></expr>,
          <expr><literal type="number">18.6784</literal></expr>, <expr><literal type="number">18.3352</literal></expr>, <expr><literal type="number">17.8946</literal></expr>, <expr><literal type="number">17.3712</literal></expr>, <expr><literal type="number">17.0852</literal></expr>, <expr><literal type="number">16.499</literal></expr>, <expr><literal type="number">16.2686</literal></expr>, <expr><literal type="number">15.6844</literal></expr>, <expr><literal type="number">15.2234</literal></expr>, <expr><literal type="number">14.9732</literal></expr>,
          <expr><literal type="number">14.3356</literal></expr>, <expr><literal type="number">14.2286</literal></expr>, <expr><literal type="number">13.7262</literal></expr>, <expr><literal type="number">13.3284</literal></expr>, <expr><literal type="number">13.1048</literal></expr>, <expr><literal type="number">12.5962</literal></expr>, <expr><literal type="number">12.3562</literal></expr>, <expr><literal type="number">12.1272</literal></expr>, <expr><literal type="number">11.4184</literal></expr>, <expr><literal type="number">11.4974</literal></expr>,
          <expr><literal type="number">11.0822</literal></expr>, <expr><literal type="number">10.856</literal></expr>, <expr><literal type="number">10.48</literal></expr>, <expr><literal type="number">10.2834</literal></expr>, <expr><literal type="number">10.0208</literal></expr>, <expr><literal type="number">9.637</literal></expr>, <expr><literal type="number">9.51739999999999</literal></expr>, <expr><literal type="number">9.05759999999999</literal></expr>,
          <expr><literal type="number">8.74760000000001</literal></expr>, <expr><literal type="number">8.42700000000001</literal></expr>, <expr><literal type="number">8.1326</literal></expr>, <expr><literal type="number">8.2372</literal></expr>, <expr><literal type="number">8.2788</literal></expr>, <expr><literal type="number">7.6776</literal></expr>, <expr><literal type="number">7.79259999999999</literal></expr>,
          <expr><literal type="number">7.1952</literal></expr>, <expr><literal type="number">6.9564</literal></expr>, <expr><literal type="number">6.6454</literal></expr>, <expr><literal type="number">6.87</literal></expr>, <expr><literal type="number">6.5428</literal></expr>, <expr><literal type="number">6.19999999999999</literal></expr>, <expr><literal type="number">6.02940000000001</literal></expr>,
          <expr><literal type="number">5.62780000000001</literal></expr>, <expr><literal type="number">5.6782</literal></expr>, <expr><literal type="number">5.792</literal></expr>, <expr><literal type="number">5.35159999999999</literal></expr>, <expr><literal type="number">5.28319999999999</literal></expr>, <expr><literal type="number">5.0394</literal></expr>,
          <expr><literal type="number">5.07480000000001</literal></expr>, <expr><literal type="number">4.49119999999999</literal></expr>, <expr><literal type="number">4.84899999999999</literal></expr>, <expr><literal type="number">4.696</literal></expr>, <expr><literal type="number">4.54040000000001</literal></expr>,
          <expr><literal type="number">4.07300000000001</literal></expr>, <expr><literal type="number">4.37139999999999</literal></expr>, <expr><literal type="number">3.7216</literal></expr>, <expr><literal type="number">3.7328</literal></expr>, <expr><literal type="number">3.42080000000001</literal></expr>, <expr><literal type="number">3.41839999999999</literal></expr>,
          <expr><literal type="number">3.94239999999999</literal></expr>, <expr><literal type="number">3.27719999999999</literal></expr>, <expr><literal type="number">3.411</literal></expr>, <expr><literal type="number">3.13079999999999</literal></expr>, <expr><literal type="number">2.76900000000001</literal></expr>,
          <expr><literal type="number">2.92580000000001</literal></expr>, <expr><literal type="number">2.68279999999999</literal></expr>, <expr><literal type="number">2.75020000000001</literal></expr>, <expr><literal type="number">2.70599999999999</literal></expr>, <expr><literal type="number">2.3886</literal></expr>,
          <expr><literal type="number">3.01859999999999</literal></expr>, <expr><literal type="number">2.45179999999999</literal></expr>, <expr><literal type="number">2.92699999999999</literal></expr>, <expr><literal type="number">2.41720000000001</literal></expr>, <expr><literal type="number">2.41139999999999</literal></expr>,
          <expr><literal type="number">2.03299999999999</literal></expr>, <expr><literal type="number">2.51240000000001</literal></expr>, <expr><literal type="number">2.5564</literal></expr>, <expr><literal type="number">2.60079999999999</literal></expr>, <expr><literal type="number">2.41720000000001</literal></expr>,
          <expr><literal type="number">1.80439999999999</literal></expr>, <expr><literal type="number">1.99700000000001</literal></expr>, <expr><literal type="number">2.45480000000001</literal></expr>, <expr><literal type="number">1.8948</literal></expr>, <expr><literal type="number">2.2346</literal></expr>, <expr><literal type="number">2.30860000000001</literal></expr>,
          <expr><literal type="number">2.15479999999999</literal></expr>, <expr><literal type="number">1.88419999999999</literal></expr>, <expr><literal type="number">1.6508</literal></expr>, <expr><literal type="number">0.677199999999999</literal></expr>, <expr><literal type="number">1.72540000000001</literal></expr>, <expr><literal type="number">1.4752</literal></expr>,
          <expr><literal type="number">1.72280000000001</literal></expr>, <expr><literal type="number">1.66139999999999</literal></expr>, <expr><literal type="number">1.16759999999999</literal></expr>, <expr><literal type="number">1.79300000000001</literal></expr>, <expr><literal type="number">1.00059999999999</literal></expr>,
          <expr><literal type="number">0.905200000000008</literal></expr>, <expr><literal type="number">0.659999999999997</literal></expr>, <expr><literal type="number">1.55879999999999</literal></expr>, <expr><literal type="number">1.1636</literal></expr>, <expr><literal type="number">0.688199999999995</literal></expr>,
          <expr><literal type="number">0.712600000000009</literal></expr>, <expr><literal type="number">0.450199999999995</literal></expr>, <expr><literal type="number">1.1978</literal></expr>, <expr><literal type="number">0.975599999999986</literal></expr>, <expr><literal type="number">0.165400000000005</literal></expr>, <expr><literal type="number">1.727</literal></expr>,
          <expr><literal type="number">1.19739999999999</literal></expr>, <expr><operator>-</operator><literal type="number">0.252600000000001</literal></expr>, <expr><literal type="number">1.13460000000001</literal></expr>, <expr><literal type="number">1.3048</literal></expr>, <expr><literal type="number">1.19479999999999</literal></expr>,
          <expr><literal type="number">0.313400000000001</literal></expr>, <expr><literal type="number">0.878999999999991</literal></expr>, <expr><literal type="number">1.12039999999999</literal></expr>, <expr><literal type="number">0.853000000000009</literal></expr>,
          <expr><literal type="number">1.67920000000001</literal></expr>, <expr><literal type="number">0.856999999999999</literal></expr>, <expr><literal type="number">0.448599999999999</literal></expr>, <expr><literal type="number">1.2362</literal></expr>, <expr><literal type="number">0.953399999999988</literal></expr>,
          <expr><literal type="number">1.02859999999998</literal></expr>, <expr><literal type="number">0.563199999999995</literal></expr>, <expr><literal type="number">0.663000000000011</literal></expr>, <expr><literal type="number">0.723000000000013</literal></expr>,
          <expr><literal type="number">0.756599999999992</literal></expr>, <expr><literal type="number">0.256599999999992</literal></expr>, <expr><operator>-</operator><literal type="number">0.837600000000009</literal></expr>, <expr><literal type="number">0.620000000000005</literal></expr>,
          <expr><literal type="number">0.821599999999989</literal></expr>, <expr><literal type="number">0.216600000000028</literal></expr>, <expr><literal type="number">0.205600000000004</literal></expr>, <expr><literal type="number">0.220199999999977</literal></expr>,
          <expr><literal type="number">0.372599999999977</literal></expr>, <expr><literal type="number">0.334400000000016</literal></expr>, <expr><literal type="number">0.928400000000011</literal></expr>, <expr><literal type="number">0.972800000000007</literal></expr>,
          <expr><literal type="number">0.192400000000021</literal></expr>, <expr><literal type="number">0.487199999999973</literal></expr>, <expr><operator>-</operator><literal type="number">0.413000000000011</literal></expr>, <expr><literal type="number">0.807000000000016</literal></expr>,
          <expr><literal type="number">0.120600000000024</literal></expr>, <expr><literal type="number">0.769000000000005</literal></expr>, <expr><literal type="number">0.870799999999974</literal></expr>, <expr><literal type="number">0.66500000000002</literal></expr>,
          <expr><literal type="number">0.118200000000002</literal></expr>, <expr><literal type="number">0.401200000000017</literal></expr>, <expr><literal type="number">0.635199999999998</literal></expr>, <expr><literal type="number">0.135400000000004</literal></expr>,
          <expr><literal type="number">0.175599999999974</literal></expr>, <expr><literal type="number">1.16059999999999</literal></expr>, <expr><literal type="number">0.34620000000001</literal></expr>, <expr><literal type="number">0.521400000000028</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.586599999999976</literal></expr>, <expr><operator>-</operator><literal type="number">1.16480000000001</literal></expr>, <expr><literal type="number">0.968399999999974</literal></expr>, <expr><literal type="number">0.836999999999989</literal></expr>,
          <expr><literal type="number">0.779600000000016</literal></expr>, <expr><literal type="number">0.985799999999983</literal></expr>,}</block></expr>,
      <comment type="line">// precision 7</comment>
      <expr><block>{<expr><literal type="number">91</literal></expr>, <expr><literal type="number">89.4934</literal></expr>, <expr><literal type="number">87.9758</literal></expr>, <expr><literal type="number">86.4574</literal></expr>, <expr><literal type="number">84.9718</literal></expr>, <expr><literal type="number">83.4954</literal></expr>, <expr><literal type="number">81.5302</literal></expr>, <expr><literal type="number">80.0756</literal></expr>, <expr><literal type="number">78.6374</literal></expr>, <expr><literal type="number">77.1782</literal></expr>, <expr><literal type="number">75.7888</literal></expr>,
          <expr><literal type="number">73.9522</literal></expr>, <expr><literal type="number">72.592</literal></expr>, <expr><literal type="number">71.2532</literal></expr>, <expr><literal type="number">69.9086</literal></expr>, <expr><literal type="number">68.5938</literal></expr>, <expr><literal type="number">66.9474</literal></expr>, <expr><literal type="number">65.6796</literal></expr>, <expr><literal type="number">64.4394</literal></expr>, <expr><literal type="number">63.2176</literal></expr>, <expr><literal type="number">61.9768</literal></expr>,
          <expr><literal type="number">60.4214</literal></expr>, <expr><literal type="number">59.2528</literal></expr>, <expr><literal type="number">58.0102</literal></expr>, <expr><literal type="number">56.8658</literal></expr>, <expr><literal type="number">55.7278</literal></expr>, <expr><literal type="number">54.3044</literal></expr>, <expr><literal type="number">53.1316</literal></expr>, <expr><literal type="number">52.093</literal></expr>, <expr><literal type="number">51.0032</literal></expr>, <expr><literal type="number">49.9092</literal></expr>,
          <expr><literal type="number">48.6306</literal></expr>, <expr><literal type="number">47.5294</literal></expr>, <expr><literal type="number">46.5756</literal></expr>, <expr><literal type="number">45.6508</literal></expr>, <expr><literal type="number">44.662</literal></expr>, <expr><literal type="number">43.552</literal></expr>, <expr><literal type="number">42.3724</literal></expr>, <expr><literal type="number">41.617</literal></expr>, <expr><literal type="number">40.5754</literal></expr>, <expr><literal type="number">39.7872</literal></expr>,
          <expr><literal type="number">38.8444</literal></expr>, <expr><literal type="number">37.7988</literal></expr>, <expr><literal type="number">36.8606</literal></expr>, <expr><literal type="number">36.2118</literal></expr>, <expr><literal type="number">35.3566</literal></expr>, <expr><literal type="number">34.4476</literal></expr>, <expr><literal type="number">33.5882</literal></expr>, <expr><literal type="number">32.6816</literal></expr>, <expr><literal type="number">32.0824</literal></expr>, <expr><literal type="number">31.0258</literal></expr>,
          <expr><literal type="number">30.6048</literal></expr>, <expr><literal type="number">29.4436</literal></expr>, <expr><literal type="number">28.7274</literal></expr>, <expr><literal type="number">27.957</literal></expr>, <expr><literal type="number">27.147</literal></expr>, <expr><literal type="number">26.4364</literal></expr>, <expr><literal type="number">25.7592</literal></expr>, <expr><literal type="number">25.3386</literal></expr>, <expr><literal type="number">24.781</literal></expr>, <expr><literal type="number">23.8028</literal></expr>,
          <expr><literal type="number">23.656</literal></expr>, <expr><literal type="number">22.6544</literal></expr>, <expr><literal type="number">21.996</literal></expr>, <expr><literal type="number">21.4718</literal></expr>, <expr><literal type="number">21.1544</literal></expr>, <expr><literal type="number">20.6098</literal></expr>, <expr><literal type="number">19.5956</literal></expr>, <expr><literal type="number">19.0616</literal></expr>, <expr><literal type="number">18.5758</literal></expr>, <expr><literal type="number">18.4878</literal></expr>,
          <expr><literal type="number">17.5244</literal></expr>, <expr><literal type="number">17.2146</literal></expr>, <expr><literal type="number">16.724</literal></expr>, <expr><literal type="number">15.8722</literal></expr>, <expr><literal type="number">15.5198</literal></expr>, <expr><literal type="number">15.0414</literal></expr>, <expr><literal type="number">14.941</literal></expr>, <expr><literal type="number">14.9048</literal></expr>, <expr><literal type="number">13.87</literal></expr>, <expr><literal type="number">13.4304</literal></expr>,
          <expr><literal type="number">13.028</literal></expr>, <expr><literal type="number">12.4708</literal></expr>, <expr><literal type="number">12.37</literal></expr>, <expr><literal type="number">12.0624</literal></expr>, <expr><literal type="number">11.4668</literal></expr>, <expr><literal type="number">11.5532</literal></expr>, <expr><literal type="number">11.4352</literal></expr>, <expr><literal type="number">11.2564</literal></expr>, <expr><literal type="number">10.2744</literal></expr>, <expr><literal type="number">10.2118</literal></expr>,
          <expr><literal type="number">9.74720000000002</literal></expr>, <expr><literal type="number">10.1456</literal></expr>, <expr><literal type="number">9.2928</literal></expr>, <expr><literal type="number">8.75040000000001</literal></expr>, <expr><literal type="number">8.55279999999999</literal></expr>, <expr><literal type="number">8.97899999999998</literal></expr>,
          <expr><literal type="number">8.21019999999999</literal></expr>, <expr><literal type="number">8.18340000000001</literal></expr>, <expr><literal type="number">7.3494</literal></expr>, <expr><literal type="number">7.32499999999999</literal></expr>, <expr><literal type="number">7.66140000000001</literal></expr>,
          <expr><literal type="number">6.90300000000002</literal></expr>, <expr><literal type="number">7.25439999999998</literal></expr>, <expr><literal type="number">6.9042</literal></expr>, <expr><literal type="number">7.21499999999997</literal></expr>, <expr><literal type="number">6.28640000000001</literal></expr>,
          <expr><literal type="number">6.08139999999997</literal></expr>, <expr><literal type="number">6.6764</literal></expr>, <expr><literal type="number">6.30099999999999</literal></expr>, <expr><literal type="number">5.13900000000001</literal></expr>, <expr><literal type="number">5.65800000000002</literal></expr>,
          <expr><literal type="number">5.17320000000001</literal></expr>, <expr><literal type="number">4.59019999999998</literal></expr>, <expr><literal type="number">4.9538</literal></expr>, <expr><literal type="number">5.08280000000002</literal></expr>, <expr><literal type="number">4.92200000000003</literal></expr>,
          <expr><literal type="number">4.99020000000002</literal></expr>, <expr><literal type="number">4.7328</literal></expr>, <expr><literal type="number">5.4538</literal></expr>, <expr><literal type="number">4.11360000000002</literal></expr>, <expr><literal type="number">4.22340000000003</literal></expr>, <expr><literal type="number">4.08780000000002</literal></expr>,
          <expr><literal type="number">3.70800000000003</literal></expr>, <expr><literal type="number">4.15559999999999</literal></expr>, <expr><literal type="number">4.18520000000001</literal></expr>, <expr><literal type="number">3.63720000000001</literal></expr>, <expr><literal type="number">3.68220000000002</literal></expr>,
          <expr><literal type="number">3.77960000000002</literal></expr>, <expr><literal type="number">3.6078</literal></expr>, <expr><literal type="number">2.49160000000001</literal></expr>, <expr><literal type="number">3.13099999999997</literal></expr>, <expr><literal type="number">2.5376</literal></expr>, <expr><literal type="number">3.19880000000001</literal></expr>,
          <expr><literal type="number">3.21100000000001</literal></expr>, <expr><literal type="number">2.4502</literal></expr>, <expr><literal type="number">3.52820000000003</literal></expr>, <expr><literal type="number">2.91199999999998</literal></expr>, <expr><literal type="number">3.04480000000001</literal></expr>, <expr><literal type="number">2.7432</literal></expr>,
          <expr><literal type="number">2.85239999999999</literal></expr>, <expr><literal type="number">2.79880000000003</literal></expr>, <expr><literal type="number">2.78579999999999</literal></expr>, <expr><literal type="number">1.88679999999999</literal></expr>, <expr><literal type="number">2.98860000000002</literal></expr>,
          <expr><literal type="number">2.50639999999999</literal></expr>, <expr><literal type="number">1.91239999999999</literal></expr>, <expr><literal type="number">2.66160000000002</literal></expr>, <expr><literal type="number">2.46820000000002</literal></expr>, <expr><literal type="number">1.58199999999999</literal></expr>,
          <expr><literal type="number">1.30399999999997</literal></expr>, <expr><literal type="number">2.27379999999999</literal></expr>, <expr><literal type="number">2.68939999999998</literal></expr>, <expr><literal type="number">1.32900000000001</literal></expr>, <expr><literal type="number">3.10599999999999</literal></expr>,
          <expr><literal type="number">1.69080000000002</literal></expr>, <expr><literal type="number">2.13740000000001</literal></expr>, <expr><literal type="number">2.53219999999999</literal></expr>, <expr><literal type="number">1.88479999999998</literal></expr>, <expr><literal type="number">1.33240000000001</literal></expr>,
          <expr><literal type="number">1.45119999999997</literal></expr>, <expr><literal type="number">1.17899999999997</literal></expr>, <expr><literal type="number">2.44119999999998</literal></expr>, <expr><literal type="number">1.60659999999996</literal></expr>, <expr><literal type="number">2.16700000000003</literal></expr>,
          <expr><literal type="number">0.77940000000001</literal></expr>, <expr><literal type="number">2.37900000000002</literal></expr>, <expr><literal type="number">2.06700000000001</literal></expr>, <expr><literal type="number">1.46000000000004</literal></expr>, <expr><literal type="number">2.91160000000002</literal></expr>,
          <expr><literal type="number">1.69200000000001</literal></expr>, <expr><literal type="number">0.954600000000028</literal></expr>, <expr><literal type="number">2.49300000000005</literal></expr>, <expr><literal type="number">2.2722</literal></expr>, <expr><literal type="number">1.33500000000004</literal></expr>,
          <expr><literal type="number">2.44899999999996</literal></expr>, <expr><literal type="number">1.20140000000004</literal></expr>, <expr><literal type="number">3.07380000000001</literal></expr>, <expr><literal type="number">2.09739999999999</literal></expr>, <expr><literal type="number">2.85640000000001</literal></expr>,
          <expr><literal type="number">2.29960000000005</literal></expr>, <expr><literal type="number">2.40899999999999</literal></expr>, <expr><literal type="number">1.97040000000004</literal></expr>, <expr><literal type="number">0.809799999999996</literal></expr>, <expr><literal type="number">1.65279999999996</literal></expr>,
          <expr><literal type="number">2.59979999999996</literal></expr>, <expr><literal type="number">0.95799999999997</literal></expr>, <expr><literal type="number">2.06799999999998</literal></expr>, <expr><literal type="number">2.32780000000002</literal></expr>, <expr><literal type="number">4.20159999999998</literal></expr>,
          <expr><literal type="number">1.96320000000003</literal></expr>, <expr><literal type="number">1.86400000000003</literal></expr>, <expr><literal type="number">1.42999999999995</literal></expr>, <expr><literal type="number">3.77940000000001</literal></expr>, <expr><literal type="number">1.27200000000005</literal></expr>,
          <expr><literal type="number">1.86440000000005</literal></expr>, <expr><literal type="number">2.20600000000002</literal></expr>, <expr><literal type="number">3.21900000000005</literal></expr>, <expr><literal type="number">1.5154</literal></expr>, <expr><literal type="number">2.61019999999996</literal></expr>,}</block></expr>,
      <comment type="line">// precision 8</comment>
      <expr><block>{<expr><literal type="number">183.2152</literal></expr>, <expr><literal type="number">180.2454</literal></expr>, <expr><literal type="number">177.2096</literal></expr>, <expr><literal type="number">173.6652</literal></expr>, <expr><literal type="number">170.6312</literal></expr>, <expr><literal type="number">167.6822</literal></expr>, <expr><literal type="number">164.249</literal></expr>, <expr><literal type="number">161.3296</literal></expr>, <expr><literal type="number">158.0038</literal></expr>,
          <expr><literal type="number">155.2074</literal></expr>, <expr><literal type="number">152.4612</literal></expr>, <expr><literal type="number">149.27</literal></expr>, <expr><literal type="number">146.5178</literal></expr>, <expr><literal type="number">143.4412</literal></expr>, <expr><literal type="number">140.8032</literal></expr>, <expr><literal type="number">138.1634</literal></expr>, <expr><literal type="number">135.1688</literal></expr>, <expr><literal type="number">132.6074</literal></expr>,
          <expr><literal type="number">129.6946</literal></expr>, <expr><literal type="number">127.2664</literal></expr>, <expr><literal type="number">124.8228</literal></expr>, <expr><literal type="number">122.0432</literal></expr>, <expr><literal type="number">119.6824</literal></expr>, <expr><literal type="number">116.9464</literal></expr>, <expr><literal type="number">114.6268</literal></expr>, <expr><literal type="number">112.2626</literal></expr>, <expr><literal type="number">109.8376</literal></expr>,
          <expr><literal type="number">107.4034</literal></expr>, <expr><literal type="number">104.8956</literal></expr>, <expr><literal type="number">102.8522</literal></expr>, <expr><literal type="number">100.7638</literal></expr>, <expr><literal type="number">98.3552</literal></expr>, <expr><literal type="number">96.3556</literal></expr>, <expr><literal type="number">93.7526</literal></expr>, <expr><literal type="number">91.9292</literal></expr>, <expr><literal type="number">89.8954</literal></expr>,
          <expr><literal type="number">87.8198</literal></expr>, <expr><literal type="number">85.7668</literal></expr>, <expr><literal type="number">83.298</literal></expr>, <expr><literal type="number">81.6688</literal></expr>, <expr><literal type="number">79.9466</literal></expr>, <expr><literal type="number">77.9746</literal></expr>, <expr><literal type="number">76.1672</literal></expr>, <expr><literal type="number">74.3474</literal></expr>, <expr><literal type="number">72.3028</literal></expr>, <expr><literal type="number">70.8912</literal></expr>,
          <expr><literal type="number">69.114</literal></expr>, <expr><literal type="number">67.4646</literal></expr>, <expr><literal type="number">65.9744</literal></expr>, <expr><literal type="number">64.4092</literal></expr>, <expr><literal type="number">62.6022</literal></expr>, <expr><literal type="number">60.843</literal></expr>, <expr><literal type="number">59.5684</literal></expr>, <expr><literal type="number">58.1652</literal></expr>, <expr><literal type="number">56.5426</literal></expr>, <expr><literal type="number">55.4152</literal></expr>,
          <expr><literal type="number">53.5388</literal></expr>, <expr><literal type="number">52.3592</literal></expr>, <expr><literal type="number">51.1366</literal></expr>, <expr><literal type="number">49.486</literal></expr>, <expr><literal type="number">48.3918</literal></expr>, <expr><literal type="number">46.5076</literal></expr>, <expr><literal type="number">45.509</literal></expr>, <expr><literal type="number">44.3834</literal></expr>, <expr><literal type="number">43.3498</literal></expr>, <expr><literal type="number">42.0668</literal></expr>,
          <expr><literal type="number">40.7346</literal></expr>, <expr><literal type="number">40.1228</literal></expr>, <expr><literal type="number">38.4528</literal></expr>, <expr><literal type="number">37.7</literal></expr>, <expr><literal type="number">36.644</literal></expr>, <expr><literal type="number">36.0518</literal></expr>, <expr><literal type="number">34.5774</literal></expr>, <expr><literal type="number">33.9068</literal></expr>, <expr><literal type="number">32.432</literal></expr>, <expr><literal type="number">32.1666</literal></expr>,
          <expr><literal type="number">30.434</literal></expr>, <expr><literal type="number">29.6644</literal></expr>, <expr><literal type="number">28.4894</literal></expr>, <expr><literal type="number">27.6312</literal></expr>, <expr><literal type="number">26.3804</literal></expr>, <expr><literal type="number">26.292</literal></expr>, <expr><literal type="number">25.5496000000001</literal></expr>, <expr><literal type="number">25.0234</literal></expr>, <expr><literal type="number">24.8206</literal></expr>,
          <expr><literal type="number">22.6146</literal></expr>, <expr><literal type="number">22.4188</literal></expr>, <expr><literal type="number">22.117</literal></expr>, <expr><literal type="number">20.6762</literal></expr>, <expr><literal type="number">20.6576</literal></expr>, <expr><literal type="number">19.7864</literal></expr>, <expr><literal type="number">19.509</literal></expr>, <expr><literal type="number">18.5334</literal></expr>, <expr><literal type="number">17.9204</literal></expr>, <expr><literal type="number">17.772</literal></expr>,
          <expr><literal type="number">16.2924</literal></expr>, <expr><literal type="number">16.8654</literal></expr>, <expr><literal type="number">15.1836</literal></expr>, <expr><literal type="number">15.745</literal></expr>, <expr><literal type="number">15.1316</literal></expr>, <expr><literal type="number">15.0386</literal></expr>, <expr><literal type="number">14.0136</literal></expr>, <expr><literal type="number">13.6342</literal></expr>, <expr><literal type="number">12.6196</literal></expr>, <expr><literal type="number">12.1866</literal></expr>,
          <expr><literal type="number">12.4281999999999</literal></expr>, <expr><literal type="number">11.3324</literal></expr>, <expr><literal type="number">10.4794000000001</literal></expr>, <expr><literal type="number">11.5038</literal></expr>, <expr><literal type="number">10.129</literal></expr>, <expr><literal type="number">9.52800000000002</literal></expr>,
          <expr><literal type="number">10.3203999999999</literal></expr>, <expr><literal type="number">9.46299999999997</literal></expr>, <expr><literal type="number">9.79280000000006</literal></expr>, <expr><literal type="number">9.12300000000005</literal></expr>, <expr><literal type="number">8.74180000000001</literal></expr>,
          <expr><literal type="number">9.2192</literal></expr>, <expr><literal type="number">7.51020000000005</literal></expr>, <expr><literal type="number">7.60659999999996</literal></expr>, <expr><literal type="number">7.01840000000004</literal></expr>, <expr><literal type="number">7.22239999999999</literal></expr>,
          <expr><literal type="number">7.40139999999997</literal></expr>, <expr><literal type="number">6.76179999999999</literal></expr>, <expr><literal type="number">7.14359999999999</literal></expr>, <expr><literal type="number">5.65060000000005</literal></expr>, <expr><literal type="number">5.63779999999997</literal></expr>,
          <expr><literal type="number">5.76599999999996</literal></expr>, <expr><literal type="number">6.75139999999999</literal></expr>, <expr><literal type="number">5.57759999999996</literal></expr>, <expr><literal type="number">3.73220000000003</literal></expr>, <expr><literal type="number">5.8048</literal></expr>,
          <expr><literal type="number">5.63019999999995</literal></expr>, <expr><literal type="number">4.93359999999996</literal></expr>, <expr><literal type="number">3.47979999999995</literal></expr>, <expr><literal type="number">4.33879999999999</literal></expr>, <expr><literal type="number">3.98940000000005</literal></expr>,
          <expr><literal type="number">3.81960000000004</literal></expr>, <expr><literal type="number">3.31359999999995</literal></expr>, <expr><literal type="number">3.23080000000004</literal></expr>, <expr><literal type="number">3.4588</literal></expr>, <expr><literal type="number">3.08159999999998</literal></expr>, <expr><literal type="number">3.4076</literal></expr>,
          <expr><literal type="number">3.00639999999999</literal></expr>, <expr><literal type="number">2.38779999999997</literal></expr>, <expr><literal type="number">2.61900000000003</literal></expr>, <expr><literal type="number">1.99800000000005</literal></expr>, <expr><literal type="number">3.34820000000002</literal></expr>,
          <expr><literal type="number">2.95060000000001</literal></expr>, <expr><literal type="number">0.990999999999985</literal></expr>, <expr><literal type="number">2.11440000000005</literal></expr>, <expr><literal type="number">2.20299999999997</literal></expr>, <expr><literal type="number">2.82219999999995</literal></expr>,
          <expr><literal type="number">2.73239999999998</literal></expr>, <expr><literal type="number">2.7826</literal></expr>, <expr><literal type="number">3.76660000000004</literal></expr>, <expr><literal type="number">2.26480000000004</literal></expr>, <expr><literal type="number">2.31280000000004</literal></expr>,
          <expr><literal type="number">2.40819999999997</literal></expr>, <expr><literal type="number">2.75360000000001</literal></expr>, <expr><literal type="number">3.33759999999995</literal></expr>, <expr><literal type="number">2.71559999999999</literal></expr>, <expr><literal type="number">1.7478000000001</literal></expr>,
          <expr><literal type="number">1.42920000000004</literal></expr>, <expr><literal type="number">2.39300000000003</literal></expr>, <expr><literal type="number">2.22779999999989</literal></expr>, <expr><literal type="number">2.34339999999997</literal></expr>, <expr><literal type="number">0.87259999999992</literal></expr>,
          <expr><literal type="number">3.88400000000001</literal></expr>, <expr><literal type="number">1.80600000000004</literal></expr>, <expr><literal type="number">1.91759999999999</literal></expr>, <expr><literal type="number">1.16779999999994</literal></expr>, <expr><literal type="number">1.50320000000011</literal></expr>,
          <expr><literal type="number">2.52500000000009</literal></expr>, <expr><literal type="number">0.226400000000012</literal></expr>, <expr><literal type="number">2.31500000000005</literal></expr>, <expr><literal type="number">0.930000000000064</literal></expr>,
          <expr><literal type="number">1.25199999999995</literal></expr>, <expr><literal type="number">2.14959999999996</literal></expr>, <expr><literal type="number">0.0407999999999902</literal></expr>, <expr><literal type="number">2.5447999999999</literal></expr>, <expr><literal type="number">1.32960000000003</literal></expr>,
          <expr><literal type="number">0.197400000000016</literal></expr>, <expr><literal type="number">2.52620000000002</literal></expr>, <expr><literal type="number">3.33279999999991</literal></expr>, <expr><operator>-</operator><literal type="number">1.34300000000007</literal></expr>,
          <expr><literal type="number">0.422199999999975</literal></expr>, <expr><literal type="number">0.917200000000093</literal></expr>, <expr><literal type="number">1.12920000000008</literal></expr>, <expr><literal type="number">1.46060000000011</literal></expr>,
          <expr><literal type="number">1.45779999999991</literal></expr>, <expr><literal type="number">2.8728000000001</literal></expr>, <expr><literal type="number">3.33359999999993</literal></expr>, <expr><operator>-</operator><literal type="number">1.34079999999994</literal></expr>, <expr><literal type="number">1.57680000000005</literal></expr>,
          <expr><literal type="number">0.363000000000056</literal></expr>, <expr><literal type="number">1.40740000000005</literal></expr>, <expr><literal type="number">0.656600000000026</literal></expr>, <expr><literal type="number">0.801400000000058</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.454600000000028</literal></expr>, <expr><literal type="number">1.51919999999996</literal></expr>,}</block></expr>,
      <comment type="line">// precision 9</comment>
      <expr><block>{<expr><literal type="number">368</literal></expr>, <expr><literal type="number">361.8294</literal></expr>, <expr><literal type="number">355.2452</literal></expr>, <expr><literal type="number">348.6698</literal></expr>, <expr><literal type="number">342.1464</literal></expr>, <expr><literal type="number">336.2024</literal></expr>, <expr><literal type="number">329.8782</literal></expr>, <expr><literal type="number">323.6598</literal></expr>, <expr><literal type="number">317.462</literal></expr>, <expr><literal type="number">311.2826</literal></expr>,
          <expr><literal type="number">305.7102</literal></expr>, <expr><literal type="number">299.7416</literal></expr>, <expr><literal type="number">293.9366</literal></expr>, <expr><literal type="number">288.1046</literal></expr>, <expr><literal type="number">282.285</literal></expr>, <expr><literal type="number">277.0668</literal></expr>, <expr><literal type="number">271.306</literal></expr>, <expr><literal type="number">265.8448</literal></expr>, <expr><literal type="number">260.301</literal></expr>,
          <expr><literal type="number">254.9886</literal></expr>, <expr><literal type="number">250.2422</literal></expr>, <expr><literal type="number">244.8138</literal></expr>, <expr><literal type="number">239.7074</literal></expr>, <expr><literal type="number">234.7428</literal></expr>, <expr><literal type="number">229.8402</literal></expr>, <expr><literal type="number">225.1664</literal></expr>, <expr><literal type="number">220.3534</literal></expr>, <expr><literal type="number">215.594</literal></expr>,
          <expr><literal type="number">210.6886</literal></expr>, <expr><literal type="number">205.7876</literal></expr>, <expr><literal type="number">201.65</literal></expr>, <expr><literal type="number">197.228</literal></expr>, <expr><literal type="number">192.8036</literal></expr>, <expr><literal type="number">188.1666</literal></expr>, <expr><literal type="number">184.0818</literal></expr>, <expr><literal type="number">180.0824</literal></expr>, <expr><literal type="number">176.2574</literal></expr>,
          <expr><literal type="number">172.302</literal></expr>, <expr><literal type="number">168.1644</literal></expr>, <expr><literal type="number">164.0056</literal></expr>, <expr><literal type="number">160.3802</literal></expr>, <expr><literal type="number">156.7192</literal></expr>, <expr><literal type="number">152.5234</literal></expr>, <expr><literal type="number">149.2084</literal></expr>, <expr><literal type="number">145.831</literal></expr>, <expr><literal type="number">142.485</literal></expr>,
          <expr><literal type="number">139.1112</literal></expr>, <expr><literal type="number">135.4764</literal></expr>, <expr><literal type="number">131.76</literal></expr>, <expr><literal type="number">129.3368</literal></expr>, <expr><literal type="number">126.5538</literal></expr>, <expr><literal type="number">122.5058</literal></expr>, <expr><literal type="number">119.2646</literal></expr>, <expr><literal type="number">116.5902</literal></expr>, <expr><literal type="number">113.3818</literal></expr>,
          <expr><literal type="number">110.8998</literal></expr>, <expr><literal type="number">107.9532</literal></expr>, <expr><literal type="number">105.2062</literal></expr>, <expr><literal type="number">102.2798</literal></expr>, <expr><literal type="number">99.4728</literal></expr>, <expr><literal type="number">96.9582</literal></expr>, <expr><literal type="number">94.3292</literal></expr>, <expr><literal type="number">92.171</literal></expr>,
          <expr><literal type="number">89.7809999999999</literal></expr>, <expr><literal type="number">87.5716</literal></expr>, <expr><literal type="number">84.7048</literal></expr>, <expr><literal type="number">82.5322</literal></expr>, <expr><literal type="number">79.875</literal></expr>, <expr><literal type="number">78.3972</literal></expr>, <expr><literal type="number">75.3464</literal></expr>, <expr><literal type="number">73.7274</literal></expr>, <expr><literal type="number">71.2834</literal></expr>,
          <expr><literal type="number">70.1444</literal></expr>, <expr><literal type="number">68.4263999999999</literal></expr>, <expr><literal type="number">66.0166</literal></expr>, <expr><literal type="number">64.018</literal></expr>, <expr><literal type="number">62.0437999999999</literal></expr>, <expr><literal type="number">60.3399999999999</literal></expr>, <expr><literal type="number">58.6856</literal></expr>,
          <expr><literal type="number">57.9836</literal></expr>, <expr><literal type="number">55.0311999999999</literal></expr>, <expr><literal type="number">54.6769999999999</literal></expr>, <expr><literal type="number">52.3188</literal></expr>, <expr><literal type="number">51.4846</literal></expr>, <expr><literal type="number">49.4423999999999</literal></expr>, <expr><literal type="number">47.739</literal></expr>,
          <expr><literal type="number">46.1487999999999</literal></expr>, <expr><literal type="number">44.9202</literal></expr>, <expr><literal type="number">43.4059999999999</literal></expr>, <expr><literal type="number">42.5342000000001</literal></expr>, <expr><literal type="number">41.2834</literal></expr>, <expr><literal type="number">38.8954000000001</literal></expr>,
          <expr><literal type="number">38.3286000000001</literal></expr>, <expr><literal type="number">36.2146</literal></expr>, <expr><literal type="number">36.6684</literal></expr>, <expr><literal type="number">35.9946</literal></expr>, <expr><literal type="number">33.123</literal></expr>, <expr><literal type="number">33.4338</literal></expr>, <expr><literal type="number">31.7378000000001</literal></expr>, <expr><literal type="number">29.076</literal></expr>,
          <expr><literal type="number">28.9692</literal></expr>, <expr><literal type="number">27.4964</literal></expr>, <expr><literal type="number">27.0998</literal></expr>, <expr><literal type="number">25.9864</literal></expr>, <expr><literal type="number">26.7754</literal></expr>, <expr><literal type="number">24.3208</literal></expr>, <expr><literal type="number">23.4838</literal></expr>, <expr><literal type="number">22.7388000000001</literal></expr>,
          <expr><literal type="number">24.0758000000001</literal></expr>, <expr><literal type="number">21.9097999999999</literal></expr>, <expr><literal type="number">20.9728</literal></expr>, <expr><literal type="number">19.9228000000001</literal></expr>, <expr><literal type="number">19.9292</literal></expr>, <expr><literal type="number">16.617</literal></expr>, <expr><literal type="number">17.05</literal></expr>,
          <expr><literal type="number">18.2996000000001</literal></expr>, <expr><literal type="number">15.6128000000001</literal></expr>, <expr><literal type="number">15.7392</literal></expr>, <expr><literal type="number">14.5174</literal></expr>, <expr><literal type="number">13.6322</literal></expr>, <expr><literal type="number">12.2583999999999</literal></expr>,
          <expr><literal type="number">13.3766000000001</literal></expr>, <expr><literal type="number">11.423</literal></expr>, <expr><literal type="number">13.1232</literal></expr>, <expr><literal type="number">9.51639999999998</literal></expr>, <expr><literal type="number">10.5938000000001</literal></expr>, <expr><literal type="number">9.59719999999993</literal></expr>,
          <expr><literal type="number">8.12220000000002</literal></expr>, <expr><literal type="number">9.76739999999995</literal></expr>, <expr><literal type="number">7.50440000000003</literal></expr>, <expr><literal type="number">7.56999999999994</literal></expr>, <expr><literal type="number">6.70440000000008</literal></expr>,
          <expr><literal type="number">6.41419999999994</literal></expr>, <expr><literal type="number">6.71019999999999</literal></expr>, <expr><literal type="number">5.60940000000005</literal></expr>, <expr><literal type="number">4.65219999999999</literal></expr>, <expr><literal type="number">6.84099999999989</literal></expr>,
          <expr><literal type="number">3.4072000000001</literal></expr>, <expr><literal type="number">3.97859999999991</literal></expr>, <expr><literal type="number">3.32760000000007</literal></expr>, <expr><literal type="number">5.52160000000003</literal></expr>, <expr><literal type="number">3.31860000000006</literal></expr>,
          <expr><literal type="number">2.06940000000009</literal></expr>, <expr><literal type="number">4.35400000000004</literal></expr>, <expr><literal type="number">1.57500000000005</literal></expr>, <expr><literal type="number">0.280799999999999</literal></expr>, <expr><literal type="number">2.12879999999996</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.214799999999968</literal></expr>, <expr><operator>-</operator><literal type="number">0.0378000000000611</literal></expr>, <expr><operator>-</operator><literal type="number">0.658200000000079</literal></expr>, <expr><literal type="number">0.654800000000023</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.0697999999999865</literal></expr>, <expr><literal type="number">0.858400000000074</literal></expr>, <expr><operator>-</operator><literal type="number">2.52700000000004</literal></expr>, <expr><operator>-</operator><literal type="number">2.1751999999999</literal></expr>,
          <expr><operator>-</operator><literal type="number">3.35539999999992</literal></expr>, <expr><operator>-</operator><literal type="number">1.04019999999991</literal></expr>, <expr><operator>-</operator><literal type="number">0.651000000000067</literal></expr>, <expr><operator>-</operator><literal type="number">2.14439999999991</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.96659999999997</literal></expr>, <expr><operator>-</operator><literal type="number">3.97939999999994</literal></expr>, <expr><operator>-</operator><literal type="number">0.604400000000169</literal></expr>, <expr><operator>-</operator><literal type="number">3.08260000000018</literal></expr>,
          <expr><operator>-</operator><literal type="number">3.39159999999993</literal></expr>, <expr><operator>-</operator><literal type="number">5.29640000000018</literal></expr>, <expr><operator>-</operator><literal type="number">5.38920000000007</literal></expr>, <expr><operator>-</operator><literal type="number">5.08759999999984</literal></expr>,
          <expr><operator>-</operator><literal type="number">4.69900000000007</literal></expr>, <expr><operator>-</operator><literal type="number">5.23720000000003</literal></expr>, <expr><operator>-</operator><literal type="number">3.15779999999995</literal></expr>, <expr><operator>-</operator><literal type="number">4.97879999999986</literal></expr>,
          <expr><operator>-</operator><literal type="number">4.89899999999989</literal></expr>, <expr><operator>-</operator><literal type="number">7.48880000000008</literal></expr>, <expr><operator>-</operator><literal type="number">5.94799999999987</literal></expr>, <expr><operator>-</operator><literal type="number">5.68060000000014</literal></expr>,
          <expr><operator>-</operator><literal type="number">6.67180000000008</literal></expr>, <expr><operator>-</operator><literal type="number">4.70499999999993</literal></expr>, <expr><operator>-</operator><literal type="number">7.27779999999984</literal></expr>, <expr><operator>-</operator><literal type="number">4.6579999999999</literal></expr>,
          <expr><operator>-</operator><literal type="number">4.4362000000001</literal></expr>, <expr><operator>-</operator><literal type="number">4.32139999999981</literal></expr>, <expr><operator>-</operator><literal type="number">5.18859999999995</literal></expr>, <expr><operator>-</operator><literal type="number">6.66879999999992</literal></expr>,
          <expr><operator>-</operator><literal type="number">6.48399999999992</literal></expr>, <expr><operator>-</operator><literal type="number">5.1260000000002</literal></expr>, <expr><operator>-</operator><literal type="number">4.4032000000002</literal></expr>, <expr><operator>-</operator><literal type="number">6.13500000000022</literal></expr>,
          <expr><operator>-</operator><literal type="number">5.80819999999994</literal></expr>, <expr><operator>-</operator><literal type="number">4.16719999999987</literal></expr>, <expr><operator>-</operator><literal type="number">4.15039999999999</literal></expr>, <expr><operator>-</operator><literal type="number">7.45600000000013</literal></expr>,
          <expr><operator>-</operator><literal type="number">7.24080000000004</literal></expr>, <expr><operator>-</operator><literal type="number">9.83179999999993</literal></expr>, <expr><operator>-</operator><literal type="number">5.80420000000004</literal></expr>, <expr><operator>-</operator><literal type="number">8.6561999999999</literal></expr>,
          <expr><operator>-</operator><literal type="number">6.99940000000015</literal></expr>, <expr><operator>-</operator><literal type="number">10.5473999999999</literal></expr>, <expr><operator>-</operator><literal type="number">7.34139999999979</literal></expr>, <expr><operator>-</operator><literal type="number">6.80999999999995</literal></expr>,
          <expr><operator>-</operator><literal type="number">6.29719999999998</literal></expr>, <expr><operator>-</operator><literal type="number">6.23199999999997</literal></expr>,}</block></expr>,
      <comment type="line">// precision 10</comment>
      <expr><block>{<expr><literal type="number">737.1256</literal></expr>, <expr><literal type="number">724.4234</literal></expr>, <expr><literal type="number">711.1064</literal></expr>, <expr><literal type="number">698.4732</literal></expr>, <expr><literal type="number">685.4636</literal></expr>, <expr><literal type="number">673.0644</literal></expr>, <expr><literal type="number">660.488</literal></expr>, <expr><literal type="number">647.9654</literal></expr>, <expr><literal type="number">636.0832</literal></expr>,
          <expr><literal type="number">623.7864</literal></expr>, <expr><literal type="number">612.1992</literal></expr>, <expr><literal type="number">600.2176</literal></expr>, <expr><literal type="number">588.5228</literal></expr>, <expr><literal type="number">577.1716</literal></expr>, <expr><literal type="number">565.7752</literal></expr>, <expr><literal type="number">554.899</literal></expr>, <expr><literal type="number">543.6126</literal></expr>, <expr><literal type="number">532.6492</literal></expr>,
          <expr><literal type="number">521.9474</literal></expr>, <expr><literal type="number">511.5214</literal></expr>, <expr><literal type="number">501.1064</literal></expr>, <expr><literal type="number">490.6364</literal></expr>, <expr><literal type="number">480.2468</literal></expr>, <expr><literal type="number">470.4588</literal></expr>, <expr><literal type="number">460.3832</literal></expr>, <expr><literal type="number">451.0584</literal></expr>, <expr><literal type="number">440.8606</literal></expr>,
          <expr><literal type="number">431.3868</literal></expr>, <expr><literal type="number">422.5062</literal></expr>, <expr><literal type="number">413.1862</literal></expr>, <expr><literal type="number">404.463</literal></expr>, <expr><literal type="number">395.339</literal></expr>, <expr><literal type="number">386.1936</literal></expr>, <expr><literal type="number">378.1292</literal></expr>, <expr><literal type="number">369.1854</literal></expr>, <expr><literal type="number">361.2908</literal></expr>,
          <expr><literal type="number">353.3324</literal></expr>, <expr><literal type="number">344.8518</literal></expr>, <expr><literal type="number">337.5204</literal></expr>, <expr><literal type="number">329.4854</literal></expr>, <expr><literal type="number">321.9318</literal></expr>, <expr><literal type="number">314.552</literal></expr>, <expr><literal type="number">306.4658</literal></expr>, <expr><literal type="number">299.4256</literal></expr>, <expr><literal type="number">292.849</literal></expr>,
          <expr><literal type="number">286.152</literal></expr>, <expr><literal type="number">278.8956</literal></expr>, <expr><literal type="number">271.8792</literal></expr>, <expr><literal type="number">265.118</literal></expr>, <expr><literal type="number">258.62</literal></expr>, <expr><literal type="number">252.5132</literal></expr>, <expr><literal type="number">245.9322</literal></expr>, <expr><literal type="number">239.7726</literal></expr>, <expr><literal type="number">233.6086</literal></expr>,
          <expr><literal type="number">227.5332</literal></expr>, <expr><literal type="number">222.5918</literal></expr>, <expr><literal type="number">216.4294</literal></expr>, <expr><literal type="number">210.7662</literal></expr>, <expr><literal type="number">205.4106</literal></expr>, <expr><literal type="number">199.7338</literal></expr>, <expr><literal type="number">194.9012</literal></expr>, <expr><literal type="number">188.4486</literal></expr>, <expr><literal type="number">183.1556</literal></expr>,
          <expr><literal type="number">178.6338</literal></expr>, <expr><literal type="number">173.7312</literal></expr>, <expr><literal type="number">169.6264</literal></expr>, <expr><literal type="number">163.9526</literal></expr>, <expr><literal type="number">159.8742</literal></expr>, <expr><literal type="number">155.8326</literal></expr>, <expr><literal type="number">151.1966</literal></expr>, <expr><literal type="number">147.5594</literal></expr>, <expr><literal type="number">143.07</literal></expr>,
          <expr><literal type="number">140.037</literal></expr>, <expr><literal type="number">134.1804</literal></expr>, <expr><literal type="number">131.071</literal></expr>, <expr><literal type="number">127.4884</literal></expr>, <expr><literal type="number">124.0848</literal></expr>, <expr><literal type="number">120.2944</literal></expr>, <expr><literal type="number">117.333</literal></expr>, <expr><literal type="number">112.9626</literal></expr>, <expr><literal type="number">110.2902</literal></expr>,
          <expr><literal type="number">107.0814</literal></expr>, <expr><literal type="number">103.0334</literal></expr>, <expr><literal type="number">99.4832000000001</literal></expr>, <expr><literal type="number">96.3899999999999</literal></expr>, <expr><literal type="number">93.7202000000002</literal></expr>,
          <expr><literal type="number">90.1714000000002</literal></expr>, <expr><literal type="number">87.2357999999999</literal></expr>, <expr><literal type="number">85.9346</literal></expr>, <expr><literal type="number">82.8910000000001</literal></expr>, <expr><literal type="number">80.0264000000002</literal></expr>,
          <expr><literal type="number">78.3834000000002</literal></expr>, <expr><literal type="number">75.1543999999999</literal></expr>, <expr><literal type="number">73.8683999999998</literal></expr>, <expr><literal type="number">70.9895999999999</literal></expr>, <expr><literal type="number">69.4367999999999</literal></expr>,
          <expr><literal type="number">64.8701999999998</literal></expr>, <expr><literal type="number">65.0408000000002</literal></expr>, <expr><literal type="number">61.6738</literal></expr>, <expr><literal type="number">59.5207999999998</literal></expr>, <expr><literal type="number">57.0158000000001</literal></expr>, <expr><literal type="number">54.2302</literal></expr>,
          <expr><literal type="number">53.0962</literal></expr>, <expr><literal type="number">50.4985999999999</literal></expr>, <expr><literal type="number">52.2588000000001</literal></expr>, <expr><literal type="number">47.3914</literal></expr>, <expr><literal type="number">45.6244000000002</literal></expr>, <expr><literal type="number">42.8377999999998</literal></expr>,
          <expr><literal type="number">43.0072</literal></expr>, <expr><literal type="number">40.6516000000001</literal></expr>, <expr><literal type="number">40.2453999999998</literal></expr>, <expr><literal type="number">35.2136</literal></expr>, <expr><literal type="number">36.4546</literal></expr>, <expr><literal type="number">33.7849999999999</literal></expr>,
          <expr><literal type="number">33.2294000000002</literal></expr>, <expr><literal type="number">32.4679999999998</literal></expr>, <expr><literal type="number">30.8670000000002</literal></expr>, <expr><literal type="number">28.6507999999999</literal></expr>, <expr><literal type="number">28.9099999999999</literal></expr>,
          <expr><literal type="number">27.5983999999999</literal></expr>, <expr><literal type="number">26.1619999999998</literal></expr>, <expr><literal type="number">24.5563999999999</literal></expr>, <expr><literal type="number">23.2328000000002</literal></expr>, <expr><literal type="number">21.9484000000002</literal></expr>,
          <expr><literal type="number">21.5902000000001</literal></expr>, <expr><literal type="number">21.3346000000001</literal></expr>, <expr><literal type="number">17.7031999999999</literal></expr>, <expr><literal type="number">20.6111999999998</literal></expr>, <expr><literal type="number">19.5545999999999</literal></expr>,
          <expr><literal type="number">15.7375999999999</literal></expr>, <expr><literal type="number">17.0720000000001</literal></expr>, <expr><literal type="number">16.9517999999998</literal></expr>, <expr><literal type="number">15.326</literal></expr>, <expr><literal type="number">13.1817999999998</literal></expr>,
          <expr><literal type="number">14.6925999999999</literal></expr>, <expr><literal type="number">13.0859999999998</literal></expr>, <expr><literal type="number">13.2754</literal></expr>, <expr><literal type="number">10.8697999999999</literal></expr>, <expr><literal type="number">11.248</literal></expr>, <expr><literal type="number">7.3768</literal></expr>,
          <expr><literal type="number">4.72339999999986</literal></expr>, <expr><literal type="number">7.97899999999981</literal></expr>, <expr><literal type="number">8.7503999999999</literal></expr>, <expr><literal type="number">7.68119999999999</literal></expr>, <expr><literal type="number">9.7199999999998</literal></expr>,
          <expr><literal type="number">7.73919999999998</literal></expr>, <expr><literal type="number">5.6224000000002</literal></expr>, <expr><literal type="number">7.44560000000001</literal></expr>, <expr><literal type="number">6.6601999999998</literal></expr>, <expr><literal type="number">5.9058</literal></expr>,
          <expr><literal type="number">4.00199999999995</literal></expr>, <expr><literal type="number">4.51699999999983</literal></expr>, <expr><literal type="number">4.68240000000014</literal></expr>, <expr><literal type="number">3.86220000000003</literal></expr>, <expr><literal type="number">5.13639999999987</literal></expr>,
          <expr><literal type="number">5.98500000000013</literal></expr>, <expr><literal type="number">2.47719999999981</literal></expr>, <expr><literal type="number">2.61999999999989</literal></expr>, <expr><literal type="number">1.62800000000016</literal></expr>, <expr><literal type="number">4.65000000000009</literal></expr>,
          <expr><literal type="number">0.225599999999758</literal></expr>, <expr><literal type="number">0.831000000000131</literal></expr>, <expr><operator>-</operator><literal type="number">0.359400000000278</literal></expr>, <expr><literal type="number">1.27599999999984</literal></expr>,
          <expr><operator>-</operator><literal type="number">2.92559999999958</literal></expr>, <expr><operator>-</operator><literal type="number">0.0303999999996449</literal></expr>, <expr><literal type="number">2.37079999999969</literal></expr>, <expr><operator>-</operator><literal type="number">2.0033999999996</literal></expr>,
          <expr><literal type="number">0.804600000000391</literal></expr>, <expr><literal type="number">0.30199999999968</literal></expr>, <expr><literal type="number">1.1247999999996</literal></expr>, <expr><operator>-</operator><literal type="number">2.6880000000001</literal></expr>,
          <expr><literal type="number">0.0321999999996478</literal></expr>, <expr><operator>-</operator><literal type="number">1.18099999999959</literal></expr>, <expr><operator>-</operator><literal type="number">3.9402</literal></expr>, <expr><operator>-</operator><literal type="number">1.47940000000017</literal></expr>, <expr><operator>-</operator><literal type="number">0.188400000000001</literal></expr>,
          <expr><operator>-</operator><literal type="number">2.10720000000038</literal></expr>, <expr><operator>-</operator><literal type="number">2.04159999999956</literal></expr>, <expr><operator>-</operator><literal type="number">3.12880000000041</literal></expr>, <expr><operator>-</operator><literal type="number">4.16160000000036</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.612799999999879</literal></expr>, <expr><operator>-</operator><literal type="number">3.48719999999958</literal></expr>, <expr><operator>-</operator><literal type="number">8.17900000000009</literal></expr>, <expr><operator>-</operator><literal type="number">5.37780000000021</literal></expr>,
          <expr><operator>-</operator><literal type="number">4.01379999999972</literal></expr>, <expr><operator>-</operator><literal type="number">5.58259999999973</literal></expr>, <expr><operator>-</operator><literal type="number">5.73719999999958</literal></expr>, <expr><operator>-</operator><literal type="number">7.66799999999967</literal></expr>,
          <expr><operator>-</operator><literal type="number">5.69520000000011</literal></expr>, <expr><operator>-</operator><literal type="number">1.1247999999996</literal></expr>, <expr><operator>-</operator><literal type="number">5.58520000000044</literal></expr>, <expr><operator>-</operator><literal type="number">8.04560000000038</literal></expr>,
          <expr><operator>-</operator><literal type="number">4.64840000000004</literal></expr>, <expr><operator>-</operator><literal type="number">11.6468000000004</literal></expr>, <expr><operator>-</operator><literal type="number">7.97519999999986</literal></expr>, <expr><operator>-</operator><literal type="number">5.78300000000036</literal></expr>,
          <expr><operator>-</operator><literal type="number">7.67420000000038</literal></expr>, <expr><operator>-</operator><literal type="number">10.6328000000003</literal></expr>, <expr><operator>-</operator><literal type="number">9.81720000000041</literal></expr>,}</block></expr>,
      <comment type="line">// precision 11</comment>
      <expr><block>{<expr><literal type="number">1476</literal></expr>, <expr><literal type="number">1449.6014</literal></expr>, <expr><literal type="number">1423.5802</literal></expr>, <expr><literal type="number">1397.7942</literal></expr>, <expr><literal type="number">1372.3042</literal></expr>, <expr><literal type="number">1347.2062</literal></expr>, <expr><literal type="number">1321.8402</literal></expr>, <expr><literal type="number">1297.2292</literal></expr>, <expr><literal type="number">1272.9462</literal></expr>,
          <expr><literal type="number">1248.9926</literal></expr>, <expr><literal type="number">1225.3026</literal></expr>, <expr><literal type="number">1201.4252</literal></expr>, <expr><literal type="number">1178.0578</literal></expr>, <expr><literal type="number">1155.6092</literal></expr>, <expr><literal type="number">1132.626</literal></expr>, <expr><literal type="number">1110.5568</literal></expr>, <expr><literal type="number">1088.527</literal></expr>,
          <expr><literal type="number">1066.5154</literal></expr>, <expr><literal type="number">1045.1874</literal></expr>, <expr><literal type="number">1024.3878</literal></expr>, <expr><literal type="number">1003.37</literal></expr>, <expr><literal type="number">982.1972</literal></expr>, <expr><literal type="number">962.5728</literal></expr>, <expr><literal type="number">942.1012</literal></expr>, <expr><literal type="number">922.9668</literal></expr>, <expr><literal type="number">903.292</literal></expr>,
          <expr><literal type="number">884.0772</literal></expr>, <expr><literal type="number">864.8578</literal></expr>, <expr><literal type="number">846.6562</literal></expr>, <expr><literal type="number">828.041</literal></expr>, <expr><literal type="number">809.714</literal></expr>, <expr><literal type="number">792.3112</literal></expr>, <expr><literal type="number">775.1806</literal></expr>, <expr><literal type="number">757.9854</literal></expr>, <expr><literal type="number">740.656</literal></expr>,
          <expr><literal type="number">724.346</literal></expr>, <expr><literal type="number">707.5154</literal></expr>, <expr><literal type="number">691.8378</literal></expr>, <expr><literal type="number">675.7448</literal></expr>, <expr><literal type="number">659.6722</literal></expr>, <expr><literal type="number">645.5722</literal></expr>, <expr><literal type="number">630.1462</literal></expr>, <expr><literal type="number">614.4124</literal></expr>, <expr><literal type="number">600.8728</literal></expr>,
          <expr><literal type="number">585.898</literal></expr>, <expr><literal type="number">572.408</literal></expr>, <expr><literal type="number">558.4926</literal></expr>, <expr><literal type="number">544.4938</literal></expr>, <expr><literal type="number">531.6776</literal></expr>, <expr><literal type="number">517.282</literal></expr>, <expr><literal type="number">505.7704</literal></expr>, <expr><literal type="number">493.1012</literal></expr>, <expr><literal type="number">480.7388</literal></expr>,
          <expr><literal type="number">467.6876</literal></expr>, <expr><literal type="number">456.1872</literal></expr>, <expr><literal type="number">445.5048</literal></expr>, <expr><literal type="number">433.0214</literal></expr>, <expr><literal type="number">420.806</literal></expr>, <expr><literal type="number">411.409</literal></expr>, <expr><literal type="number">400.4144</literal></expr>, <expr><literal type="number">389.4294</literal></expr>, <expr><literal type="number">379.2286</literal></expr>,
          <expr><literal type="number">369.651</literal></expr>, <expr><literal type="number">360.6156</literal></expr>, <expr><literal type="number">350.337</literal></expr>, <expr><literal type="number">342.083</literal></expr>, <expr><literal type="number">332.1538</literal></expr>, <expr><literal type="number">322.5094</literal></expr>, <expr><literal type="number">315.01</literal></expr>, <expr><literal type="number">305.6686</literal></expr>, <expr><literal type="number">298.1678</literal></expr>,
          <expr><literal type="number">287.8116</literal></expr>, <expr><literal type="number">280.9978</literal></expr>, <expr><literal type="number">271.9204</literal></expr>, <expr><literal type="number">265.3286</literal></expr>, <expr><literal type="number">257.5706</literal></expr>, <expr><literal type="number">249.6014</literal></expr>, <expr><literal type="number">242.544</literal></expr>, <expr><literal type="number">235.5976</literal></expr>, <expr><literal type="number">229.583</literal></expr>,
          <expr><literal type="number">220.9438</literal></expr>, <expr><literal type="number">214.672</literal></expr>, <expr><literal type="number">208.2786</literal></expr>, <expr><literal type="number">201.8628</literal></expr>, <expr><literal type="number">195.1834</literal></expr>, <expr><literal type="number">191.505</literal></expr>, <expr><literal type="number">186.1816</literal></expr>, <expr><literal type="number">178.5188</literal></expr>, <expr><literal type="number">172.2294</literal></expr>,
          <expr><literal type="number">167.8908</literal></expr>, <expr><literal type="number">161.0194</literal></expr>, <expr><literal type="number">158.052</literal></expr>, <expr><literal type="number">151.4588</literal></expr>, <expr><literal type="number">148.1596</literal></expr>, <expr><literal type="number">143.4344</literal></expr>, <expr><literal type="number">138.5238</literal></expr>, <expr><literal type="number">133.13</literal></expr>, <expr><literal type="number">127.6374</literal></expr>,
          <expr><literal type="number">124.8162</literal></expr>, <expr><literal type="number">118.7894</literal></expr>, <expr><literal type="number">117.3984</literal></expr>, <expr><literal type="number">114.6078</literal></expr>, <expr><literal type="number">109.0858</literal></expr>, <expr><literal type="number">105.1036</literal></expr>, <expr><literal type="number">103.6258</literal></expr>, <expr><literal type="number">98.6018000000004</literal></expr>,
          <expr><literal type="number">95.7618000000002</literal></expr>, <expr><literal type="number">93.5821999999998</literal></expr>, <expr><literal type="number">88.5900000000001</literal></expr>, <expr><literal type="number">86.9992000000002</literal></expr>, <expr><literal type="number">82.8800000000001</literal></expr>,
          <expr><literal type="number">80.4539999999997</literal></expr>, <expr><literal type="number">74.6981999999998</literal></expr>, <expr><literal type="number">74.3644000000004</literal></expr>, <expr><literal type="number">73.2914000000001</literal></expr>, <expr><literal type="number">65.5709999999999</literal></expr>,
          <expr><literal type="number">66.9232000000002</literal></expr>, <expr><literal type="number">65.1913999999997</literal></expr>, <expr><literal type="number">62.5882000000001</literal></expr>, <expr><literal type="number">61.5702000000001</literal></expr>, <expr><literal type="number">55.7035999999998</literal></expr>,
          <expr><literal type="number">56.1764000000003</literal></expr>, <expr><literal type="number">52.7596000000003</literal></expr>, <expr><literal type="number">53.0302000000001</literal></expr>, <expr><literal type="number">49.0609999999997</literal></expr>, <expr><literal type="number">48.4694</literal></expr>, <expr><literal type="number">44.933</literal></expr>,
          <expr><literal type="number">46.0474000000004</literal></expr>, <expr><literal type="number">44.7165999999997</literal></expr>, <expr><literal type="number">41.9416000000001</literal></expr>, <expr><literal type="number">39.9207999999999</literal></expr>, <expr><literal type="number">35.6328000000003</literal></expr>,
          <expr><literal type="number">35.5276000000003</literal></expr>, <expr><literal type="number">33.1934000000001</literal></expr>, <expr><literal type="number">33.2371999999996</literal></expr>, <expr><literal type="number">33.3864000000003</literal></expr>, <expr><literal type="number">33.9228000000003</literal></expr>,
          <expr><literal type="number">30.2371999999996</literal></expr>, <expr><literal type="number">29.1373999999996</literal></expr>, <expr><literal type="number">25.2272000000003</literal></expr>, <expr><literal type="number">24.2942000000003</literal></expr>, <expr><literal type="number">19.8338000000003</literal></expr>,
          <expr><literal type="number">18.9005999999999</literal></expr>, <expr><literal type="number">23.0907999999999</literal></expr>, <expr><literal type="number">21.8544000000002</literal></expr>, <expr><literal type="number">19.5176000000001</literal></expr>, <expr><literal type="number">15.4147999999996</literal></expr>,
          <expr><literal type="number">16.9314000000004</literal></expr>, <expr><literal type="number">18.6737999999996</literal></expr>, <expr><literal type="number">12.9877999999999</literal></expr>, <expr><literal type="number">14.3688000000002</literal></expr>, <expr><literal type="number">12.0447999999997</literal></expr>,
          <expr><literal type="number">15.5219999999999</literal></expr>, <expr><literal type="number">12.5299999999997</literal></expr>, <expr><literal type="number">14.5940000000001</literal></expr>, <expr><literal type="number">14.3131999999996</literal></expr>, <expr><literal type="number">9.45499999999993</literal></expr>,
          <expr><literal type="number">12.9441999999999</literal></expr>, <expr><literal type="number">3.91139999999996</literal></expr>, <expr><literal type="number">13.1373999999996</literal></expr>, <expr><literal type="number">5.44720000000052</literal></expr>, <expr><literal type="number">9.82779999999912</literal></expr>,
          <expr><literal type="number">7.87279999999919</literal></expr>, <expr><literal type="number">3.67760000000089</literal></expr>, <expr><literal type="number">5.46980000000076</literal></expr>, <expr><literal type="number">5.55099999999948</literal></expr>, <expr><literal type="number">5.65979999999945</literal></expr>,
          <expr><literal type="number">3.89439999999922</literal></expr>, <expr><literal type="number">3.1275999999998</literal></expr>, <expr><literal type="number">5.65140000000065</literal></expr>, <expr><literal type="number">6.3062000000009</literal></expr>, <expr><literal type="number">3.90799999999945</literal></expr>,
          <expr><literal type="number">1.87060000000019</literal></expr>, <expr><literal type="number">5.17020000000048</literal></expr>, <expr><literal type="number">2.46680000000015</literal></expr>, <expr><literal type="number">0.770000000000437</literal></expr>,
          <expr><operator>-</operator><literal type="number">3.72340000000077</literal></expr>, <expr><literal type="number">1.16400000000067</literal></expr>, <expr><literal type="number">8.05340000000069</literal></expr>, <expr><literal type="number">0.135399999999208</literal></expr>,
          <expr><literal type="number">2.15940000000046</literal></expr>, <expr><literal type="number">0.766999999999825</literal></expr>, <expr><literal type="number">1.0594000000001</literal></expr>, <expr><literal type="number">3.15500000000065</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.287399999999252</literal></expr>, <expr><literal type="number">2.37219999999979</literal></expr>, <expr><operator>-</operator><literal type="number">2.86620000000039</literal></expr>, <expr><operator>-</operator><literal type="number">1.63199999999961</literal></expr>,
          <expr><operator>-</operator><literal type="number">2.22979999999916</literal></expr>, <expr><operator>-</operator><literal type="number">0.15519999999924</literal></expr>, <expr><operator>-</operator><literal type="number">1.46039999999994</literal></expr>, <expr><operator>-</operator><literal type="number">0.262199999999211</literal></expr>,
          <expr><operator>-</operator><literal type="number">2.34460000000036</literal></expr>, <expr><operator>-</operator><literal type="number">2.8078000000005</literal></expr>, <expr><operator>-</operator><literal type="number">3.22179999999935</literal></expr>, <expr><operator>-</operator><literal type="number">5.60159999999996</literal></expr>,
          <expr><operator>-</operator><literal type="number">8.42200000000048</literal></expr>, <expr><operator>-</operator><literal type="number">9.43740000000071</literal></expr>, <expr><literal type="number">0.161799999999857</literal></expr>, <expr><operator>-</operator><literal type="number">10.4755999999998</literal></expr>,
          <expr><operator>-</operator><literal type="number">10.0823999999993</literal></expr>,}</block></expr>,
      <comment type="line">// precision 12</comment>
      <expr><block>{<expr><literal type="number">2953</literal></expr>, <expr><literal type="number">2900.4782</literal></expr>, <expr><literal type="number">2848.3568</literal></expr>, <expr><literal type="number">2796.3666</literal></expr>, <expr><literal type="number">2745.324</literal></expr>, <expr><literal type="number">2694.9598</literal></expr>, <expr><literal type="number">2644.648</literal></expr>, <expr><literal type="number">2595.539</literal></expr>, <expr><literal type="number">2546.1474</literal></expr>,
          <expr><literal type="number">2498.2576</literal></expr>, <expr><literal type="number">2450.8376</literal></expr>, <expr><literal type="number">2403.6076</literal></expr>, <expr><literal type="number">2357.451</literal></expr>, <expr><literal type="number">2311.38</literal></expr>, <expr><literal type="number">2266.4104</literal></expr>, <expr><literal type="number">2221.5638</literal></expr>, <expr><literal type="number">2176.9676</literal></expr>,
          <expr><literal type="number">2134.193</literal></expr>, <expr><literal type="number">2090.838</literal></expr>, <expr><literal type="number">2048.8548</literal></expr>, <expr><literal type="number">2007.018</literal></expr>, <expr><literal type="number">1966.1742</literal></expr>, <expr><literal type="number">1925.4482</literal></expr>, <expr><literal type="number">1885.1294</literal></expr>, <expr><literal type="number">1846.4776</literal></expr>,
          <expr><literal type="number">1807.4044</literal></expr>, <expr><literal type="number">1768.8724</literal></expr>, <expr><literal type="number">1731.3732</literal></expr>, <expr><literal type="number">1693.4304</literal></expr>, <expr><literal type="number">1657.5326</literal></expr>, <expr><literal type="number">1621.949</literal></expr>, <expr><literal type="number">1586.5532</literal></expr>, <expr><literal type="number">1551.7256</literal></expr>,
          <expr><literal type="number">1517.6182</literal></expr>, <expr><literal type="number">1483.5186</literal></expr>, <expr><literal type="number">1450.4528</literal></expr>, <expr><literal type="number">1417.865</literal></expr>, <expr><literal type="number">1385.7164</literal></expr>, <expr><literal type="number">1352.6828</literal></expr>, <expr><literal type="number">1322.6708</literal></expr>, <expr><literal type="number">1291.8312</literal></expr>,
          <expr><literal type="number">1260.9036</literal></expr>, <expr><literal type="number">1231.476</literal></expr>, <expr><literal type="number">1201.8652</literal></expr>, <expr><literal type="number">1173.6718</literal></expr>, <expr><literal type="number">1145.757</literal></expr>, <expr><literal type="number">1119.2072</literal></expr>, <expr><literal type="number">1092.2828</literal></expr>, <expr><literal type="number">1065.0434</literal></expr>,
          <expr><literal type="number">1038.6264</literal></expr>, <expr><literal type="number">1014.3192</literal></expr>, <expr><literal type="number">988.5746</literal></expr>, <expr><literal type="number">965.0816</literal></expr>, <expr><literal type="number">940.1176</literal></expr>, <expr><literal type="number">917.9796</literal></expr>, <expr><literal type="number">894.5576</literal></expr>, <expr><literal type="number">871.1858</literal></expr>,
          <expr><literal type="number">849.9144</literal></expr>, <expr><literal type="number">827.1142</literal></expr>, <expr><literal type="number">805.0818</literal></expr>, <expr><literal type="number">783.9664</literal></expr>, <expr><literal type="number">763.9096</literal></expr>, <expr><literal type="number">742.0816</literal></expr>, <expr><literal type="number">724.3962</literal></expr>, <expr><literal type="number">706.3454</literal></expr>, <expr><literal type="number">688.018</literal></expr>,
          <expr><literal type="number">667.4214</literal></expr>, <expr><literal type="number">650.3106</literal></expr>, <expr><literal type="number">633.0686</literal></expr>, <expr><literal type="number">613.8094</literal></expr>, <expr><literal type="number">597.818</literal></expr>, <expr><literal type="number">581.4248</literal></expr>, <expr><literal type="number">563.834</literal></expr>, <expr><literal type="number">547.363</literal></expr>, <expr><literal type="number">531.5066</literal></expr>,
          <expr><literal type="number">520.455400000001</literal></expr>, <expr><literal type="number">505.583199999999</literal></expr>, <expr><literal type="number">488.366</literal></expr>, <expr><literal type="number">476.480799999999</literal></expr>, <expr><literal type="number">459.7682</literal></expr>, <expr><literal type="number">450.0522</literal></expr>,
          <expr><literal type="number">434.328799999999</literal></expr>, <expr><literal type="number">423.952799999999</literal></expr>, <expr><literal type="number">408.727000000001</literal></expr>, <expr><literal type="number">399.079400000001</literal></expr>, <expr><literal type="number">387.252200000001</literal></expr>,
          <expr><literal type="number">373.987999999999</literal></expr>, <expr><literal type="number">360.852000000001</literal></expr>, <expr><literal type="number">351.6394</literal></expr>, <expr><literal type="number">339.642</literal></expr>, <expr><literal type="number">330.902400000001</literal></expr>, <expr><literal type="number">322.661599999999</literal></expr>,
          <expr><literal type="number">311.662200000001</literal></expr>, <expr><literal type="number">301.3254</literal></expr>, <expr><literal type="number">291.7484</literal></expr>, <expr><literal type="number">279.939200000001</literal></expr>, <expr><literal type="number">276.7508</literal></expr>, <expr><literal type="number">263.215200000001</literal></expr>,
          <expr><literal type="number">254.811400000001</literal></expr>, <expr><literal type="number">245.5494</literal></expr>, <expr><literal type="number">242.306399999999</literal></expr>, <expr><literal type="number">234.8734</literal></expr>, <expr><literal type="number">223.787200000001</literal></expr>, <expr><literal type="number">217.7156</literal></expr>,
          <expr><literal type="number">212.0196</literal></expr>, <expr><literal type="number">200.793</literal></expr>, <expr><literal type="number">195.9748</literal></expr>, <expr><literal type="number">189.0702</literal></expr>, <expr><literal type="number">182.449199999999</literal></expr>, <expr><literal type="number">177.2772</literal></expr>, <expr><literal type="number">170.2336</literal></expr>, <expr><literal type="number">164.741</literal></expr>,
          <expr><literal type="number">158.613600000001</literal></expr>, <expr><literal type="number">155.311</literal></expr>, <expr><literal type="number">147.5964</literal></expr>, <expr><literal type="number">142.837</literal></expr>, <expr><literal type="number">137.3724</literal></expr>, <expr><literal type="number">132.0162</literal></expr>, <expr><literal type="number">130.0424</literal></expr>, <expr><literal type="number">121.9804</literal></expr>,
          <expr><literal type="number">120.451800000001</literal></expr>, <expr><literal type="number">114.8968</literal></expr>, <expr><literal type="number">111.585999999999</literal></expr>, <expr><literal type="number">105.933199999999</literal></expr>, <expr><literal type="number">101.705</literal></expr>, <expr><literal type="number">98.5141999999996</literal></expr>,
          <expr><literal type="number">95.0488000000005</literal></expr>, <expr><literal type="number">89.7880000000005</literal></expr>, <expr><literal type="number">91.4750000000004</literal></expr>, <expr><literal type="number">83.7764000000006</literal></expr>, <expr><literal type="number">80.9698000000008</literal></expr>,
          <expr><literal type="number">72.8574000000008</literal></expr>, <expr><literal type="number">73.1615999999995</literal></expr>, <expr><literal type="number">67.5838000000003</literal></expr>, <expr><literal type="number">62.6263999999992</literal></expr>, <expr><literal type="number">63.2638000000006</literal></expr>,
          <expr><literal type="number">66.0977999999996</literal></expr>, <expr><literal type="number">52.0843999999997</literal></expr>, <expr><literal type="number">58.9956000000002</literal></expr>, <expr><literal type="number">47.0912000000008</literal></expr>, <expr><literal type="number">46.4956000000002</literal></expr>,
          <expr><literal type="number">48.4383999999991</literal></expr>, <expr><literal type="number">47.1082000000006</literal></expr>, <expr><literal type="number">43.2392</literal></expr>, <expr><literal type="number">37.2759999999998</literal></expr>, <expr><literal type="number">40.0283999999992</literal></expr>,
          <expr><literal type="number">35.1864000000005</literal></expr>, <expr><literal type="number">35.8595999999998</literal></expr>, <expr><literal type="number">32.0998</literal></expr>, <expr><literal type="number">28.027</literal></expr>, <expr><literal type="number">23.6694000000007</literal></expr>, <expr><literal type="number">33.8266000000003</literal></expr>,
          <expr><literal type="number">26.3736000000008</literal></expr>, <expr><literal type="number">27.2008000000005</literal></expr>, <expr><literal type="number">21.3245999999999</literal></expr>, <expr><literal type="number">26.4115999999995</literal></expr>, <expr><literal type="number">23.4521999999997</literal></expr>,
          <expr><literal type="number">19.5013999999992</literal></expr>, <expr><literal type="number">19.8513999999996</literal></expr>, <expr><literal type="number">10.7492000000002</literal></expr>, <expr><literal type="number">18.6424000000006</literal></expr>, <expr><literal type="number">13.1265999999996</literal></expr>,
          <expr><literal type="number">18.2436000000016</literal></expr>, <expr><literal type="number">6.71860000000015</literal></expr>, <expr><literal type="number">3.39459999999963</literal></expr>, <expr><literal type="number">6.33759999999893</literal></expr>, <expr><literal type="number">7.76719999999841</literal></expr>,
          <expr><literal type="number">0.813999999998487</literal></expr>, <expr><literal type="number">3.82819999999992</literal></expr>, <expr><literal type="number">0.826199999999517</literal></expr>, <expr><literal type="number">8.07440000000133</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.59080000000176</literal></expr>, <expr><literal type="number">5.01780000000144</literal></expr>, <expr><literal type="number">0.455399999998917</literal></expr>, <expr><operator>-</operator><literal type="number">0.24199999999837</literal></expr>,
          <expr><literal type="number">0.174800000000687</literal></expr>, <expr><operator>-</operator><literal type="number">9.07640000000174</literal></expr>, <expr><operator>-</operator><literal type="number">4.20160000000033</literal></expr>, <expr><operator>-</operator><literal type="number">3.77520000000004</literal></expr>,
          <expr><operator>-</operator><literal type="number">4.75179999999818</literal></expr>, <expr><operator>-</operator><literal type="number">5.3724000000002</literal></expr>, <expr><operator>-</operator><literal type="number">8.90680000000066</literal></expr>, <expr><operator>-</operator><literal type="number">6.10239999999976</literal></expr>,
          <expr><operator>-</operator><literal type="number">5.74120000000039</literal></expr>, <expr><operator>-</operator><literal type="number">9.95339999999851</literal></expr>, <expr><operator>-</operator><literal type="number">3.86339999999836</literal></expr>, <expr><operator>-</operator><literal type="number">13.7304000000004</literal></expr>,
          <expr><operator>-</operator><literal type="number">16.2710000000006</literal></expr>, <expr><operator>-</operator><literal type="number">7.51359999999841</literal></expr>, <expr><operator>-</operator><literal type="number">3.30679999999847</literal></expr>, <expr><operator>-</operator><literal type="number">13.1339999999982</literal></expr>,
          <expr><operator>-</operator><literal type="number">10.0551999999989</literal></expr>, <expr><operator>-</operator><literal type="number">6.72019999999975</literal></expr>, <expr><operator>-</operator><literal type="number">8.59660000000076</literal></expr>, <expr><operator>-</operator><literal type="number">10.9307999999983</literal></expr>,
          <expr><operator>-</operator><literal type="number">1.8775999999998</literal></expr>, <expr><operator>-</operator><literal type="number">4.82259999999951</literal></expr>, <expr><operator>-</operator><literal type="number">13.7788</literal></expr>, <expr><operator>-</operator><literal type="number">21.6470000000008</literal></expr>, <expr><operator>-</operator><literal type="number">10.6735999999983</literal></expr>,
          <expr><operator>-</operator><literal type="number">15.7799999999988</literal></expr>,}</block></expr>,
      <comment type="line">// precision 13</comment>
      <expr><block>{<expr><literal type="number">5907.5052</literal></expr>, <expr><literal type="number">5802.2672</literal></expr>, <expr><literal type="number">5697.347</literal></expr>, <expr><literal type="number">5593.5794</literal></expr>, <expr><literal type="number">5491.2622</literal></expr>, <expr><literal type="number">5390.5514</literal></expr>, <expr><literal type="number">5290.3376</literal></expr>, <expr><literal type="number">5191.6952</literal></expr>,
          <expr><literal type="number">5093.5988</literal></expr>, <expr><literal type="number">4997.3552</literal></expr>, <expr><literal type="number">4902.5972</literal></expr>, <expr><literal type="number">4808.3082</literal></expr>, <expr><literal type="number">4715.5646</literal></expr>, <expr><literal type="number">4624.109</literal></expr>, <expr><literal type="number">4533.8216</literal></expr>, <expr><literal type="number">4444.4344</literal></expr>,
          <expr><literal type="number">4356.3802</literal></expr>, <expr><literal type="number">4269.2962</literal></expr>, <expr><literal type="number">4183.3784</literal></expr>, <expr><literal type="number">4098.292</literal></expr>, <expr><literal type="number">4014.79</literal></expr>, <expr><literal type="number">3932.4574</literal></expr>, <expr><literal type="number">3850.6036</literal></expr>, <expr><literal type="number">3771.2712</literal></expr>,
          <expr><literal type="number">3691.7708</literal></expr>, <expr><literal type="number">3615.099</literal></expr>, <expr><literal type="number">3538.1858</literal></expr>, <expr><literal type="number">3463.4746</literal></expr>, <expr><literal type="number">3388.8496</literal></expr>, <expr><literal type="number">3315.6794</literal></expr>, <expr><literal type="number">3244.5448</literal></expr>, <expr><literal type="number">3173.7516</literal></expr>,
          <expr><literal type="number">3103.3106</literal></expr>, <expr><literal type="number">3033.6094</literal></expr>, <expr><literal type="number">2966.5642</literal></expr>, <expr><literal type="number">2900.794</literal></expr>, <expr><literal type="number">2833.7256</literal></expr>, <expr><literal type="number">2769.81</literal></expr>, <expr><literal type="number">2707.3196</literal></expr>, <expr><literal type="number">2644.0778</literal></expr>,
          <expr><literal type="number">2583.9916</literal></expr>, <expr><literal type="number">2523.4662</literal></expr>, <expr><literal type="number">2464.124</literal></expr>, <expr><literal type="number">2406.073</literal></expr>, <expr><literal type="number">2347.0362</literal></expr>, <expr><literal type="number">2292.1006</literal></expr>, <expr><literal type="number">2238.1716</literal></expr>, <expr><literal type="number">2182.7514</literal></expr>,
          <expr><literal type="number">2128.4884</literal></expr>, <expr><literal type="number">2077.1314</literal></expr>, <expr><literal type="number">2025.037</literal></expr>, <expr><literal type="number">1975.3756</literal></expr>, <expr><literal type="number">1928.933</literal></expr>, <expr><literal type="number">1879.311</literal></expr>, <expr><literal type="number">1831.0006</literal></expr>, <expr><literal type="number">1783.2144</literal></expr>,
          <expr><literal type="number">1738.3096</literal></expr>, <expr><literal type="number">1694.5144</literal></expr>, <expr><literal type="number">1649.024</literal></expr>, <expr><literal type="number">1606.847</literal></expr>, <expr><literal type="number">1564.7528</literal></expr>, <expr><literal type="number">1525.3168</literal></expr>, <expr><literal type="number">1482.5372</literal></expr>, <expr><literal type="number">1443.9668</literal></expr>,
          <expr><literal type="number">1406.5074</literal></expr>, <expr><literal type="number">1365.867</literal></expr>, <expr><literal type="number">1329.2186</literal></expr>, <expr><literal type="number">1295.4186</literal></expr>, <expr><literal type="number">1257.9716</literal></expr>, <expr><literal type="number">1225.339</literal></expr>, <expr><literal type="number">1193.2972</literal></expr>, <expr><literal type="number">1156.3578</literal></expr>,
          <expr><literal type="number">1125.8686</literal></expr>, <expr><literal type="number">1091.187</literal></expr>, <expr><literal type="number">1061.4094</literal></expr>, <expr><literal type="number">1029.4188</literal></expr>, <expr><literal type="number">1000.9126</literal></expr>, <expr><literal type="number">972.3272</literal></expr>, <expr><literal type="number">944.004199999999</literal></expr>,
          <expr><literal type="number">915.7592</literal></expr>, <expr><literal type="number">889.965</literal></expr>, <expr><literal type="number">862.834200000001</literal></expr>, <expr><literal type="number">840.4254</literal></expr>, <expr><literal type="number">812.598399999999</literal></expr>, <expr><literal type="number">785.924200000001</literal></expr>,
          <expr><literal type="number">763.050999999999</literal></expr>, <expr><literal type="number">741.793799999999</literal></expr>, <expr><literal type="number">721.466</literal></expr>, <expr><literal type="number">699.040799999999</literal></expr>, <expr><literal type="number">677.997200000002</literal></expr>,
          <expr><literal type="number">649.866999999998</literal></expr>, <expr><literal type="number">634.911800000002</literal></expr>, <expr><literal type="number">609.8694</literal></expr>, <expr><literal type="number">591.981599999999</literal></expr>, <expr><literal type="number">570.2922</literal></expr>,
          <expr><literal type="number">557.129199999999</literal></expr>, <expr><literal type="number">538.3858</literal></expr>, <expr><literal type="number">521.872599999999</literal></expr>, <expr><literal type="number">502.951400000002</literal></expr>, <expr><literal type="number">495.776399999999</literal></expr>,
          <expr><literal type="number">475.171399999999</literal></expr>, <expr><literal type="number">459.751</literal></expr>, <expr><literal type="number">439.995200000001</literal></expr>, <expr><literal type="number">426.708999999999</literal></expr>, <expr><literal type="number">413.7016</literal></expr>, <expr><literal type="number">402.3868</literal></expr>,
          <expr><literal type="number">387.262599999998</literal></expr>, <expr><literal type="number">372.0524</literal></expr>, <expr><literal type="number">357.050999999999</literal></expr>, <expr><literal type="number">342.5098</literal></expr>, <expr><literal type="number">334.849200000001</literal></expr>,
          <expr><literal type="number">322.529399999999</literal></expr>, <expr><literal type="number">311.613799999999</literal></expr>, <expr><literal type="number">295.848000000002</literal></expr>, <expr><literal type="number">289.273000000001</literal></expr>, <expr><literal type="number">274.093000000001</literal></expr>,
          <expr><literal type="number">263.329600000001</literal></expr>, <expr><literal type="number">251.389599999999</literal></expr>, <expr><literal type="number">245.7392</literal></expr>, <expr><literal type="number">231.9614</literal></expr>, <expr><literal type="number">229.7952</literal></expr>, <expr><literal type="number">217.155200000001</literal></expr>,
          <expr><literal type="number">208.9588</literal></expr>, <expr><literal type="number">199.016599999999</literal></expr>, <expr><literal type="number">190.839199999999</literal></expr>, <expr><literal type="number">180.6976</literal></expr>, <expr><literal type="number">176.272799999999</literal></expr>,
          <expr><literal type="number">166.976999999999</literal></expr>, <expr><literal type="number">162.5252</literal></expr>, <expr><literal type="number">151.196400000001</literal></expr>, <expr><literal type="number">149.386999999999</literal></expr>, <expr><literal type="number">133.981199999998</literal></expr>,
          <expr><literal type="number">130.0586</literal></expr>, <expr><literal type="number">130.164000000001</literal></expr>, <expr><literal type="number">122.053400000001</literal></expr>, <expr><literal type="number">110.7428</literal></expr>, <expr><literal type="number">108.1276</literal></expr>, <expr><literal type="number">106.232400000001</literal></expr>,
          <expr><literal type="number">100.381600000001</literal></expr>, <expr><literal type="number">98.7668000000012</literal></expr>, <expr><literal type="number">86.6440000000002</literal></expr>, <expr><literal type="number">79.9768000000004</literal></expr>, <expr><literal type="number">82.4722000000002</literal></expr>,
          <expr><literal type="number">68.7026000000005</literal></expr>, <expr><literal type="number">70.1186000000016</literal></expr>, <expr><literal type="number">71.9948000000004</literal></expr>, <expr><literal type="number">58.998599999999</literal></expr>, <expr><literal type="number">59.0492000000013</literal></expr>,
          <expr><literal type="number">56.9818000000014</literal></expr>, <expr><literal type="number">47.5338000000011</literal></expr>, <expr><literal type="number">42.9928</literal></expr>, <expr><literal type="number">51.1591999999982</literal></expr>, <expr><literal type="number">37.2740000000013</literal></expr>,
          <expr><literal type="number">42.7220000000016</literal></expr>, <expr><literal type="number">31.3734000000004</literal></expr>, <expr><literal type="number">26.8090000000011</literal></expr>, <expr><literal type="number">25.8934000000008</literal></expr>, <expr><literal type="number">26.5286000000015</literal></expr>,
          <expr><literal type="number">29.5442000000003</literal></expr>, <expr><literal type="number">19.3503999999994</literal></expr>, <expr><literal type="number">26.0760000000009</literal></expr>, <expr><literal type="number">17.9527999999991</literal></expr>, <expr><literal type="number">14.8419999999969</literal></expr>,
          <expr><literal type="number">10.4683999999979</literal></expr>, <expr><literal type="number">8.65899999999965</literal></expr>, <expr><literal type="number">9.86720000000059</literal></expr>, <expr><literal type="number">4.34139999999752</literal></expr>,
          <expr><operator>-</operator><literal type="number">0.907800000000861</literal></expr>, <expr><operator>-</operator><literal type="number">3.32080000000133</literal></expr>, <expr><operator>-</operator><literal type="number">0.936199999996461</literal></expr>, <expr><operator>-</operator><literal type="number">11.9916000000012</literal></expr>,
          <expr><operator>-</operator><literal type="number">8.87000000000262</literal></expr>, <expr><operator>-</operator><literal type="number">6.33099999999831</literal></expr>, <expr><operator>-</operator><literal type="number">11.3366000000024</literal></expr>, <expr><operator>-</operator><literal type="number">15.9207999999999</literal></expr>,
          <expr><operator>-</operator><literal type="number">9.34659999999712</literal></expr>, <expr><operator>-</operator><literal type="number">15.5034000000014</literal></expr>, <expr><operator>-</operator><literal type="number">19.2097999999969</literal></expr>, <expr><operator>-</operator><literal type="number">15.357799999998</literal></expr>,
          <expr><operator>-</operator><literal type="number">28.2235999999975</literal></expr>, <expr><operator>-</operator><literal type="number">30.6898000000001</literal></expr>, <expr><operator>-</operator><literal type="number">19.3271999999997</literal></expr>, <expr><operator>-</operator><literal type="number">25.6083999999973</literal></expr>,
          <expr><operator>-</operator><literal type="number">24.409599999999</literal></expr>, <expr><operator>-</operator><literal type="number">13.6385999999984</literal></expr>, <expr><operator>-</operator><literal type="number">33.4473999999973</literal></expr>, <expr><operator>-</operator><literal type="number">32.6949999999997</literal></expr>,
          <expr><operator>-</operator><literal type="number">28.9063999999998</literal></expr>, <expr><operator>-</operator><literal type="number">31.7483999999968</literal></expr>, <expr><operator>-</operator><literal type="number">32.2935999999972</literal></expr>, <expr><operator>-</operator><literal type="number">35.8329999999987</literal></expr>,
          <expr><operator>-</operator><literal type="number">47.620600000002</literal></expr>, <expr><operator>-</operator><literal type="number">39.0855999999985</literal></expr>, <expr><operator>-</operator><literal type="number">33.1434000000008</literal></expr>, <expr><operator>-</operator><literal type="number">46.1371999999974</literal></expr>,
          <expr><operator>-</operator><literal type="number">37.5892000000022</literal></expr>, <expr><operator>-</operator><literal type="number">46.8164000000033</literal></expr>, <expr><operator>-</operator><literal type="number">47.3142000000007</literal></expr>, <expr><operator>-</operator><literal type="number">60.2914000000019</literal></expr>,
          <expr><operator>-</operator><literal type="number">37.7575999999972</literal></expr>,}</block></expr>,
      <comment type="line">// precision 14</comment>
      <expr><block>{<expr><literal type="number">11816.475</literal></expr>, <expr><literal type="number">11605.0046</literal></expr>, <expr><literal type="number">11395.3792</literal></expr>, <expr><literal type="number">11188.7504</literal></expr>, <expr><literal type="number">10984.1814</literal></expr>, <expr><literal type="number">10782.0086</literal></expr>, <expr><literal type="number">10582.0072</literal></expr>, <expr><literal type="number">10384.503</literal></expr>,
          <expr><literal type="number">10189.178</literal></expr>, <expr><literal type="number">9996.2738</literal></expr>, <expr><literal type="number">9806.0344</literal></expr>, <expr><literal type="number">9617.9798</literal></expr>, <expr><literal type="number">9431.394</literal></expr>, <expr><literal type="number">9248.7784</literal></expr>, <expr><literal type="number">9067.6894</literal></expr>, <expr><literal type="number">8889.6824</literal></expr>,
          <expr><literal type="number">8712.9134</literal></expr>, <expr><literal type="number">8538.8624</literal></expr>, <expr><literal type="number">8368.4944</literal></expr>, <expr><literal type="number">8197.7956</literal></expr>, <expr><literal type="number">8031.8916</literal></expr>, <expr><literal type="number">7866.6316</literal></expr>, <expr><literal type="number">7703.733</literal></expr>, <expr><literal type="number">7544.5726</literal></expr>,
          <expr><literal type="number">7386.204</literal></expr>, <expr><literal type="number">7230.666</literal></expr>, <expr><literal type="number">7077.8516</literal></expr>, <expr><literal type="number">6926.7886</literal></expr>, <expr><literal type="number">6778.6902</literal></expr>, <expr><literal type="number">6631.9632</literal></expr>, <expr><literal type="number">6487.304</literal></expr>, <expr><literal type="number">6346.7486</literal></expr>,
          <expr><literal type="number">6206.4408</literal></expr>, <expr><literal type="number">6070.202</literal></expr>, <expr><literal type="number">5935.2576</literal></expr>, <expr><literal type="number">5799.924</literal></expr>, <expr><literal type="number">5671.0324</literal></expr>, <expr><literal type="number">5541.9788</literal></expr>, <expr><literal type="number">5414.6112</literal></expr>, <expr><literal type="number">5290.0274</literal></expr>,
          <expr><literal type="number">5166.723</literal></expr>, <expr><literal type="number">5047.6906</literal></expr>, <expr><literal type="number">4929.162</literal></expr>, <expr><literal type="number">4815.1406</literal></expr>, <expr><literal type="number">4699.127</literal></expr>, <expr><literal type="number">4588.5606</literal></expr>, <expr><literal type="number">4477.7394</literal></expr>, <expr><literal type="number">4369.4014</literal></expr>,
          <expr><literal type="number">4264.2728</literal></expr>, <expr><literal type="number">4155.9224</literal></expr>, <expr><literal type="number">4055.581</literal></expr>, <expr><literal type="number">3955.505</literal></expr>, <expr><literal type="number">3856.9618</literal></expr>, <expr><literal type="number">3761.3828</literal></expr>, <expr><literal type="number">3666.9702</literal></expr>, <expr><literal type="number">3575.7764</literal></expr>,
          <expr><literal type="number">3482.4132</literal></expr>, <expr><literal type="number">3395.0186</literal></expr>, <expr><literal type="number">3305.8852</literal></expr>, <expr><literal type="number">3221.415</literal></expr>, <expr><literal type="number">3138.6024</literal></expr>, <expr><literal type="number">3056.296</literal></expr>, <expr><literal type="number">2970.4494</literal></expr>, <expr><literal type="number">2896.1526</literal></expr>,
          <expr><literal type="number">2816.8008</literal></expr>, <expr><literal type="number">2740.2156</literal></expr>, <expr><literal type="number">2670.497</literal></expr>, <expr><literal type="number">2594.1458</literal></expr>, <expr><literal type="number">2527.111</literal></expr>, <expr><literal type="number">2460.8168</literal></expr>, <expr><literal type="number">2387.5114</literal></expr>, <expr><literal type="number">2322.9498</literal></expr>,
          <expr><literal type="number">2260.6752</literal></expr>, <expr><literal type="number">2194.2686</literal></expr>, <expr><literal type="number">2133.7792</literal></expr>, <expr><literal type="number">2074.767</literal></expr>, <expr><literal type="number">2015.204</literal></expr>, <expr><literal type="number">1959.4226</literal></expr>, <expr><literal type="number">1898.6502</literal></expr>, <expr><literal type="number">1850.006</literal></expr>,
          <expr><literal type="number">1792.849</literal></expr>, <expr><literal type="number">1741.4838</literal></expr>, <expr><literal type="number">1687.9778</literal></expr>, <expr><literal type="number">1638.1322</literal></expr>, <expr><literal type="number">1589.3266</literal></expr>, <expr><literal type="number">1543.1394</literal></expr>, <expr><literal type="number">1496.8266</literal></expr>, <expr><literal type="number">1447.8516</literal></expr>,
          <expr><literal type="number">1402.7354</literal></expr>, <expr><literal type="number">1361.9606</literal></expr>, <expr><literal type="number">1327.0692</literal></expr>, <expr><literal type="number">1285.4106</literal></expr>, <expr><literal type="number">1241.8112</literal></expr>, <expr><literal type="number">1201.6726</literal></expr>, <expr><literal type="number">1161.973</literal></expr>, <expr><literal type="number">1130.261</literal></expr>,
          <expr><literal type="number">1094.2036</literal></expr>, <expr><literal type="number">1048.2036</literal></expr>, <expr><literal type="number">1020.6436</literal></expr>, <expr><literal type="number">990.901400000002</literal></expr>, <expr><literal type="number">961.199800000002</literal></expr>, <expr><literal type="number">924.769800000002</literal></expr>,
          <expr><literal type="number">899.526400000002</literal></expr>, <expr><literal type="number">872.346400000002</literal></expr>, <expr><literal type="number">834.375</literal></expr>, <expr><literal type="number">810.432000000001</literal></expr>, <expr><literal type="number">780.659800000001</literal></expr>,
          <expr><literal type="number">756.013800000001</literal></expr>, <expr><literal type="number">733.479399999997</literal></expr>, <expr><literal type="number">707.923999999999</literal></expr>, <expr><literal type="number">673.858</literal></expr>, <expr><literal type="number">652.222399999999</literal></expr>,
          <expr><literal type="number">636.572399999997</literal></expr>, <expr><literal type="number">615.738599999997</literal></expr>, <expr><literal type="number">586.696400000001</literal></expr>, <expr><literal type="number">564.147199999999</literal></expr>, <expr><literal type="number">541.679600000003</literal></expr>,
          <expr><literal type="number">523.943599999999</literal></expr>, <expr><literal type="number">505.714599999999</literal></expr>, <expr><literal type="number">475.729599999999</literal></expr>, <expr><literal type="number">461.779600000002</literal></expr>, <expr><literal type="number">449.750800000002</literal></expr>,
          <expr><literal type="number">439.020799999998</literal></expr>, <expr><literal type="number">412.7886</literal></expr>, <expr><literal type="number">400.245600000002</literal></expr>, <expr><literal type="number">383.188199999997</literal></expr>, <expr><literal type="number">362.079599999997</literal></expr>,
          <expr><literal type="number">357.533799999997</literal></expr>, <expr><literal type="number">334.319000000003</literal></expr>, <expr><literal type="number">327.553399999997</literal></expr>, <expr><literal type="number">308.559399999998</literal></expr>, <expr><literal type="number">291.270199999999</literal></expr>,
          <expr><literal type="number">279.351999999999</literal></expr>, <expr><literal type="number">271.791400000002</literal></expr>, <expr><literal type="number">252.576999999997</literal></expr>, <expr><literal type="number">247.482400000001</literal></expr>, <expr><literal type="number">236.174800000001</literal></expr>,
          <expr><literal type="number">218.774599999997</literal></expr>, <expr><literal type="number">220.155200000001</literal></expr>, <expr><literal type="number">208.794399999999</literal></expr>, <expr><literal type="number">201.223599999998</literal></expr>, <expr><literal type="number">182.995600000002</literal></expr>,
          <expr><literal type="number">185.5268</literal></expr>, <expr><literal type="number">164.547400000003</literal></expr>, <expr><literal type="number">176.5962</literal></expr>, <expr><literal type="number">150.689599999998</literal></expr>, <expr><literal type="number">157.8004</literal></expr>, <expr><literal type="number">138.378799999999</literal></expr>,
          <expr><literal type="number">134.021200000003</literal></expr>, <expr><literal type="number">117.614399999999</literal></expr>, <expr><literal type="number">108.194000000003</literal></expr>, <expr><literal type="number">97.0696000000025</literal></expr>, <expr><literal type="number">89.6042000000016</literal></expr>,
          <expr><literal type="number">95.6030000000028</literal></expr>, <expr><literal type="number">84.7810000000027</literal></expr>, <expr><literal type="number">72.635000000002</literal></expr>, <expr><literal type="number">77.3482000000004</literal></expr>, <expr><literal type="number">59.4907999999996</literal></expr>,
          <expr><literal type="number">55.5875999999989</literal></expr>, <expr><literal type="number">50.7346000000034</literal></expr>, <expr><literal type="number">61.3916000000027</literal></expr>, <expr><literal type="number">50.9149999999936</literal></expr>, <expr><literal type="number">39.0384000000049</literal></expr>,
          <expr><literal type="number">58.9395999999979</literal></expr>, <expr><literal type="number">29.633600000001</literal></expr>, <expr><literal type="number">28.2032000000036</literal></expr>, <expr><literal type="number">26.0078000000067</literal></expr>, <expr><literal type="number">17.0387999999948</literal></expr>,
          <expr><literal type="number">9.22000000000116</literal></expr>, <expr><literal type="number">13.8387999999977</literal></expr>, <expr><literal type="number">8.07240000000456</literal></expr>, <expr><literal type="number">14.1549999999988</literal></expr>, <expr><literal type="number">15.3570000000036</literal></expr>,
          <expr><literal type="number">3.42660000000615</literal></expr>, <expr><literal type="number">6.24820000000182</literal></expr>, <expr><operator>-</operator><literal type="number">2.96940000000177</literal></expr>, <expr><operator>-</operator><literal type="number">8.79940000000352</literal></expr>,
          <expr><operator>-</operator><literal type="number">5.97860000000219</literal></expr>, <expr><operator>-</operator><literal type="number">14.4048000000039</literal></expr>, <expr><operator>-</operator><literal type="number">3.4143999999942</literal></expr>, <expr><operator>-</operator><literal type="number">13.0148000000045</literal></expr>,
          <expr><operator>-</operator><literal type="number">11.6977999999945</literal></expr>, <expr><operator>-</operator><literal type="number">25.7878000000055</literal></expr>, <expr><operator>-</operator><literal type="number">22.3185999999987</literal></expr>, <expr><operator>-</operator><literal type="number">24.409599999999</literal></expr>,
          <expr><operator>-</operator><literal type="number">31.9756000000052</literal></expr>, <expr><operator>-</operator><literal type="number">18.9722000000038</literal></expr>, <expr><operator>-</operator><literal type="number">22.8678000000073</literal></expr>, <expr><operator>-</operator><literal type="number">30.8972000000067</literal></expr>,
          <expr><operator>-</operator><literal type="number">32.3715999999986</literal></expr>, <expr><operator>-</operator><literal type="number">22.3907999999938</literal></expr>, <expr><operator>-</operator><literal type="number">43.6720000000059</literal></expr>, <expr><operator>-</operator><literal type="number">35.9038</literal></expr>, <expr><operator>-</operator><literal type="number">39.7492000000057</literal></expr>,
          <expr><operator>-</operator><literal type="number">54.1641999999993</literal></expr>, <expr><operator>-</operator><literal type="number">45.2749999999942</literal></expr>, <expr><operator>-</operator><literal type="number">42.2989999999991</literal></expr>, <expr><operator>-</operator><literal type="number">44.1089999999967</literal></expr>,
          <expr><operator>-</operator><literal type="number">64.3564000000042</literal></expr>, <expr><operator>-</operator><literal type="number">49.9551999999967</literal></expr>, <expr><operator>-</operator><literal type="number">42.6116000000038</literal></expr>,}</block></expr>,
      <comment type="line">// precision 15</comment>
      <expr><block>{<expr><literal type="number">23634.0036</literal></expr>, <expr><literal type="number">23210.8034</literal></expr>, <expr><literal type="number">22792.4744</literal></expr>, <expr><literal type="number">22379.1524</literal></expr>, <expr><literal type="number">21969.7928</literal></expr>, <expr><literal type="number">21565.326</literal></expr>, <expr><literal type="number">21165.3532</literal></expr>,
          <expr><literal type="number">20770.2806</literal></expr>, <expr><literal type="number">20379.9892</literal></expr>, <expr><literal type="number">19994.7098</literal></expr>, <expr><literal type="number">19613.318</literal></expr>, <expr><literal type="number">19236.799</literal></expr>, <expr><literal type="number">18865.4382</literal></expr>, <expr><literal type="number">18498.8244</literal></expr>,
          <expr><literal type="number">18136.5138</literal></expr>, <expr><literal type="number">17778.8668</literal></expr>, <expr><literal type="number">17426.2344</literal></expr>, <expr><literal type="number">17079.32</literal></expr>, <expr><literal type="number">16734.778</literal></expr>, <expr><literal type="number">16397.2418</literal></expr>, <expr><literal type="number">16063.3324</literal></expr>,
          <expr><literal type="number">15734.0232</literal></expr>, <expr><literal type="number">15409.731</literal></expr>, <expr><literal type="number">15088.728</literal></expr>, <expr><literal type="number">14772.9896</literal></expr>, <expr><literal type="number">14464.1402</literal></expr>, <expr><literal type="number">14157.5588</literal></expr>, <expr><literal type="number">13855.5958</literal></expr>,
          <expr><literal type="number">13559.3296</literal></expr>, <expr><literal type="number">13264.9096</literal></expr>, <expr><literal type="number">12978.326</literal></expr>, <expr><literal type="number">12692.0826</literal></expr>, <expr><literal type="number">12413.8816</literal></expr>, <expr><literal type="number">12137.3192</literal></expr>, <expr><literal type="number">11870.2326</literal></expr>,
          <expr><literal type="number">11602.5554</literal></expr>, <expr><literal type="number">11340.3142</literal></expr>, <expr><literal type="number">11079.613</literal></expr>, <expr><literal type="number">10829.5908</literal></expr>, <expr><literal type="number">10583.5466</literal></expr>, <expr><literal type="number">10334.0344</literal></expr>, <expr><literal type="number">10095.5072</literal></expr>,
          <expr><literal type="number">9859.694</literal></expr>, <expr><literal type="number">9625.2822</literal></expr>, <expr><literal type="number">9395.7862</literal></expr>, <expr><literal type="number">9174.0586</literal></expr>, <expr><literal type="number">8957.3164</literal></expr>, <expr><literal type="number">8738.064</literal></expr>, <expr><literal type="number">8524.155</literal></expr>, <expr><literal type="number">8313.7396</literal></expr>,
          <expr><literal type="number">8116.9168</literal></expr>, <expr><literal type="number">7913.542</literal></expr>, <expr><literal type="number">7718.4778</literal></expr>, <expr><literal type="number">7521.65</literal></expr>, <expr><literal type="number">7335.5596</literal></expr>, <expr><literal type="number">7154.2906</literal></expr>, <expr><literal type="number">6968.7396</literal></expr>, <expr><literal type="number">6786.3996</literal></expr>,
          <expr><literal type="number">6613.236</literal></expr>, <expr><literal type="number">6437.406</literal></expr>, <expr><literal type="number">6270.6598</literal></expr>, <expr><literal type="number">6107.7958</literal></expr>, <expr><literal type="number">5945.7174</literal></expr>, <expr><literal type="number">5787.6784</literal></expr>, <expr><literal type="number">5635.5784</literal></expr>, <expr><literal type="number">5482.308</literal></expr>,
          <expr><literal type="number">5337.9784</literal></expr>, <expr><literal type="number">5190.0864</literal></expr>, <expr><literal type="number">5045.9158</literal></expr>, <expr><literal type="number">4919.1386</literal></expr>, <expr><literal type="number">4771.817</literal></expr>, <expr><literal type="number">4645.7742</literal></expr>, <expr><literal type="number">4518.4774</literal></expr>, <expr><literal type="number">4385.5454</literal></expr>,
          <expr><literal type="number">4262.6622</literal></expr>, <expr><literal type="number">4142.74679999999</literal></expr>, <expr><literal type="number">4015.5318</literal></expr>, <expr><literal type="number">3897.9276</literal></expr>, <expr><literal type="number">3790.7764</literal></expr>, <expr><literal type="number">3685.13800000001</literal></expr>, <expr><literal type="number">3573.6274</literal></expr>,
          <expr><literal type="number">3467.9706</literal></expr>, <expr><literal type="number">3368.61079999999</literal></expr>, <expr><literal type="number">3271.5202</literal></expr>, <expr><literal type="number">3170.3848</literal></expr>, <expr><literal type="number">3076.4656</literal></expr>, <expr><literal type="number">2982.38400000001</literal></expr>, <expr><literal type="number">2888.4664</literal></expr>,
          <expr><literal type="number">2806.4868</literal></expr>, <expr><literal type="number">2711.9564</literal></expr>, <expr><literal type="number">2634.1434</literal></expr>, <expr><literal type="number">2551.3204</literal></expr>, <expr><literal type="number">2469.7662</literal></expr>, <expr><literal type="number">2396.61139999999</literal></expr>, <expr><literal type="number">2318.9902</literal></expr>,
          <expr><literal type="number">2243.8658</literal></expr>, <expr><literal type="number">2171.9246</literal></expr>, <expr><literal type="number">2105.01360000001</literal></expr>, <expr><literal type="number">2028.8536</literal></expr>, <expr><literal type="number">1960.9952</literal></expr>, <expr><literal type="number">1901.4096</literal></expr>, <expr><literal type="number">1841.86079999999</literal></expr>,
          <expr><literal type="number">1777.54700000001</literal></expr>, <expr><literal type="number">1714.5802</literal></expr>, <expr><literal type="number">1654.65059999999</literal></expr>, <expr><literal type="number">1596.311</literal></expr>, <expr><literal type="number">1546.2016</literal></expr>, <expr><literal type="number">1492.3296</literal></expr>, <expr><literal type="number">1433.8974</literal></expr>,
          <expr><literal type="number">1383.84600000001</literal></expr>, <expr><literal type="number">1339.4152</literal></expr>, <expr><literal type="number">1293.5518</literal></expr>, <expr><literal type="number">1245.8686</literal></expr>, <expr><literal type="number">1193.50659999999</literal></expr>, <expr><literal type="number">1162.27959999999</literal></expr>,
          <expr><literal type="number">1107.19439999999</literal></expr>, <expr><literal type="number">1069.18060000001</literal></expr>, <expr><literal type="number">1035.09179999999</literal></expr>, <expr><literal type="number">999.679000000004</literal></expr>, <expr><literal type="number">957.679999999993</literal></expr>,
          <expr><literal type="number">925.300199999998</literal></expr>, <expr><literal type="number">888.099400000006</literal></expr>, <expr><literal type="number">848.638600000006</literal></expr>, <expr><literal type="number">818.156400000007</literal></expr>, <expr><literal type="number">796.748399999997</literal></expr>,
          <expr><literal type="number">752.139200000005</literal></expr>, <expr><literal type="number">725.271200000003</literal></expr>, <expr><literal type="number">692.216</literal></expr>, <expr><literal type="number">671.633600000001</literal></expr>, <expr><literal type="number">647.939799999993</literal></expr>,
          <expr><literal type="number">621.670599999998</literal></expr>, <expr><literal type="number">575.398799999995</literal></expr>, <expr><literal type="number">561.226599999995</literal></expr>, <expr><literal type="number">532.237999999998</literal></expr>, <expr><literal type="number">521.787599999996</literal></expr>,
          <expr><literal type="number">483.095799999996</literal></expr>, <expr><literal type="number">467.049599999998</literal></expr>, <expr><literal type="number">465.286399999997</literal></expr>, <expr><literal type="number">415.548599999995</literal></expr>, <expr><literal type="number">401.047399999996</literal></expr>,
          <expr><literal type="number">380.607999999993</literal></expr>, <expr><literal type="number">377.362599999993</literal></expr>, <expr><literal type="number">347.258799999996</literal></expr>, <expr><literal type="number">338.371599999999</literal></expr>, <expr><literal type="number">310.096999999994</literal></expr>,
          <expr><literal type="number">301.409199999995</literal></expr>, <expr><literal type="number">276.280799999993</literal></expr>, <expr><literal type="number">265.586800000005</literal></expr>, <expr><literal type="number">258.994399999996</literal></expr>, <expr><literal type="number">223.915999999997</literal></expr>,
          <expr><literal type="number">215.925399999993</literal></expr>, <expr><literal type="number">213.503800000006</literal></expr>, <expr><literal type="number">191.045400000003</literal></expr>, <expr><literal type="number">166.718200000003</literal></expr>, <expr><literal type="number">166.259000000005</literal></expr>,
          <expr><literal type="number">162.941200000001</literal></expr>, <expr><literal type="number">148.829400000002</literal></expr>, <expr><literal type="number">141.645999999993</literal></expr>, <expr><literal type="number">123.535399999993</literal></expr>, <expr><literal type="number">122.329800000007</literal></expr>,
          <expr><literal type="number">89.473399999988</literal></expr>, <expr><literal type="number">80.1962000000058</literal></expr>, <expr><literal type="number">77.5457999999926</literal></expr>, <expr><literal type="number">59.1056000000099</literal></expr>, <expr><literal type="number">83.3509999999951</literal></expr>,
          <expr><literal type="number">52.2906000000075</literal></expr>, <expr><literal type="number">36.3979999999865</literal></expr>, <expr><literal type="number">40.6558000000077</literal></expr>, <expr><literal type="number">42.0003999999899</literal></expr>, <expr><literal type="number">19.6630000000005</literal></expr>,
          <expr><literal type="number">19.7153999999864</literal></expr>, <expr><operator>-</operator><literal type="number">8.38539999999921</literal></expr>, <expr><operator>-</operator><literal type="number">0.692799999989802</literal></expr>, <expr><literal type="number">0.854800000000978</literal></expr>,
          <expr><literal type="number">3.23219999999856</literal></expr>, <expr><operator>-</operator><literal type="number">3.89040000000386</literal></expr>, <expr><operator>-</operator><literal type="number">5.25880000001052</literal></expr>, <expr><operator>-</operator><literal type="number">24.9052000000083</literal></expr>,
          <expr><operator>-</operator><literal type="number">22.6837999999989</literal></expr>, <expr><operator>-</operator><literal type="number">26.4286000000138</literal></expr>, <expr><operator>-</operator><literal type="number">34.997000000003</literal></expr>, <expr><operator>-</operator><literal type="number">37.0216000000073</literal></expr>,
          <expr><operator>-</operator><literal type="number">43.430400000012</literal></expr>, <expr><operator>-</operator><literal type="number">58.2390000000014</literal></expr>, <expr><operator>-</operator><literal type="number">68.8034000000043</literal></expr>, <expr><operator>-</operator><literal type="number">56.9245999999985</literal></expr>,
          <expr><operator>-</operator><literal type="number">57.8583999999973</literal></expr>, <expr><operator>-</operator><literal type="number">77.3097999999882</literal></expr>, <expr><operator>-</operator><literal type="number">73.2793999999994</literal></expr>, <expr><operator>-</operator><literal type="number">81.0738000000129</literal></expr>,
          <expr><operator>-</operator><literal type="number">87.4530000000086</literal></expr>, <expr><operator>-</operator><literal type="number">65.0254000000132</literal></expr>, <expr><operator>-</operator><literal type="number">57.296399999992</literal></expr>, <expr><operator>-</operator><literal type="number">96.2746000000043</literal></expr>, <expr><operator>-</operator><literal type="number">103.25</literal></expr>,
          <expr><operator>-</operator><literal type="number">96.081600000005</literal></expr>, <expr><operator>-</operator><literal type="number">91.5542000000132</literal></expr>, <expr><operator>-</operator><literal type="number">102.465200000006</literal></expr>, <expr><operator>-</operator><literal type="number">107.688599999994</literal></expr>,
          <expr><operator>-</operator><literal type="number">101.458000000013</literal></expr>, <expr><operator>-</operator><literal type="number">109.715800000005</literal></expr>,}</block></expr>,
      <comment type="line">// precision 16</comment>
      <expr><block>{<expr><literal type="number">47270</literal></expr>, <expr><literal type="number">46423.3584</literal></expr>, <expr><literal type="number">45585.7074</literal></expr>, <expr><literal type="number">44757.152</literal></expr>, <expr><literal type="number">43938.8416</literal></expr>, <expr><literal type="number">43130.9514</literal></expr>, <expr><literal type="number">42330.03</literal></expr>, <expr><literal type="number">41540.407</literal></expr>,
          <expr><literal type="number">40759.6348</literal></expr>, <expr><literal type="number">39988.206</literal></expr>, <expr><literal type="number">39226.5144</literal></expr>, <expr><literal type="number">38473.2096</literal></expr>, <expr><literal type="number">37729.795</literal></expr>, <expr><literal type="number">36997.268</literal></expr>, <expr><literal type="number">36272.6448</literal></expr>,
          <expr><literal type="number">35558.665</literal></expr>, <expr><literal type="number">34853.0248</literal></expr>, <expr><literal type="number">34157.4472</literal></expr>, <expr><literal type="number">33470.5204</literal></expr>, <expr><literal type="number">32793.5742</literal></expr>, <expr><literal type="number">32127.0194</literal></expr>, <expr><literal type="number">31469.4182</literal></expr>,
          <expr><literal type="number">30817.6136</literal></expr>, <expr><literal type="number">30178.6968</literal></expr>, <expr><literal type="number">29546.8908</literal></expr>, <expr><literal type="number">28922.8544</literal></expr>, <expr><literal type="number">28312.271</literal></expr>, <expr><literal type="number">27707.0924</literal></expr>, <expr><literal type="number">27114.0326</literal></expr>,
          <expr><literal type="number">26526.692</literal></expr>, <expr><literal type="number">25948.6336</literal></expr>, <expr><literal type="number">25383.7826</literal></expr>, <expr><literal type="number">24823.5998</literal></expr>, <expr><literal type="number">24272.2974</literal></expr>, <expr><literal type="number">23732.2572</literal></expr>, <expr><literal type="number">23201.4976</literal></expr>,
          <expr><literal type="number">22674.2796</literal></expr>, <expr><literal type="number">22163.6336</literal></expr>, <expr><literal type="number">21656.515</literal></expr>, <expr><literal type="number">21161.7362</literal></expr>, <expr><literal type="number">20669.9368</literal></expr>, <expr><literal type="number">20189.4424</literal></expr>, <expr><literal type="number">19717.3358</literal></expr>,
          <expr><literal type="number">19256.3744</literal></expr>, <expr><literal type="number">18795.9638</literal></expr>, <expr><literal type="number">18352.197</literal></expr>, <expr><literal type="number">17908.5738</literal></expr>, <expr><literal type="number">17474.391</literal></expr>, <expr><literal type="number">17052.918</literal></expr>, <expr><literal type="number">16637.2236</literal></expr>,
          <expr><literal type="number">16228.4602</literal></expr>, <expr><literal type="number">15823.3474</literal></expr>, <expr><literal type="number">15428.6974</literal></expr>, <expr><literal type="number">15043.0284</literal></expr>, <expr><literal type="number">14667.6278</literal></expr>, <expr><literal type="number">14297.4588</literal></expr>, <expr><literal type="number">13935.2882</literal></expr>,
          <expr><literal type="number">13578.5402</literal></expr>, <expr><literal type="number">13234.6032</literal></expr>, <expr><literal type="number">12882.1578</literal></expr>, <expr><literal type="number">12548.0728</literal></expr>, <expr><literal type="number">12219.231</literal></expr>, <expr><literal type="number">11898.0072</literal></expr>, <expr><literal type="number">11587.2626</literal></expr>,
          <expr><literal type="number">11279.9072</literal></expr>, <expr><literal type="number">10973.5048</literal></expr>, <expr><literal type="number">10678.5186</literal></expr>, <expr><literal type="number">10392.4876</literal></expr>, <expr><literal type="number">10105.2556</literal></expr>, <expr><literal type="number">9825.766</literal></expr>, <expr><literal type="number">9562.5444</literal></expr>,
          <expr><literal type="number">9294.2222</literal></expr>, <expr><literal type="number">9038.2352</literal></expr>, <expr><literal type="number">8784.848</literal></expr>, <expr><literal type="number">8533.2644</literal></expr>, <expr><literal type="number">8301.7776</literal></expr>, <expr><literal type="number">8058.30859999999</literal></expr>, <expr><literal type="number">7822.94579999999</literal></expr>,
          <expr><literal type="number">7599.11319999999</literal></expr>, <expr><literal type="number">7366.90779999999</literal></expr>, <expr><literal type="number">7161.217</literal></expr>, <expr><literal type="number">6957.53080000001</literal></expr>, <expr><literal type="number">6736.212</literal></expr>,
          <expr><literal type="number">6548.21220000001</literal></expr>, <expr><literal type="number">6343.06839999999</literal></expr>, <expr><literal type="number">6156.28719999999</literal></expr>, <expr><literal type="number">5975.15419999999</literal></expr>, <expr><literal type="number">5791.75719999999</literal></expr>,
          <expr><literal type="number">5621.32019999999</literal></expr>, <expr><literal type="number">5451.66</literal></expr>, <expr><literal type="number">5287.61040000001</literal></expr>, <expr><literal type="number">5118.09479999999</literal></expr>, <expr><literal type="number">4957.288</literal></expr>, <expr><literal type="number">4798.4246</literal></expr>,
          <expr><literal type="number">4662.17559999999</literal></expr>, <expr><literal type="number">4512.05900000001</literal></expr>, <expr><literal type="number">4364.68539999999</literal></expr>, <expr><literal type="number">4220.77720000001</literal></expr>, <expr><literal type="number">4082.67259999999</literal></expr>,
          <expr><literal type="number">3957.19519999999</literal></expr>, <expr><literal type="number">3842.15779999999</literal></expr>, <expr><literal type="number">3699.3328</literal></expr>, <expr><literal type="number">3583.01180000001</literal></expr>, <expr><literal type="number">3473.8964</literal></expr>,
          <expr><literal type="number">3338.66639999999</literal></expr>, <expr><literal type="number">3233.55559999999</literal></expr>, <expr><literal type="number">3117.799</literal></expr>, <expr><literal type="number">3008.111</literal></expr>, <expr><literal type="number">2909.69140000001</literal></expr>,
          <expr><literal type="number">2814.86499999999</literal></expr>, <expr><literal type="number">2719.46119999999</literal></expr>, <expr><literal type="number">2624.742</literal></expr>, <expr><literal type="number">2532.46979999999</literal></expr>, <expr><literal type="number">2444.7886</literal></expr>, <expr><literal type="number">2370.1868</literal></expr>,
          <expr><literal type="number">2272.45259999999</literal></expr>, <expr><literal type="number">2196.19260000001</literal></expr>, <expr><literal type="number">2117.90419999999</literal></expr>, <expr><literal type="number">2023.2972</literal></expr>, <expr><literal type="number">1969.76819999999</literal></expr>,
          <expr><literal type="number">1885.58979999999</literal></expr>, <expr><literal type="number">1833.2824</literal></expr>, <expr><literal type="number">1733.91200000001</literal></expr>, <expr><literal type="number">1682.54920000001</literal></expr>, <expr><literal type="number">1604.57980000001</literal></expr>,
          <expr><literal type="number">1556.11240000001</literal></expr>, <expr><literal type="number">1491.3064</literal></expr>, <expr><literal type="number">1421.71960000001</literal></expr>, <expr><literal type="number">1371.22899999999</literal></expr>, <expr><literal type="number">1322.1324</literal></expr>, <expr><literal type="number">1264.7892</literal></expr>,
          <expr><literal type="number">1196.23920000001</literal></expr>, <expr><literal type="number">1143.8474</literal></expr>, <expr><literal type="number">1088.67240000001</literal></expr>, <expr><literal type="number">1073.60380000001</literal></expr>, <expr><literal type="number">1023.11660000001</literal></expr>,
          <expr><literal type="number">959.036400000012</literal></expr>, <expr><literal type="number">927.433199999999</literal></expr>, <expr><literal type="number">906.792799999996</literal></expr>, <expr><literal type="number">853.433599999989</literal></expr>, <expr><literal type="number">841.873800000001</literal></expr>,
          <expr><literal type="number">791.1054</literal></expr>, <expr><literal type="number">756.899999999994</literal></expr>, <expr><literal type="number">704.343200000003</literal></expr>, <expr><literal type="number">672.495599999995</literal></expr>, <expr><literal type="number">622.790399999998</literal></expr>,
          <expr><literal type="number">611.254799999995</literal></expr>, <expr><literal type="number">567.283200000005</literal></expr>, <expr><literal type="number">519.406599999988</literal></expr>, <expr><literal type="number">519.188400000014</literal></expr>, <expr><literal type="number">495.312800000014</literal></expr>,
          <expr><literal type="number">451.350799999986</literal></expr>, <expr><literal type="number">443.973399999988</literal></expr>, <expr><literal type="number">431.882199999993</literal></expr>, <expr><literal type="number">392.027000000002</literal></expr>, <expr><literal type="number">380.924200000009</literal></expr>,
          <expr><literal type="number">345.128999999986</literal></expr>, <expr><literal type="number">298.901400000002</literal></expr>, <expr><literal type="number">287.771999999997</literal></expr>, <expr><literal type="number">272.625</literal></expr>, <expr><literal type="number">247.253000000026</literal></expr>,
          <expr><literal type="number">222.490600000019</literal></expr>, <expr><literal type="number">223.590000000026</literal></expr>, <expr><literal type="number">196.407599999977</literal></expr>, <expr><literal type="number">176.425999999978</literal></expr>, <expr><literal type="number">134.725199999986</literal></expr>,
          <expr><literal type="number">132.4804</literal></expr>, <expr><literal type="number">110.445599999977</literal></expr>, <expr><literal type="number">86.7939999999944</literal></expr>, <expr><literal type="number">56.7038000000175</literal></expr>, <expr><literal type="number">64.915399999998</literal></expr>,
          <expr><literal type="number">38.3726000000024</literal></expr>, <expr><literal type="number">37.1606000000029</literal></expr>, <expr><literal type="number">46.170999999973</literal></expr>, <expr><literal type="number">49.1716000000015</literal></expr>, <expr><literal type="number">15.3362000000197</literal></expr>,
          <expr><literal type="number">6.71639999997569</literal></expr>, <expr><operator>-</operator><literal type="number">34.8185999999987</literal></expr>, <expr><operator>-</operator><literal type="number">39.4476000000141</literal></expr>, <expr><literal type="number">12.6830000000191</literal></expr>,
          <expr><operator>-</operator><literal type="number">12.3331999999937</literal></expr>, <expr><operator>-</operator><literal type="number">50.6565999999875</literal></expr>, <expr><operator>-</operator><literal type="number">59.9538000000175</literal></expr>, <expr><operator>-</operator><literal type="number">65.1054000000004</literal></expr>,
          <expr><operator>-</operator><literal type="number">70.7576000000117</literal></expr>, <expr><operator>-</operator><literal type="number">106.325200000021</literal></expr>, <expr><operator>-</operator><literal type="number">126.852200000023</literal></expr>, <expr><operator>-</operator><literal type="number">110.227599999984</literal></expr>,
          <expr><operator>-</operator><literal type="number">132.885999999999</literal></expr>, <expr><operator>-</operator><literal type="number">113.897200000007</literal></expr>, <expr><operator>-</operator><literal type="number">142.713800000027</literal></expr>, <expr><operator>-</operator><literal type="number">151.145399999979</literal></expr>,
          <expr><operator>-</operator><literal type="number">150.799200000009</literal></expr>, <expr><operator>-</operator><literal type="number">177.756200000003</literal></expr>, <expr><operator>-</operator><literal type="number">156.036399999983</literal></expr>, <expr><operator>-</operator><literal type="number">182.735199999996</literal></expr>,
          <expr><operator>-</operator><literal type="number">177.259399999981</literal></expr>, <expr><operator>-</operator><literal type="number">198.663600000029</literal></expr>, <expr><operator>-</operator><literal type="number">174.577600000019</literal></expr>, <expr><operator>-</operator><literal type="number">193.84580000001</literal></expr>,}</block></expr>,
      <comment type="line">// precision 17</comment>
      <expr><block>{<expr><literal type="number">94541</literal></expr>, <expr><literal type="number">92848.811</literal></expr>, <expr><literal type="number">91174.019</literal></expr>, <expr><literal type="number">89517.558</literal></expr>, <expr><literal type="number">87879.9705</literal></expr>, <expr><literal type="number">86262.7565</literal></expr>, <expr><literal type="number">84663.5125</literal></expr>, <expr><literal type="number">83083.7435</literal></expr>,
          <expr><literal type="number">81521.7865</literal></expr>, <expr><literal type="number">79977.272</literal></expr>, <expr><literal type="number">78455.9465</literal></expr>, <expr><literal type="number">76950.219</literal></expr>, <expr><literal type="number">75465.432</literal></expr>, <expr><literal type="number">73994.152</literal></expr>, <expr><literal type="number">72546.71</literal></expr>, <expr><literal type="number">71115.2345</literal></expr>,
          <expr><literal type="number">69705.6765</literal></expr>, <expr><literal type="number">68314.937</literal></expr>, <expr><literal type="number">66944.2705</literal></expr>, <expr><literal type="number">65591.255</literal></expr>, <expr><literal type="number">64252.9485</literal></expr>, <expr><literal type="number">62938.016</literal></expr>, <expr><literal type="number">61636.8225</literal></expr>,
          <expr><literal type="number">60355.592</literal></expr>, <expr><literal type="number">59092.789</literal></expr>, <expr><literal type="number">57850.568</literal></expr>, <expr><literal type="number">56624.518</literal></expr>, <expr><literal type="number">55417.343</literal></expr>, <expr><literal type="number">54231.1415</literal></expr>, <expr><literal type="number">53067.387</literal></expr>, <expr><literal type="number">51903.526</literal></expr>,
          <expr><literal type="number">50774.649</literal></expr>, <expr><literal type="number">49657.6415</literal></expr>, <expr><literal type="number">48561.05</literal></expr>, <expr><literal type="number">47475.7575</literal></expr>, <expr><literal type="number">46410.159</literal></expr>, <expr><literal type="number">45364.852</literal></expr>, <expr><literal type="number">44327.053</literal></expr>, <expr><literal type="number">43318.4005</literal></expr>,
          <expr><literal type="number">42325.6165</literal></expr>, <expr><literal type="number">41348.4595</literal></expr>, <expr><literal type="number">40383.6265</literal></expr>, <expr><literal type="number">39436.77</literal></expr>, <expr><literal type="number">38509.502</literal></expr>, <expr><literal type="number">37594.035</literal></expr>, <expr><literal type="number">36695.939</literal></expr>, <expr><literal type="number">35818.6895</literal></expr>,
          <expr><literal type="number">34955.691</literal></expr>, <expr><literal type="number">34115.8095</literal></expr>, <expr><literal type="number">33293.949</literal></expr>, <expr><literal type="number">32465.0775</literal></expr>, <expr><literal type="number">31657.6715</literal></expr>, <expr><literal type="number">30877.2585</literal></expr>, <expr><literal type="number">30093.78</literal></expr>,
          <expr><literal type="number">29351.3695</literal></expr>, <expr><literal type="number">28594.1365</literal></expr>, <expr><literal type="number">27872.115</literal></expr>, <expr><literal type="number">27168.7465</literal></expr>, <expr><literal type="number">26477.076</literal></expr>, <expr><literal type="number">25774.541</literal></expr>, <expr><literal type="number">25106.5375</literal></expr>,
          <expr><literal type="number">24452.5135</literal></expr>, <expr><literal type="number">23815.5125</literal></expr>, <expr><literal type="number">23174.0655</literal></expr>, <expr><literal type="number">22555.2685</literal></expr>, <expr><literal type="number">21960.2065</literal></expr>, <expr><literal type="number">21376.3555</literal></expr>, <expr><literal type="number">20785.1925</literal></expr>,
          <expr><literal type="number">20211.517</literal></expr>, <expr><literal type="number">19657.0725</literal></expr>, <expr><literal type="number">19141.6865</literal></expr>, <expr><literal type="number">18579.737</literal></expr>, <expr><literal type="number">18081.3955</literal></expr>, <expr><literal type="number">17578.995</literal></expr>, <expr><literal type="number">17073.44</literal></expr>, <expr><literal type="number">16608.335</literal></expr>,
          <expr><literal type="number">16119.911</literal></expr>, <expr><literal type="number">15651.266</literal></expr>, <expr><literal type="number">15194.583</literal></expr>, <expr><literal type="number">14749.0495</literal></expr>, <expr><literal type="number">14343.4835</literal></expr>, <expr><literal type="number">13925.639</literal></expr>, <expr><literal type="number">13504.509</literal></expr>, <expr><literal type="number">13099.3885</literal></expr>,
          <expr><literal type="number">12691.2855</literal></expr>, <expr><literal type="number">12328.018</literal></expr>, <expr><literal type="number">11969.0345</literal></expr>, <expr><literal type="number">11596.5145</literal></expr>, <expr><literal type="number">11245.6355</literal></expr>, <expr><literal type="number">10917.6575</literal></expr>, <expr><literal type="number">10580.9785</literal></expr>,
          <expr><literal type="number">10277.8605</literal></expr>, <expr><literal type="number">9926.58100000001</literal></expr>, <expr><literal type="number">9605.538</literal></expr>, <expr><literal type="number">9300.42950000003</literal></expr>, <expr><literal type="number">8989.97850000003</literal></expr>,
          <expr><literal type="number">8728.73249999998</literal></expr>, <expr><literal type="number">8448.3235</literal></expr>, <expr><literal type="number">8175.31050000002</literal></expr>, <expr><literal type="number">7898.98700000002</literal></expr>, <expr><literal type="number">7629.79100000003</literal></expr>,
          <expr><literal type="number">7413.76199999999</literal></expr>, <expr><literal type="number">7149.92300000001</literal></expr>, <expr><literal type="number">6921.12650000001</literal></expr>, <expr><literal type="number">6677.1545</literal></expr>, <expr><literal type="number">6443.28000000003</literal></expr>,
          <expr><literal type="number">6278.23450000002</literal></expr>, <expr><literal type="number">6014.20049999998</literal></expr>, <expr><literal type="number">5791.20299999998</literal></expr>, <expr><literal type="number">5605.78450000001</literal></expr>, <expr><literal type="number">5438.48800000001</literal></expr>,
          <expr><literal type="number">5234.2255</literal></expr>, <expr><literal type="number">5059.6825</literal></expr>, <expr><literal type="number">4887.43349999998</literal></expr>, <expr><literal type="number">4682.935</literal></expr>, <expr><literal type="number">4496.31099999999</literal></expr>, <expr><literal type="number">4322.52250000002</literal></expr>,
          <expr><literal type="number">4191.42499999999</literal></expr>, <expr><literal type="number">4021.24200000003</literal></expr>, <expr><literal type="number">3900.64799999999</literal></expr>, <expr><literal type="number">3762.84250000003</literal></expr>, <expr><literal type="number">3609.98050000001</literal></expr>,
          <expr><literal type="number">3502.29599999997</literal></expr>, <expr><literal type="number">3363.84250000003</literal></expr>, <expr><literal type="number">3206.54849999998</literal></expr>, <expr><literal type="number">3079.70000000001</literal></expr>, <expr><literal type="number">2971.42300000001</literal></expr>,
          <expr><literal type="number">2867.80349999998</literal></expr>, <expr><literal type="number">2727.08100000001</literal></expr>, <expr><literal type="number">2630.74900000001</literal></expr>, <expr><literal type="number">2496.6165</literal></expr>, <expr><literal type="number">2440.902</literal></expr>,
          <expr><literal type="number">2356.19150000002</literal></expr>, <expr><literal type="number">2235.58199999999</literal></expr>, <expr><literal type="number">2120.54149999999</literal></expr>, <expr><literal type="number">2012.25449999998</literal></expr>, <expr><literal type="number">1933.35600000003</literal></expr>,
          <expr><literal type="number">1820.93099999998</literal></expr>, <expr><literal type="number">1761.54800000001</literal></expr>, <expr><literal type="number">1663.09350000002</literal></expr>, <expr><literal type="number">1578.84600000002</literal></expr>, <expr><literal type="number">1509.48149999999</literal></expr>,
          <expr><literal type="number">1427.3345</literal></expr>, <expr><literal type="number">1379.56150000001</literal></expr>, <expr><literal type="number">1306.68099999998</literal></expr>, <expr><literal type="number">1212.63449999999</literal></expr>, <expr><literal type="number">1084.17300000001</literal></expr>,
          <expr><literal type="number">1124.16450000001</literal></expr>, <expr><literal type="number">1060.69949999999</literal></expr>, <expr><literal type="number">1007.48849999998</literal></expr>, <expr><literal type="number">941.194499999983</literal></expr>, <expr><literal type="number">879.880500000028</literal></expr>,
          <expr><literal type="number">836.007500000007</literal></expr>, <expr><literal type="number">782.802000000025</literal></expr>, <expr><literal type="number">748.385499999975</literal></expr>, <expr><literal type="number">647.991500000004</literal></expr>, <expr><literal type="number">626.730500000005</literal></expr>,
          <expr><literal type="number">570.776000000013</literal></expr>, <expr><literal type="number">484.000500000024</literal></expr>, <expr><literal type="number">513.98550000001</literal></expr>, <expr><literal type="number">418.985499999952</literal></expr>, <expr><literal type="number">386.996999999974</literal></expr>,
          <expr><literal type="number">370.026500000036</literal></expr>, <expr><literal type="number">355.496999999974</literal></expr>, <expr><literal type="number">356.731499999994</literal></expr>, <expr><literal type="number">255.92200000002</literal></expr>, <expr><literal type="number">259.094000000041</literal></expr>,
          <expr><literal type="number">205.434499999974</literal></expr>, <expr><literal type="number">165.374500000034</literal></expr>, <expr><literal type="number">197.347500000033</literal></expr>, <expr><literal type="number">95.718499999959</literal></expr>, <expr><literal type="number">67.6165000000037</literal></expr>,
          <expr><literal type="number">54.6970000000438</literal></expr>, <expr><literal type="number">31.7395000000251</literal></expr>, <expr><operator>-</operator><literal type="number">15.8784999999916</literal></expr>, <expr><literal type="number">8.42500000004657</literal></expr>,
          <expr><operator>-</operator><literal type="number">26.3754999999655</literal></expr>, <expr><operator>-</operator><literal type="number">118.425500000012</literal></expr>, <expr><operator>-</operator><literal type="number">66.6629999999423</literal></expr>, <expr><operator>-</operator><literal type="number">42.9745000000112</literal></expr>,
          <expr><operator>-</operator><literal type="number">107.364999999991</literal></expr>, <expr><operator>-</operator><literal type="number">189.839000000036</literal></expr>, <expr><operator>-</operator><literal type="number">162.611499999999</literal></expr>, <expr><operator>-</operator><literal type="number">164.964999999967</literal></expr>,
          <expr><operator>-</operator><literal type="number">189.079999999958</literal></expr>, <expr><operator>-</operator><literal type="number">223.931499999948</literal></expr>, <expr><operator>-</operator><literal type="number">235.329999999958</literal></expr>, <expr><operator>-</operator><literal type="number">269.639500000048</literal></expr>,
          <expr><operator>-</operator><literal type="number">249.087999999989</literal></expr>, <expr><operator>-</operator><literal type="number">206.475499999942</literal></expr>, <expr><operator>-</operator><literal type="number">283.04449999996</literal></expr>, <expr><operator>-</operator><literal type="number">290.667000000016</literal></expr>,
          <expr><operator>-</operator><literal type="number">304.561499999953</literal></expr>, <expr><operator>-</operator><literal type="number">336.784499999951</literal></expr>, <expr><operator>-</operator><literal type="number">380.386500000022</literal></expr>, <expr><operator>-</operator><literal type="number">283.280499999993</literal></expr>,
          <expr><operator>-</operator><literal type="number">364.533000000054</literal></expr>, <expr><operator>-</operator><literal type="number">389.059499999974</literal></expr>, <expr><operator>-</operator><literal type="number">364.454000000027</literal></expr>, <expr><operator>-</operator><literal type="number">415.748000000021</literal></expr>,
          <expr><operator>-</operator><literal type="number">417.155000000028</literal></expr>,}</block></expr>,
      <comment type="line">// precision 18</comment>
      <expr><block>{<expr><literal type="number">189083</literal></expr>, <expr><literal type="number">185696.913</literal></expr>, <expr><literal type="number">182348.774</literal></expr>, <expr><literal type="number">179035.946</literal></expr>, <expr><literal type="number">175762.762</literal></expr>, <expr><literal type="number">172526.444</literal></expr>, <expr><literal type="number">169329.754</literal></expr>, <expr><literal type="number">166166.099</literal></expr>,
          <expr><literal type="number">163043.269</literal></expr>, <expr><literal type="number">159958.91</literal></expr>, <expr><literal type="number">156907.912</literal></expr>, <expr><literal type="number">153906.845</literal></expr>, <expr><literal type="number">150924.199</literal></expr>, <expr><literal type="number">147996.568</literal></expr>, <expr><literal type="number">145093.457</literal></expr>,
          <expr><literal type="number">142239.233</literal></expr>, <expr><literal type="number">139421.475</literal></expr>, <expr><literal type="number">136632.27</literal></expr>, <expr><literal type="number">133889.588</literal></expr>, <expr><literal type="number">131174.2</literal></expr>, <expr><literal type="number">128511.619</literal></expr>, <expr><literal type="number">125868.621</literal></expr>,
          <expr><literal type="number">123265.385</literal></expr>, <expr><literal type="number">120721.061</literal></expr>, <expr><literal type="number">118181.769</literal></expr>, <expr><literal type="number">115709.456</literal></expr>, <expr><literal type="number">113252.446</literal></expr>, <expr><literal type="number">110840.198</literal></expr>, <expr><literal type="number">108465.099</literal></expr>,
          <expr><literal type="number">106126.164</literal></expr>, <expr><literal type="number">103823.469</literal></expr>, <expr><literal type="number">101556.618</literal></expr>, <expr><literal type="number">99308.004</literal></expr>, <expr><literal type="number">97124.508</literal></expr>, <expr><literal type="number">94937.803</literal></expr>, <expr><literal type="number">92833.731</literal></expr>, <expr><literal type="number">90745.061</literal></expr>,
          <expr><literal type="number">88677.627</literal></expr>, <expr><literal type="number">86617.47</literal></expr>, <expr><literal type="number">84650.442</literal></expr>, <expr><literal type="number">82697.833</literal></expr>, <expr><literal type="number">80769.132</literal></expr>, <expr><literal type="number">78879.629</literal></expr>, <expr><literal type="number">77014.432</literal></expr>, <expr><literal type="number">75215.626</literal></expr>,
          <expr><literal type="number">73384.587</literal></expr>, <expr><literal type="number">71652.482</literal></expr>, <expr><literal type="number">69895.93</literal></expr>, <expr><literal type="number">68209.301</literal></expr>, <expr><literal type="number">66553.669</literal></expr>, <expr><literal type="number">64921.981</literal></expr>, <expr><literal type="number">63310.323</literal></expr>, <expr><literal type="number">61742.115</literal></expr>,
          <expr><literal type="number">60205.018</literal></expr>, <expr><literal type="number">58698.658</literal></expr>, <expr><literal type="number">57190.657</literal></expr>, <expr><literal type="number">55760.865</literal></expr>, <expr><literal type="number">54331.169</literal></expr>, <expr><literal type="number">52908.167</literal></expr>, <expr><literal type="number">51550.273</literal></expr>, <expr><literal type="number">50225.254</literal></expr>,
          <expr><literal type="number">48922.421</literal></expr>, <expr><literal type="number">47614.533</literal></expr>, <expr><literal type="number">46362.049</literal></expr>, <expr><literal type="number">45098.569</literal></expr>, <expr><literal type="number">43926.083</literal></expr>, <expr><literal type="number">42736.03</literal></expr>, <expr><literal type="number">41593.473</literal></expr>, <expr><literal type="number">40425.26</literal></expr>,
          <expr><literal type="number">39316.237</literal></expr>, <expr><literal type="number">38243.651</literal></expr>, <expr><literal type="number">37170.617</literal></expr>, <expr><literal type="number">36114.609</literal></expr>, <expr><literal type="number">35084.19</literal></expr>, <expr><literal type="number">34117.233</literal></expr>, <expr><literal type="number">33206.509</literal></expr>, <expr><literal type="number">32231.505</literal></expr>,
          <expr><literal type="number">31318.728</literal></expr>, <expr><literal type="number">30403.404</literal></expr>, <expr><literal type="number">29540.0550000001</literal></expr>, <expr><literal type="number">28679.236</literal></expr>, <expr><literal type="number">27825.862</literal></expr>, <expr><literal type="number">26965.216</literal></expr>, <expr><literal type="number">26179.148</literal></expr>,
          <expr><literal type="number">25462.08</literal></expr>, <expr><literal type="number">24645.952</literal></expr>, <expr><literal type="number">23922.523</literal></expr>, <expr><literal type="number">23198.144</literal></expr>, <expr><literal type="number">22529.128</literal></expr>, <expr><literal type="number">21762.4179999999</literal></expr>, <expr><literal type="number">21134.779</literal></expr>,
          <expr><literal type="number">20459.117</literal></expr>, <expr><literal type="number">19840.818</literal></expr>, <expr><literal type="number">19187.04</literal></expr>, <expr><literal type="number">18636.3689999999</literal></expr>, <expr><literal type="number">17982.831</literal></expr>, <expr><literal type="number">17439.7389999999</literal></expr>, <expr><literal type="number">16874.547</literal></expr>,
          <expr><literal type="number">16358.2169999999</literal></expr>, <expr><literal type="number">15835.684</literal></expr>, <expr><literal type="number">15352.914</literal></expr>, <expr><literal type="number">14823.681</literal></expr>, <expr><literal type="number">14329.313</literal></expr>, <expr><literal type="number">13816.897</literal></expr>, <expr><literal type="number">13342.874</literal></expr>,
          <expr><literal type="number">12880.882</literal></expr>, <expr><literal type="number">12491.648</literal></expr>, <expr><literal type="number">12021.254</literal></expr>, <expr><literal type="number">11625.392</literal></expr>, <expr><literal type="number">11293.7610000001</literal></expr>, <expr><literal type="number">10813.697</literal></expr>, <expr><literal type="number">10456.209</literal></expr>,
          <expr><literal type="number">10099.074</literal></expr>, <expr><literal type="number">9755.39000000001</literal></expr>, <expr><literal type="number">9393.18500000006</literal></expr>, <expr><literal type="number">9047.57900000003</literal></expr>, <expr><literal type="number">8657.98499999999</literal></expr>,
          <expr><literal type="number">8395.85900000005</literal></expr>, <expr><literal type="number">8033</literal></expr>, <expr><literal type="number">7736.95900000003</literal></expr>, <expr><literal type="number">7430.59699999995</literal></expr>, <expr><literal type="number">7258.47699999996</literal></expr>,
          <expr><literal type="number">6924.58200000005</literal></expr>, <expr><literal type="number">6691.29399999999</literal></expr>, <expr><literal type="number">6357.92500000005</literal></expr>, <expr><literal type="number">6202.05700000003</literal></expr>, <expr><literal type="number">5921.19700000004</literal></expr>,
          <expr><literal type="number">5628.28399999999</literal></expr>, <expr><literal type="number">5404.96799999999</literal></expr>, <expr><literal type="number">5226.71100000001</literal></expr>, <expr><literal type="number">4990.75600000005</literal></expr>, <expr><literal type="number">4799.77399999998</literal></expr>,
          <expr><literal type="number">4622.93099999998</literal></expr>, <expr><literal type="number">4472.478</literal></expr>, <expr><literal type="number">4171.78700000001</literal></expr>, <expr><literal type="number">3957.46299999999</literal></expr>, <expr><literal type="number">3868.95200000005</literal></expr>,
          <expr><literal type="number">3691.14300000004</literal></expr>, <expr><literal type="number">3474.63100000005</literal></expr>, <expr><literal type="number">3341.67200000002</literal></expr>, <expr><literal type="number">3109.14000000001</literal></expr>, <expr><literal type="number">3071.97400000005</literal></expr>,
          <expr><literal type="number">2796.40399999998</literal></expr>, <expr><literal type="number">2756.17799999996</literal></expr>, <expr><literal type="number">2611.46999999997</literal></expr>, <expr><literal type="number">2471.93000000005</literal></expr>, <expr><literal type="number">2382.26399999997</literal></expr>,
          <expr><literal type="number">2209.22400000005</literal></expr>, <expr><literal type="number">2142.28399999999</literal></expr>, <expr><literal type="number">2013.96100000001</literal></expr>, <expr><literal type="number">1911.18999999994</literal></expr>, <expr><literal type="number">1818.27099999995</literal></expr>,
          <expr><literal type="number">1668.47900000005</literal></expr>, <expr><literal type="number">1519.65800000005</literal></expr>, <expr><literal type="number">1469.67599999998</literal></expr>, <expr><literal type="number">1367.13800000004</literal></expr>, <expr><literal type="number">1248.52899999998</literal></expr>,
          <expr><literal type="number">1181.23600000003</literal></expr>, <expr><literal type="number">1022.71900000004</literal></expr>, <expr><literal type="number">1088.20700000005</literal></expr>, <expr><literal type="number">959.03600000008</literal></expr>, <expr><literal type="number">876.095999999903</literal></expr>,
          <expr><literal type="number">791.183999999892</literal></expr>, <expr><literal type="number">703.337000000058</literal></expr>, <expr><literal type="number">731.949999999953</literal></expr>, <expr><literal type="number">586.86400000006</literal></expr>, <expr><literal type="number">526.024999999907</literal></expr>,
          <expr><literal type="number">323.004999999888</literal></expr>, <expr><literal type="number">320.448000000091</literal></expr>, <expr><literal type="number">340.672999999952</literal></expr>, <expr><literal type="number">309.638999999966</literal></expr>, <expr><literal type="number">216.601999999955</literal></expr>,
          <expr><literal type="number">102.922999999952</literal></expr>, <expr><literal type="number">19.2399999999907</literal></expr>, <expr><operator>-</operator><literal type="number">0.114000000059605</literal></expr>, <expr><operator>-</operator><literal type="number">32.6240000000689</literal></expr>,
          <expr><operator>-</operator><literal type="number">89.3179999999702</literal></expr>, <expr><operator>-</operator><literal type="number">153.497999999905</literal></expr>, <expr><operator>-</operator><literal type="number">64.2970000000205</literal></expr>, <expr><operator>-</operator><literal type="number">143.695999999996</literal></expr>,
          <expr><operator>-</operator><literal type="number">259.497999999905</literal></expr>, <expr><operator>-</operator><literal type="number">253.017999999924</literal></expr>, <expr><operator>-</operator><literal type="number">213.948000000091</literal></expr>, <expr><operator>-</operator><literal type="number">397.590000000084</literal></expr>,
          <expr><operator>-</operator><literal type="number">434.006000000052</literal></expr>, <expr><operator>-</operator><literal type="number">403.475000000093</literal></expr>, <expr><operator>-</operator><literal type="number">297.958000000101</literal></expr>, <expr><operator>-</operator><literal type="number">404.317000000039</literal></expr>,
          <expr><operator>-</operator><literal type="number">528.898999999976</literal></expr>, <expr><operator>-</operator><literal type="number">506.621000000043</literal></expr>, <expr><operator>-</operator><literal type="number">513.205000000075</literal></expr>, <expr><operator>-</operator><literal type="number">479.351000000024</literal></expr>,
          <expr><operator>-</operator><literal type="number">596.139999999898</literal></expr>, <expr><operator>-</operator><literal type="number">527.016999999993</literal></expr>, <expr><operator>-</operator><literal type="number">664.681000000099</literal></expr>, <expr><operator>-</operator><literal type="number">680.306000000099</literal></expr>,
          <expr><operator>-</operator><literal type="number">704.050000000047</literal></expr>, <expr><operator>-</operator><literal type="number">850.486000000034</literal></expr>, <expr><operator>-</operator><literal type="number">757.43200000003</literal></expr>, <expr><operator>-</operator><literal type="number">713.308999999892</literal></expr>,}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>hllEstimateTreshold</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">400</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><literal type="number">1800</literal></expr>, <expr><literal type="number">3100</literal></expr>,
      <expr><literal type="number">6500</literal></expr>, <expr><literal type="number">11500</literal></expr>, <expr><literal type="number">20000</literal></expr>, <expr><literal type="number">50000</literal></expr>, <expr><literal type="number">120000</literal></expr>, <expr><literal type="number">350000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * @return a estimate of the cardinality of the elements represented by the HyperMinHash packed
   * registers by determining the number of leading zeroes of hash represented by each packed
   * register, and using HLL-based estimation from there.
   */</comment>
  <function><type><specifier>static</specifier> <name>long</name></type> <name>estimateCardinality</name><parameter_list>(<parameter><decl><type><name>Registers</name></type> <name>registers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>!=</operator> <call><name><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>basicEstimate</name> <init>= <expr><call><name>basicHllEstimate</name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">//TODO(christianhansen) a nice-to-have here could be using a different estimator for large</comment>
    <comment type="line">// cardinalities, like the k-smallest element-based estimation from Yu and Weber.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>numZeroRegisters</name> <init>= <expr><call><name><name>registers</name><operator>.</operator><name>getNumZeroRegisters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>numZeroRegisters</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>linearCountingEstimate</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(
          <argument><expr><call><name>linearCountingEstimate</name><argument_list>(<argument><expr><call><name><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>numZeroRegisters</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>useLinearCounting</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>linearCountingEstimate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>linearCountingEstimate</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if our bias correction tables don't have an entry for our precision value</comment>
    <comment type="line">// then don't attempt bias correction</comment>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>MIN_P</name> <operator>&gt;=</operator> <name><name>rawEstimateData</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>basicEstimate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Proceed to calculate bias-corrected HLL estimate if we aren't using linear counting.</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>estimatesForPrecision</name> <init>= <expr><name><name>rawEstimateData</name><index>[<expr><name>p</name> <operator>-</operator> <name>MIN_P</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>biasesForPrecision</name> <init>= <expr><name><name>biasData</name><index>[<expr><name>p</name> <operator>-</operator> <name>MIN_P</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>basicEstimate</name> <operator>&gt;</operator> <name><name>estimatesForPrecision</name><index>[<expr><name><name>estimatesForPrecision</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
        <operator>||</operator> <name>p</name> <operator>&gt;=</operator> <name>MIN_P</name> <operator>+</operator> <name><name>estimatesForPrecision</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// We don't correct for bias when either the precision or estimate is too high for the bias</comment>
      <comment type="line">// correction data.</comment>
      <return>return <expr><name>basicEstimate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(
        <argument><expr><call><name>biasCorrectEstimate</name><argument_list>(<argument><expr><name>basicEstimate</name></expr></argument>, <argument><expr><name>estimatesForPrecision</name></expr></argument>, <argument><expr><name>biasesForPrecision</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useLinearCounting</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>linearCountEstimate</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>MIN_P</name> <operator>+</operator> <name><name>hllEstimateTreshold</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>linearCountEstimate</name> <operator>&lt;</operator> <name><name>hllEstimateTreshold</name><index>[<expr><name>p</name> <operator>-</operator> <name>MIN_P</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>linearCountEstimate</name> <operator>&lt;=</operator> <literal type="number">5</literal> <operator>*</operator> <name>m</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>basicHllEstimate</name><parameter_list>(<parameter><decl><type><name>Registers</name></type> <name>registers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>denominator</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>denominator</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <call><name><name>registers</name><operator>.</operator><name>getPositionOfFirstOneAtRegister</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>numerator</name> <init>= <expr><call><name>alpha</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>numerator</name> <operator>/</operator> <name>denominator</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>linearCountingEstimate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numZeroRegisters</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numZeroRegisters</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>m</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>m</name><operator>)</operator> <operator>/</operator> <name>numZeroRegisters</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Take estimation bias into account using linear interpolation between the closest bias-corrected</comment>
  <comment type="line">// estimates from the HLL++ paper.</comment>
  <comment type="line">// Visible for testing.</comment>
  <function><type><specifier>static</specifier> <name>double</name></type> <name>biasCorrectEstimate</name><parameter_list>(
      <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>estimate</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>rawEstimates</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>biases</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>indexesByDifference</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rawEstimates</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>indexesByDifference</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>estimate</name> <operator>-</operator> <name><name>rawEstimates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>ascDiffIter</name> <init>= <expr><call><name><name>indexesByDifference</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>minDiff</name> <init>= <expr><call><name><name>ascDiffIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>secondSmallestDiff</name> <init>= <expr><call><name><name>ascDiffIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>smallestDiffIndex</name> <init>= <expr><call><name><name>indexesByDifference</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>minDiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>secondSmallestDiffIndex</name> <init>= <expr><call><name><name>indexesByDifference</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>secondSmallestDiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>firstIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>secondIndex</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rawEstimates</name><index>[<expr><name>smallestDiffIndex</name></expr>]</index></name> <operator>&lt;</operator> <name><name>rawEstimates</name><index>[<expr><name>secondSmallestDiffIndex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>firstIndex</name> <operator>=</operator> <name>smallestDiffIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>secondIndex</name> <operator>=</operator> <name>secondSmallestDiffIndex</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>secondIndex</name> <operator>=</operator> <name>smallestDiffIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>firstIndex</name> <operator>=</operator> <name>secondSmallestDiffIndex</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>new</operator> <call><name>LinearInterpolator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>interpolate</name><argument_list>(
        <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index></name><block>{<expr><name><name>rawEstimates</name><index>[<expr><name>firstIndex</name></expr>]</index></name></expr>, <expr><name><name>rawEstimates</name><index>[<expr><name>secondIndex</name></expr>]</index></name></expr>}</block></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>double</name><index>[]</index></name><block>{
            <expr><name><name>rawEstimates</name><index>[<expr><name>firstIndex</name></expr>]</index></name> <operator>-</operator> <name><name>biases</name><index>[<expr><name>firstIndex</name></expr>]</index></name></expr>,
            <expr><name><name>rawEstimates</name><index>[<expr><name>secondIndex</name></expr>]</index></name> <operator>-</operator> <name><name>biases</name><index>[<expr><name>secondIndex</name></expr>]</index></name></expr>
        }</block></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><name>estimate</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>alpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// From the HLL paper</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0.7213</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">1.079</literal> <operator>/</operator> <name>m</name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">4</literal></expr>:</case>
        <return>return <expr><literal type="number">0.673</literal></expr>;</return>
      <case>case <expr><literal type="number">5</literal></expr>:</case>
        <return>return <expr><literal type="number">0.697</literal></expr>;</return>
      <case>case <expr><literal type="number">6</literal></expr>:</case>
        <return>return <expr><literal type="number">0.709</literal></expr>;</return>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Values of p under 4 are not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>
  </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/HyperMinHash.java" hash="dd52890b24d914700f6920514963c77bd778d4e6"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<class><specifier>public</specifier> class <name>HyperMinHash</name> <super_list><implements>implements <super><name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <comment type="line">// used in serialization</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>VERSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* There are 2^p registers. Per the HyperMinHash algorithm, hashes are bucketed based on the value
   * of their bitstring's first p bits. The r least significant bits in the bitstring in are stored
   * as the r least significant bits in the register.
   * The number of leading zeroes in positions 2^p through 2^p + 2^q - 1 in the bitstring is stored
   * in the registers bits that are the q + 1 next least significant bits after the r least
   * significant bits i.e. number of leading zeroes is stored in bits r through r + q - 1 of the
   * long.
   */</comment>
  <decl_stmt><decl><type><specifier>final</specifier> <name>Registers</name></type> <name>registers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>p</name></decl>;</decl_stmt> <comment type="line">// must be at least 4</comment>
  <comment type="line">// This is 2^q + 1 in the HMH paper. We use this to represent the space that we're searching for a</comment>
  <comment type="line">// leading zero.</comment>
  <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numZeroSearchBits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * @param p HLL precision parameter
   * @param r Number of MinHash bits to keep
   */</comment>
  <constructor><specifier>public</specifier> <name>HyperMinHash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name><name>Registers</name><operator>.</operator><name>newRegisters</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><name>HyperMinHash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Registers</name></type> <name>registers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Ensure that the number of registers isn't larger than the largest array java can hold in</comment>
    <comment type="line">// memory biggest java array can be of size Integer.MAX_VALUE</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
          <argument><expr><literal type="string">"precision (p) must be between 4 (inclusive) and 31 (exclusive)."</literal></expr></argument>
      )</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Ensure that we can pack the number of leading zeroes and the least significant r bits from</comment>
    <comment type="line">// the hash bitstring into a long "register."</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">58</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
          <argument><expr><literal type="string">"number of bits to take for minhash (r) must be between 1 and 58."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numZeroSearchBits</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>registers</name></name> <operator>=</operator> <name>registers</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>cardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>HmhCardinalityEstimator</name><operator>.</operator><name>estimateCardinality</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>offer</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>long</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>Murmur3</name><operator>.</operator><name>hash128</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the left half of the hash is used for HLL</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>hllHash</name> <init>= <expr><name><name>hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Unsafely cast to int because we assume numZeroSearchBits &gt; 32</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>registerIndex</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>hllHash</name> <operator>&gt;&gt;&gt;</operator> <name>numZeroSearchBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="line">// zero out leftmost p bits and find position of leftmost one</comment>
    <comment type="line">// We add a one to the right of the zero search space just in case the entire space is zeros</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>zeroSearchSpace</name> <init>= <expr><operator>(</operator><name>hllHash</name> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>leftmostOnePosition</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>numberOfLeadingZeros</name></name><argument_list>(<argument><expr><name>zeroSearchSpace</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// the right half of the hash is used for min hash</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>hmhHash</name> <init>= <expr><name><name>hash</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// We take the leftmost R bits as the minHash bits</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>minHashBits</name> <init>= <expr><name>hmhHash</name> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>incomingRegister</name> <init>= <expr><call><name><name>LongPacker</name><operator>.</operator><name>pack</name></name><argument_list>(<argument><expr><name>leftmostOnePosition</name></expr></argument>, <argument><expr><name>minHashBits</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>registers</name><operator>.</operator><name>updateIfGreaterThan</name></name><argument_list>(<argument><expr><name>registerIndex</name></expr></argument>, <argument><expr><name>incomingRegister</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HyperMinHash</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name><name>registers</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>HyperMinHash</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>HyperMinHash</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>numZeroSearchBits</name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>numZeroSearchBits</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name><name>this</name><operator>.</operator><name>registers</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>registers</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>registers</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>numZeroSearchBits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"HyperMinHash{"</literal> <operator>+</operator>
        <literal type="string">"p="</literal> <operator>+</operator> <name>p</name> <operator>+</operator>
        <literal type="string">", numZeroSearchBits="</literal> <operator>+</operator> <name>numZeroSearchBits</name> <operator>+</operator>
        <literal type="string">", r="</literal> <operator>+</operator> <name>r</name> <operator>+</operator>
        <literal type="string">", registers="</literal> <operator>+</operator> <call><name><name>registers</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator>
        <literal type="char">'}'</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/HyperMinHashCombiner.java" hash="4b0b7a4658b919f7f50976627413997e1b68b999"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<class><specifier>public</specifier> class <name>HyperMinHashCombiner</name> <super_list><implements>implements <super><name><name>SketchCombiner</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>HyperMinHashCombiner</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHashCombiner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>HyperMinHashCombiner</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>instance</name></expr>;</return>
  </block_content>}</block></function>

  <constructor><specifier>private</specifier> <name>HyperMinHashCombiner</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HyperMinHash</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assertInputNotEmpty</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertParamsAreEqual</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HyperMinHash</name></type> <name>firstSketch</name> <init>= <expr><call><name><name>sketches</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name><name>firstSketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numRegisters</name> <init>= <expr><call><name><name>firstSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HyperMinHash</name></type> <name>mergedSketch</name> <init>= <expr><call><name><name>firstSketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRegisters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>HyperMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>

        <expr_stmt><expr><call><name><name>mergedSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>updateIfGreaterThan</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getRegisterAtIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><name>mergedSketch</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>intersectionCardinality</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><call><name>union</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cardinality</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name>similarity</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>double</name></type> <name>similarity</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO this similarity estimation does not take into account expected collisions</comment>
    <comment type="line">// because it is too slow in practice, and the approximation algorithm presented</comment>
    <comment type="line">// in algorithm 2.1.6 (Yu &amp; Weber) does not generalize to more than 2 sketches</comment>

    <comment type="line">// TODO make an abstract class that exposes a similarityInternal(registers, p,q,r)</comment>
    <comment type="line">// which is shared between combiners</comment>
    <comment type="line">// Algorithm 2.1.4 in HyperMinHash paper</comment>
    <expr_stmt><expr><call><name>assertInputNotEmpty</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertParamsAreEqual</name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1.0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HyperMinHash</name></type> <name>firstSketch</name> <init>= <expr><call><name><name>sketches</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>numRegisters</name> <init>= <expr><call><name><name>firstSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRegisters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>firstSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getRegisterAtIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>itemInIntersection</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>HyperMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><name>itemInIntersection</name> <operator>=</operator> <name>itemInIntersection</name> <operator>&amp;&amp;</operator>
              <call><name><name>firstSketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getMantissaAtRegister</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>sketch</name><operator>.</operator><name>registers</name>
                  <operator>.</operator><name>getMantissaAtRegister</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>itemInIntersection</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>HyperMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getRegisterAtIndex</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>cardinalities</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>HyperMinHash</name></type> <name>sk</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>cardinalities</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name><name>sk</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>c</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>n</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// algorithm 2.1.5 in the HyperMinHash paper</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>expectedCollision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>...</modifier></type> <name>cardinalities</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>_2q</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>q</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>_2r</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>r</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>_2q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>_2r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>_2q</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>den</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>_2r</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><name>_2r</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>den</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>r</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>b1</name> <operator>=</operator> <name>j</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>product</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>double</name></type> <name>cardinality</name> <range>: <expr><name>cardinalities</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><name>product</name> <operator>*=</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>b2</name></expr></argument>, <argument><expr><name>cardinality</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>b1</name></expr></argument>, <argument><expr><name>cardinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>product</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>x</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Assumes that the array contains at least one sketch.
   *
   * @param sketches input sketches
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertParamsAreEqual</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HyperMinHash</name></type> <name>firstSketch</name> <init>= <expr><call><name><name>sketches</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>firstSketch</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numZeroSearchBits</name> <init>= <expr><name><name>firstSketch</name><operator>.</operator><name>numZeroSearchBits</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>firstSketch</name><operator>.</operator><name>r</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>HyperMinHash</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name><name>sketch</name><operator>.</operator><name>p</name></name> <operator>||</operator> <name>numZeroSearchBits</name> <operator>!=</operator> <name><name>sketch</name><operator>.</operator><name>numZeroSearchBits</name></name> <operator>||</operator> <name>r</name> <operator>!=</operator> <name><name>sketch</name><operator>.</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input sketches have different parameters."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>assertInputNotEmpty</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input sketches cannot be empty."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/HyperMinHashSerDe.java" hash="5c4f6de3e087cf398ce6c9d1609d3ad25e5b71b4"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<class><specifier>public</specifier> class <name>HyperMinHashSerDe</name> <super_list><implements>implements <super><name><name>IntersectionSketch</name><operator>.</operator><name><name>SerDe</name><argument_list type="generic">&lt;<argument><name>HyperMinHash</name></argument>&gt;</argument_list></name></name></super></implements></super_list> <block>{

  <comment type="block">/*
        Serialized format:
          serializationToken (byte)
          version (byte)
          p (int)
          r (int)
          register serde token (byte)
          num_registers (int)
          registers (variable size depending on type of registers)

          The java purist will cringe at my use of if statements instead of polymorphism
          to serialize different types of registers. This is probably something that should be
          revisited, but the polymorphism approach made it harder to see where the byte buffer
          was being modified which made debugging harder. So I'm going with if statements
          for now.
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>HyperMinHash</name></type> <name>fromBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>inputBuffer</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>serdeToken</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>HyperMinHash</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><call><name><name>SerializationTokens</name><operator>.</operator><name>getClassForToken</name></name><argument_list>(<argument><expr><name>serdeToken</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Input bytes do not represent a HyperMinHash object!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>byte</name></type> <name>version</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// 1 is the only supported version thus far</comment>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
          <argument><expr><literal type="string">"Sketch version is "</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">". Only version 1 is supported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>byte</name></type> <name>registerSerdeToken</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numRegisters</name> <init>= <expr><call><name><name>inputBuffer</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Class</name></type> <name>registersClass</name> <init>= <expr><call><name><name>SerializationTokens</name><operator>.</operator><name>getClassForToken</name></name><argument_list>(<argument><expr><name>registerSerdeToken</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
            <argument><expr><literal type="string">"No class found for serde token: "</literal> <operator>+</operator> <name>registerSerdeToken</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Registers</name></type> <name>registers</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>LongRegisters</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>registerValues</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name>numRegisters</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRegisters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>registerValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>inputBuffer</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>registers</name> <operator>=</operator> <operator>new</operator> <call><name>LongRegisters</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>registerValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>IntRegisters</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>registerValues</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>numRegisters</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRegisters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>registerValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>inputBuffer</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>registers</name> <operator>=</operator> <operator>new</operator> <call><name>IntRegisters</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>registerValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Register type not supported: "</literal> <operator>+</operator> <name>registersClass</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>registers</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>toBytes</name><parameter_list>(<parameter><decl><type><name>HyperMinHash</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>outputBuffer</name> <init>= <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><call><name>sizeInBytes</name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>SerializationTokens</name><operator>.</operator><name>getTokenForClass</name></name><argument_list>(<argument><expr><name><name>HyperMinHash</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>HyperMinHash</name><operator>.</operator><name>VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>sketch</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>sketch</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Class</name></type> <name>registersClass</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>registersSerdeToken</name> <init>= <expr><call><name><name>SerializationTokens</name><operator>.</operator><name>getTokenForClass</name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
            <argument><expr><literal type="string">"Sketch Registers do not have a serialization token!"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>registersSerdeToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>LongRegisters</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>LongRegisters</name></type> <name>longRegisters</name> <init>= <expr><operator>(</operator><name>LongRegisters</name><operator>)</operator> <name><name>sketch</name><operator>.</operator><name>registers</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>long</name></type> <name>register</name> <range>: <expr><name><name>longRegisters</name><operator>.</operator><name>registers</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>register</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>IntRegisters</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IntRegisters</name></type> <name>intRegisters</name> <init>= <expr><operator>(</operator><name>IntRegisters</name><operator>)</operator> <name><name>sketch</name><operator>.</operator><name>registers</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>register</name> <range>: <expr><name><name>intRegisters</name><operator>.</operator><name>registers</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>outputBuffer</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>register</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Register type not supported: "</literal> <operator>+</operator> <name>registersClass</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><call><name><name>outputBuffer</name><operator>.</operator><name>array</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>sizeInBytes</name><parameter_list>(<parameter><decl><type><name>HyperMinHash</name></type> <name>sketch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Class</name></type> <name>registersClass</name> <init>= <expr><call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>registerSizeInBytes</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>LongRegisters</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>registerSizeInBytes</name> <operator>=</operator> <call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>IntRegisters</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(<argument><expr><name>registersClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>registerSizeInBytes</name> <operator>=</operator> <call><name><name>sketch</name><operator>.</operator><name>registers</name><operator>.</operator><name>getNumRegisters</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>Integer</name><operator>.</operator><name>BYTES</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Register type not supported: "</literal> <operator>+</operator> <name>registersClass</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name><name>Byte</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// serde token</comment>
        <name><name>Byte</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// version</comment>
        <name><name>Integer</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// p</comment>
        <name><name>Integer</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// r</comment>
        <name><name>Byte</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// register serde token</comment>
        <name><name>Integer</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator> <comment type="line">// num registers</comment>
        <name>registerSizeInBytes</name></expr>;</return> <comment type="line">// registers</comment>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/IntPacker.java" hash="2a2ec57bdcf1bc229252c1bf14b65f08f98ec093"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Class used to pack an int with the position of the first zero in a bitstring and trailing bits.
 */</comment>
<class><specifier>public</specifier> class <name>IntPacker</name> <block>{
  <function><type><specifier>static</specifier> <name>int</name></type> <name>pack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>positionOfFirstOne</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mantissa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>positionOfFirstOne</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"position of first one must fit into 6 bits"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mantissa</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"mantissa must fit into 25 bits"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>positionOfFirstOne</name> <operator>&lt;&lt;</operator> <name>r</name><operator>)</operator> <operator>|</operator> <name>mantissa</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>int</name></type> <name>unpackMantissa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>register</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Just clear the exponent bits + any unused bits if 2^q + r &lt; 32</comment>
    <return>return <expr><operator>(</operator><name>register</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>Integer</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Integer</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>int</name></type> <name>unpackPositionOfFirstOne</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>register</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><name>register</name> <operator>&gt;&gt;&gt;</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/IntRegisters.java" hash="e0cf74e86d26d0768b32f28adcdf2fb1dc9e56be"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<class>class <name>IntRegisters</name> <super_list><implements>implements <super><name><name>Registers</name><argument_list type="generic">&lt;<argument><name>IntRegisters</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>registers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

  <constructor><name>IntRegisters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><name>IntRegisters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>registers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"R cannot be greater than 25 when using IntRegisters"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>registers</name></name> <operator>=</operator> <name>registers</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>updateIfGreaterThan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>registerIndex</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>incomingRegister</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>intIncomingRegister</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><name>incomingRegister</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>currentRegister</name> <init>= <expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>currentLeadingOnePosition</name> <init>= <expr><call><name><name>IntPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name>currentRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>incomingLeadingOnePosition</name> <init>= <expr><call><name><name>IntPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name>intIncomingRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>currentLeadingOnePosition</name> <operator>&lt;</operator> <name>incomingLeadingOnePosition</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name> <operator>=</operator> <name>intIncomingRegister</name></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentLeadingOnePosition</name> <operator>==</operator> <name>incomingLeadingOnePosition</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>currentMantissa</name> <init>= <expr><call><name><name>IntPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name>currentRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>incomingMantissa</name> <init>= <expr><call><name><name>IntPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name>intIncomingRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>currentMantissa</name> <operator>&gt;</operator> <name>incomingMantissa</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name> <operator>=</operator> <name>intIncomingRegister</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getRegisterAtIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>registers</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>IntRegisters</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>IntRegisters</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name><name>registers</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getNumRegisters</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>registers</name><operator>.</operator><name>length</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getPositionOfFirstOneAtRegister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>IntPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name><name>registers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getMantissaAtRegister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>IntPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name><name>registers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getNumZeroRegisters</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>register</name> <range>: <expr><name>registers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>register</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"IntRegisters{"</literal> <operator>+</operator>
        <literal type="string">"registers="</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call> <operator>+</operator>
        <literal type="string">", p="</literal> <operator>+</operator> <name>p</name> <operator>+</operator>
        <literal type="string">", r="</literal> <operator>+</operator> <name>r</name> <operator>+</operator>
        <literal type="char">'}'</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>IntRegisters</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>IntRegisters</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>p</name></name> <operator>&amp;&amp;</operator>
        <name>r</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>r</name></name> <operator>&amp;&amp;</operator>
        <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>registers</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/IntersectionSketch.java" hash="46429891f72dcca55cde7cb54203739348a2da05"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Representation of a set that is able to estimate the cardinality of that set, and perform the
 * operations in {@link SketchCombiner}. Each implementation of this interface should have a corresponding
 * implementation of {@link SketchCombiner} and {@link SerDe}.
 */</comment>
<interface><specifier>public</specifier> interface <name><name>IntersectionSketch</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>IntersectionSketch</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <block>{

  <comment type="block" format="javadoc">/**
   * Returns an estimate of the cardinality of sets represented by the sketch.
   */</comment>
  <function_decl><type><name>long</name></type> <name>cardinality</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @param bytes a representative key or serialized representation of the object to be added to
   *              this sketch. If using a representative key instead of a complete serialized
   *              representation, using at least 128 bits for the key where possible is recommended
   *              to maximize accuracy.
   * @return false if the value returned by cardinality() is unaffected by the appearance of o in
   * the stream.
   */</comment>
  <function_decl><type><name>boolean</name></type> <name>offer</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @return a deep copy of the {@link IntersectionSketch} instance.
   */</comment>
  <function_decl><type><name>T</name></type> <name>deepCopy</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Implementing classes provide serialization-related functionality for the relevant
   * {@link IntersectionSketch} type.
   *
   * @param &lt;T&gt; Intersection Sketch Type
   */</comment>
  <interface>interface <name><name>SerDe</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>IntersectionSketch</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <block>{

    <comment type="block" format="javadoc">/**
     * @param bytes serialized representation of the sketch.
     * @return deserialized sketch
     */</comment>
    <function_decl><type><name>T</name></type> <name>fromBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @param sketch the sketch to be serialized
     * @return serialized representation of the input sketch
     */</comment>
    <function_decl><type><name><name>byte</name><index>[]</index></name></type> <name>toBytes</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>sketch</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the size of the serialized form of this sketch
     *
     * @param sketch the sketch whose size in bytes we want
     * @return size in bytes
     */</comment>
    <function_decl><type><name>int</name></type> <name>sizeInBytes</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>sketch</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/LongPacker.java" hash="b54acb34a5dae3da81aa4103e3b5218fcee8f8b2"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Class used to pack a long with the position of the first zero in a bitstring and trailing bits.
 */</comment>
<class>class <name>LongPacker</name> <block>{

  <function><type><specifier>static</specifier> <name>long</name></type> <name>pack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>positionOfFirstOne</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mantissa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>positionOfFirstOne</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"position of first one must fit into 6 bits"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mantissa</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">57</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"mantissa must fit into 57 bits"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>positionOfFirstOne</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>r</name><operator>)</operator> <operator>|</operator> <name>mantissa</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>long</name></type> <name>unpackMantissa</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>register</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Just clear the exponent bits + any unused bits if 2^q + r &lt; 64</comment>
    <return>return <expr><operator>(</operator><name>register</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>int</name></type> <name>unpackPositionOfFirstOne</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>register</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><name>register</name> <operator>&gt;&gt;&gt;</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/LongRegisters.java" hash="c05b58961994e76488a8c334c2600f9ef531ad12"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<class>class <name>LongRegisters</name> <super_list><implements>implements <super><name><name>Registers</name><argument_list type="generic">&lt;<argument><name>LongRegisters</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>final</specifier> <name><name>long</name><index>[]</index></name></type> <name>registers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>r</name></decl>;</decl_stmt>

  <constructor><name>LongRegisters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>long</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><name>LongRegisters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>registers</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>registers</name></name> <operator>=</operator> <name>registers</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>updateIfGreaterThan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>registerIndex</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>incomingRegister</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>currentRegister</name> <init>= <expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>currentLeadingOnePosition</name> <init>= <expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name>currentRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>incomingLeadingOnePosition</name> <init>= <expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name>incomingRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>currentLeadingOnePosition</name> <operator>&lt;</operator> <name>incomingLeadingOnePosition</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name> <operator>=</operator> <name>incomingRegister</name></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>currentLeadingOnePosition</name> <operator>==</operator> <name>incomingLeadingOnePosition</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>currentMantissa</name> <init>= <expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name>currentRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>incomingMantissa</name> <init>= <expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name>incomingRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>currentMantissa</name> <operator>&gt;</operator> <name>incomingMantissa</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>registers</name><index>[<expr><name>registerIndex</name></expr>]</index></name> <operator>=</operator> <name>incomingRegister</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getRegisterAtIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>registers</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>LongRegisters</name></type> <name>deepCopy</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>LongRegisters</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name><name>registers</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getNumRegisters</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>registers</name><operator>.</operator><name>length</name></name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getPositionOfFirstOneAtRegister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name><name>registers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>long</name></type> <name>getMantissaAtRegister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name><name>registers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>getNumZeroRegisters</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name></type> <name>register</name> <range>: <expr><name>registers</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>register</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="string">"LongRegisters{"</literal> <operator>+</operator>
        <literal type="string">"registers="</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call> <operator>+</operator>
        <literal type="string">", p="</literal> <operator>+</operator> <name>p</name> <operator>+</operator>
        <literal type="string">", r="</literal> <operator>+</operator> <name>r</name> <operator>+</operator>
        <literal type="char">'}'</literal></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>LongRegisters</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>LongRegisters</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>p</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>p</name></name> <operator>&amp;&amp;</operator>
        <name>r</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>r</name></name> <operator>&amp;&amp;</operator>
        <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>registers</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>registers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/Murmur3.java" hash="edb4a897b0804a1af2007dc884e44944ef84e495"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Murmur3 is successor to Murmur2 fast non-crytographic hash algorithms.
 *
 * Murmur3 32 and 128 bit variants.
 * 32-bit Java port of https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp#94
 * 128-bit Java port of https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp#255
 *
 * This is a public domain code with no copyrights.
 * From homepage of MurmurHash (https://code.google.com/p/smhasher/),
 * "All MurmurHash versions are public domain software, and the author disclaims all copyright
 * to their code."
 */</comment>
<class><specifier>public</specifier> class <name>Murmur3</name> <block>{
  <comment type="line">// from 64-bit linear congruential generator</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NULL_HASHCODE</name> <init>= <expr><literal type="number">2862933555777941757L</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Constants for 32 bit variant</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>C1_32</name> <init>= <expr><literal type="number">0xcc9e2d51</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>C2_32</name> <init>= <expr><literal type="number">0x1b873593</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>R1_32</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>R2_32</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>M_32</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>N_32</name> <init>= <expr><literal type="number">0xe6546b64</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Constants for 128 bit variant</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>C1</name> <init>= <expr><literal type="number">0x87c37b91114253d5L</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>C2</name> <init>= <expr><literal type="number">0x4cf5ad432745937fL</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>R1</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>R2</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>R3</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>N1</name> <init>= <expr><literal type="number">0x52dce729</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>N2</name> <init>= <expr><literal type="number">0x38495ab5</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_SEED</name> <init>= <expr><literal type="number">104729</literal></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l1</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash32</name><argument_list>(<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l0</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash32</name><argument_list>(<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 32-bit variant.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>r0</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>reverseBytes</name></name><argument_list>(<argument><expr><name>l0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>r0</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>fmix32</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 32-bit variant.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>r0</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>reverseBytes</name></name><argument_list>(<argument><expr><name>l0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>r1</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>reverseBytes</name></name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>r0</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>r1</name><operator>)</operator></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>r1</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>fmix32</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 32-bit variant.
   *
   * @param data - input byte array
   * @return - hashcode
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 32-bit variant.
   *
   * @param data - input byte array
   * @param length - length of array
   * @return - hashcode
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 32-bit variant.
   *
   * @param data   - input byte array
   * @param length - length of array
   * @param seed   - seed. (default 0)
   * @return - hashcode
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 32-bit variant.
   *
   * @param data   - input byte array
   * @param offset - offset of data
   * @param length - length of array
   * @param seed   - seed. (default 0)
   * @return - hashcode
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hash32</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// body</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i_4</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i_4</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i_4</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i_4</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i_4</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>mix32</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// tail</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>nblocks</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>length</name> <operator>-</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>idx</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="line">// mix functions</comment>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1_32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2_32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><call><name>fmix32</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>mix32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C1_32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C2_32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>R2_32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>M_32</name> <operator>+</operator> <name>N_32</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>fmix32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>*=</operator> <literal type="number">0x85ebca6b</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>*=</operator> <literal type="number">0xc2b2ae35</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><name>hash</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 64-bit variant. This is essentially MSB 8 bytes of Murmur3 128-bit variant.
   *
   * @param data - input byte array
   * @return - hashcode
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash64</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>hash</name> <init>= <expr><name>DEFAULT_SEED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>k</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>reverseBytes</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>BYTES</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// mix functions</comment>
    <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>R2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>M</name> <operator>+</operator> <name>N1</name></expr>;</expr_stmt>
    <comment type="line">// finalization</comment>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>fmix64</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hash</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>k1</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>reverseBytes</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><literal type="number">1L</literal> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>BYTES</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>hash</name> <init>= <expr><name>DEFAULT_SEED</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    <comment type="line">// finalization</comment>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>fmix64</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hash</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>hash</name> <init>= <expr><name>DEFAULT_SEED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>data</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>

    <comment type="line">// finalization</comment>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name><name>Short</name><operator>.</operator><name>BYTES</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>fmix64</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hash</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash64</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 64-bit variant. This is essentially MSB 8 bytes of Murmur3 128-bit variant.
   *
   * @param data   - input byte array
   * @param length - length of array
   * @param seed   - seed. (default is 0)
   * @return - hashcode
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>hash64</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>hash</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// body</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>i8</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>k</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i8</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

      <comment type="line">// mix functions</comment>
      <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>R2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>M</name> <operator>+</operator> <name>N1</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// tail</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tailStart</name> <init>= <expr><name>nblocks</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>length</name> <operator>-</operator> <name>tailStart</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">7</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">6</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">5</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">// finalization</comment>
    <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>fmix64</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>hash</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 128-bit variant.
   *
   * @param data - input byte array
   * @return - hashcode (2 longs)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>hash128</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>hash128</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>DEFAULT_SEED</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Murmur3 128-bit variant.
   *
   * @param data   - input byte array
   * @param offset - the first element of array
   * @param length - length of array
   * @param seed   - seed. (default is 0)
   * @return - hashcode (2 longs)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>hash128</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>h1</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>h2</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>length</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// body</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>i16</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>k1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>long</name></type> <name>k2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">13</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">14</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator>
          <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i16</name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

      <comment type="line">// mix functions for k1</comment>
      <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name> <operator>*</operator> <name>M</name> <operator>+</operator> <name>N1</name></expr>;</expr_stmt>

      <comment type="line">// mix functions for k2</comment>
      <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>R3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h2</name> <operator>*</operator> <name>M</name> <operator>+</operator> <name>N2</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// tail</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>k2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tailStart</name> <init>= <expr><name>nblocks</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>length</name> <operator>-</operator> <name>tailStart</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">15</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">14</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">14</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">13</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">13</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">12</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">11</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">10</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">9</literal></expr>:</case>
        <expr_stmt><expr><name>k2</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>R3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>k2</name></expr>;</expr_stmt>

      <case>case <expr><literal type="number">8</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">7</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">6</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">5</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>k1</name> <operator>^=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>tailStart</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">// finalization</comment>
    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>^=</operator> <name>length</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>fmix64</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>fmix64</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <name><name>long</name><index>[]</index></name><block>{<expr><name>h1</name></expr>, <expr><name>h2</name></expr>}</block></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>fmix64</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">33</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0xff51afd7ed558ccdL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">33</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0xc4ceb9fe1a85ec53L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">33</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>h</name></expr>;</return>
  </block_content>}</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>IncrementalHash32</name> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>tail</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tailLen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>totalLen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>tailLen</name> <operator>=</operator> <name>totalLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tailLen</name> <operator>+</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>tailLen</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tailLen</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>offset2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tailLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset2</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>tailLen</name><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>tailLen</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>orBytes</name><argument_list>(<argument><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>orBytes</name><argument_list>(<argument><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>orBytes</name><argument_list>(<argument><expr><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default> <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>tailLen</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <comment type="line">// mix functions</comment>
        <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C1_32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C2_32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>R2_32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>M_32</name> <operator>+</operator> <name>N_32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>length2</name> <init>= <expr><name>length</name> <operator>-</operator> <name>offset2</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>offset2</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><name>length2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i_4</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>orBytes</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i_4</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i_4</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i_4</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i_4</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// mix functions</comment>
        <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C1_32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>R1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>*=</operator> <name>C2_32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>R2_32</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>M_32</name> <operator>+</operator> <name>N_32</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><operator>(</operator><name>nblocks</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>tailLen</name> <operator>=</operator> <name>length2</name> <operator>-</operator> <name>consumed</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>==</operator> <name>length2</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>consumed</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tailLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name>tailLen</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
          <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

          <comment type="line">// mix functions</comment>
          <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C1_32</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>rotateLeft</name></name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>R1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>C2_32</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
      </block_content>}</block></switch>

      <comment type="line">// finalization</comment>
      <expr_stmt><expr><name>hash</name> <operator>^=</operator> <name>totalLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>*=</operator> <literal type="number">0x85ebca6b</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>*=</operator> <literal type="number">0xc2b2ae35</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash</name> <operator>^=</operator> <operator>(</operator><name>hash</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><name>hash</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>orBytes</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b2</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b3</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b4</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>b1</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>b2</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>b4</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/Registers.java" hash="6fdccac82b29c5a69a533fcf0bc8d4f5716622c9"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Interface over the HMH sketch's array of registers. This iface allows us to use the smallest
 * representation possible for registers without HMH's "business logic" having to know about it.
 * &lt;p&gt;
 * For example, if R=20, then we can use an int to represent a register instead of a long (
 * since we'd use 6 bits for leading zeros and 20 bits for the minHash portion).
 */</comment>
<interface>interface <name><name>Registers</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>Registers</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <block>{

  <comment type="block" format="javadoc">/**
   * @return a {@link Registers} object of the appropriate size.
   */</comment>
  <function><type><specifier>static</specifier> <name>Registers</name></type> <name>newRegisters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>LongRegisters</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name>IntRegisters</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @param registerIndex
   * @param incomingRegister
   * @return
   */</comment>
  <function_decl><type><name>boolean</name></type> <name>updateIfGreaterThan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>registerIndex</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>incomingRegister</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Returns the value of the register at the given index, casting to a long if needed.
   *
   * @param index index of the register whose value should be retrieved
   * @return the value of the register at the given index
   */</comment>
  <function_decl><type><name>long</name></type> <name>getRegisterAtIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @return deep copy of this object
   */</comment>
  <function_decl><type><name>T</name></type> <name>deepCopy</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @return number of registers in this container object
   */</comment>
  <function_decl><type><name>int</name></type> <name>getNumRegisters</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @param index index of the register of interest
   * @return the position of the first one, as recorded in that register
   */</comment>
  <function_decl><type><name>int</name></type> <name>getPositionOfFirstOneAtRegister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @param index of the register from which to extract the mantissa
   * @return Returns the value of the mantissa packed at the given index, casting to a long if needed.
   */</comment>
  <function_decl><type><name>long</name></type> <name>getMantissaAtRegister</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * @return The number of registers whose value is 0
   */</comment>
  <function_decl><type><name>int</name></type> <name>getNumZeroRegisters</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/SerializationTokens.java" hash="139253fc3bdc0fc188e8e6522f45e9e392253419"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Class to store serialization tokens.
 */</comment>
<class>class <name>SerializationTokens</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Class</name></argument>, <argument><name>Byte</name></argument>&gt;</argument_list></name></type> <name>classToToken</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>, <argument><name>Class</name></argument>&gt;</argument_list></name></type> <name>tokenToClass</name></decl>;</decl_stmt>

  <static>static <block>{<block_content>
    <comment type="line">// Tokens can only be added. They should not be removed or edited.</comment>
    <expr_stmt><expr><name>classToToken</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tokenToClass</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>classToToken</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>HyperMinHash</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tokenToClass</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>HyperMinHash</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>classToToken</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>BetaMinHash</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tokenToClass</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>BetaMinHash</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>classToToken</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>LongRegisters</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tokenToClass</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>LongRegisters</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>classToToken</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>IntRegisters</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tokenToClass</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>IntRegisters</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></static>

  <function><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Byte</name></argument>&gt;</argument_list></name></type> <name>getTokenForClass</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>classToToken</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Class</name></argument>&gt;</argument_list></name></type> <name>getClassForToken</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>tokenToClass</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/SketchCombiner.java" hash="467c2076070397248ceaa4079ed821fe90970035"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<comment type="block" format="javadoc">/**
 * {@code SketchCombiner} instances support aggregate operations over corresponding {@link}
 * IntersectionSketch instances. Generally speaking, {@code SketchCombiner} should be singletons, as
 * they should not need to store any state related to particular sketch(es) and should be within the
 * same package as the corresponding {@link IntersectionSketch} to facilitate encapsulation of
 * sketch internals that the combiner may need access to.
 */</comment>
<interface><specifier>public</specifier> interface <name><name>SketchCombiner</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name><name>IntersectionSketch</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name>Serializable</name></super></extends></super_list> <block>{

  <comment type="block" format="javadoc">/**
   * Return a sketch representing the union of the sets represented by the sketches in {@code
   * sketches}. Sketches passed will not be mutated. If only a single sketch is passed, this method
   * will return a deep copy.
   */</comment>
  <function_decl><type><name>T</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Return an estimate of the cardinality of the intersection of the elements in the sets
   * represented by {@code sketches}.
   */</comment>
  <function_decl><type><name>long</name></type> <name>intersectionCardinality</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Return an estimate of the Jaccard index of the sets represented by {@code sketches}. The
   * Jaccard index is the ratio of the cardinality of the intersection of sets divided by the
   * cardinality of the union of those sets.
   */</comment>
  <function_decl><type><name>double</name></type> <name>similarity</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sketches</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/main/java/com/liveramp/hyperminhash/demo/DemoBetaMinHash.java" hash="6440bb42b393c8cdbb3afcfb96f258efc3970661"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name><operator>.</operator><name>demo</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name><operator>.</operator><name>BetaMinHash</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name><operator>.</operator><name>BetaMinHashCombiner</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name><operator>.</operator><name>IntersectionSketch</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>DemoBetaMinHash</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM_THREADS</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ExecutorService</name></type> <name>threadPool</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newFixedThreadPool</name></name><argument_list>(<argument><expr><name>NUM_THREADS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Random</name></type> <name>rng</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name>runDemo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>runDemo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"---- Begin Demo ----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runJaccardIndexEstimation</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threadPool</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threadPool</name><operator>.</operator><name>awaitTermination</name></name><argument_list>(<argument><expr><literal type="number">2l</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"---- Success ----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>getSketchSizes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSketches</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>out</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name>numSketches</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>runJaccardIndexEstimation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSketchesToBuild</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name>getFormattedHeader</name><argument_list>(<argument><expr><name>numSketchesToBuild</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>long</name></type> <name>order</name> <init>= <expr><literal type="number">1_000_000_000</literal></expr></init></decl>;</init> <condition><expr><name>order</name> <operator>&lt;=</operator> <literal type="number">1_000_000_000</literal></expr>;</condition> <incr><expr><name>order</name> <operator>*=</operator> <literal type="number">10</literal></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>double</name></type> <name>jaccardIndex</name> <init>= <expr><literal type="number">0.00_000_000_001</literal></expr></init></decl>;</init> <condition><expr><name>jaccardIndex</name> <operator>&lt;</operator> <literal type="number">0.0_000_001</literal></expr>;</condition>
            <incr><expr><name>jaccardIndex</name> <operator>*=</operator> <literal type="number">10</literal></expr></incr>)</control> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>jac</name> <init>= <expr><name>jaccardIndex</name> <operator>*</operator> <name>j</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>unionSize</name> <init>= <expr><call><name>plusMinusThreePercent</name><argument_list>(<argument><expr><name>order</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>intersectionSize</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>jac</name> <operator>*</operator> <name>unionSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>intersectionSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>sketchSize</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>unionSize</name> <operator>-</operator> <name>intersectionSize</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>numSketchesToBuild</name><operator>)</operator>
                <operator>+</operator> <name>intersectionSize</name></expr></init></decl>;</decl_stmt>
            <comment type="line">//            runTestIteration(intersectionSize, getSketchSizes(numSketchesToBuild, sketchSize))</comment>
            <expr_stmt><expr><call><name><name>threadPool</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>runTestIteration</name><argument_list>(
                <argument><expr><name>intersectionSize</name></expr></argument>,
                <argument><expr><call><name>getSketchSizes</name><argument_list>(<argument><expr><name>numSketchesToBuild</name></expr></argument>, <argument><expr><name>sketchSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>runTestIteration</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>exactIntersectionSize</name></decl></parameter>, <parameter><decl><type><name>long</name><modifier>...</modifier></type> <name>sketchSizes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></type> <name>sketches</name> <init>= <expr><call><name>buildIntersectingSketches</name><argument_list>(
        <argument><expr><name>exactIntersectionSize</name></expr></argument>,
        <argument><expr><name>sketchSizes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BetaMinHashCombiner</name></type> <name>combiner</name> <init>= <expr><call><name><name>BetaMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>sketches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <comment type="line">// hack</comment>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>sketchSizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>sketches</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cardinality</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name>exactUnionSize</name> <init>= <expr><call><name>sum</name><argument_list>(<argument><expr><name>sketchSizes</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>sketchSizes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>exactIntersectionSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>exactUnionSize</name> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>combiner</name><operator>.</operator><name>union</name></name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cardinality</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>exactIntersectionSize</name> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>combiner</name><operator>.</operator><name>intersectionCardinality</name></name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// jaccard</comment>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>exactIntersectionSize</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>exactUnionSize</name> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>exactIntersectionSize</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>exactUnionSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"oh boy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>combiner</name><operator>.</operator><name>similarity</name></name><argument_list>(<argument><expr><name>sketches</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>long</name><modifier>...</modifier></type> <name>xs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name></type> <name>x</name> <range>: <expr><name>xs</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>sum</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * The sum of sketch sizes can't be larger than Long.MAX_VALUE
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></type> <name>buildIntersectingSketches</name><parameter_list>(
      <parameter><decl><type><name>long</name></type> <name>intersectionSize</name></decl></parameter>,
      <parameter><decl><type><name>long</name><modifier>...</modifier></type> <name>sketchSizes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>BetaMinHash</name></argument>&gt;</argument_list></name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sketchSizes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// add intersecting items</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>intersectionSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>val</name> <init>= <expr><operator>(</operator><name>counter</name><operator>++</operator> <operator>+</operator> <literal type="string">""</literal><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>IntersectionSketch</name></type> <name>sketch</name> <range>: <expr><name>out</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

    </block_content>}</block></for>
    <comment type="line">// add disjoint items</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sketchSizes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>sketchSizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>intersectionSize</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>offer</name><argument_list>(<argument><expr><operator>(</operator><name>counter</name><operator>++</operator> <operator>+</operator> <literal type="string">""</literal><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>out</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * formatting helpers
   **/</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getFormattedHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// actual A | estimate A | actual B | estimate B | actual A U B | estimate A U B | actual A ? B | estimated A ? B</comment>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numSketches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"actual "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"estimated "</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"actual "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getUnionHeader</name><argument_list>(<argument><expr><name>numSketches</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"estimated "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getUnionHeader</name><argument_list>(<argument><expr><name>numSketches</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"actual "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getIntersectionHeader</name><argument_list>(<argument><expr><name>numSketches</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"estimated "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getIntersectionHeader</name><argument_list>(<argument><expr><name>numSketches</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"actual Jaccard index, estimated Jaccard index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getUnionHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSets</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>headerWithDelimiter</name><argument_list>(<argument><expr><name>numSets</name></expr></argument>, <argument><expr><literal type="string">"\u222A"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getIntersectionHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSets</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>headerWithDelimiter</name><argument_list>(<argument><expr><name>numSets</name></expr></argument>, <argument><expr><literal type="string">"\u2229"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>headerWithDelimiter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numSets</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>delim</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>numSets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>plusMinusThreePercent</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>pct</name> <init>= <expr><operator>(</operator><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3.1</literal><operator>)</operator> <operator>/</operator> <literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>pct</name><operator>)</operator> <operator>*</operator> <name>x</name><operator>)</operator></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/CommonTests.java" hash="39b02d548725cd228f9ac7a4beaa60e2b7c0823c"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class>class <name>CommonTests</name> <block>{

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>getError</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>expected</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>delta</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>result</name> <operator>-</operator> <name>expected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>delta</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>expected</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Sketch</name> <extends>extends <name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>testCardinality</name><parameter_list>(
      <parameter><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>sk</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxUniqueElements</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>minTestCardinality</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctErr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>unique</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>assertionCheckpoint</name> <init>= <expr><name>minTestCardinality</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>unique</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>maxUniqueElements</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name>randomByteArray</name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>sk</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>unique</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name><name>unique</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <name>assertionCheckpoint</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>exact</name> <init>= <expr><call><name><name>unique</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr><call><name><name>sk</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>assertionCheckpoint</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <call><name>getError</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>exact</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
            <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Got %f%% error, but expected at most %f%%"</literal></expr></argument>, <argument><expr><name>pctError</name></expr></argument>, <argument><expr><name>maxPctErr</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>pctError</name> <operator>&lt;=</operator> <name>maxPctErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Sketch</name> <extends>extends <name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>testUnion</name><parameter_list>(
      <parameter><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>sk1</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>sk2</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name><name>SketchCombiner</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></type> <name>combiner</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>elementsPerSketch</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctError</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>unique</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>elementsPerSketch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>elementsPerSketch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name>randomByteArray</name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>sk1</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>unique</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>randomByteArray</name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sk2</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>unique</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>msk</name> <init>= <expr><call><name><name>combiner</name><operator>.</operator><name>union</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>sk1</name></expr></argument>, <argument><expr><name>sk2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>exact</name> <init>= <expr><call><name><name>unique</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>res</name> <init>= <expr><call><name><name>msk</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <call><name>getError</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>exact</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
        <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Got %f%% error, but expected at most %f%%"</literal></expr></argument>, <argument><expr><name>pctError</name></expr></argument>, <argument><expr><name>maxPctError</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>pctError</name> <operator>&lt;=</operator> <name>maxPctError</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Sketch</name> <extends>extends <name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>testIntersection</name><parameter_list>(
      <parameter><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>emptySketch</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name><name>SketchCombiner</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></type> <name>combiner</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>overlapSlices</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>elementsInLeftSketches</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctError</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>overlapSlices</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

      <decl_stmt><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>sk1</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>sk2</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>frac</name> <init>= <expr><name>j</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>overlapSlices</name></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elementsInLeftSketches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sk1</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>intToByteArray</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>frac</name> <operator>*</operator> <name>elementsInLeftSketches</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>elementsInLeftSketches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sk2</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>intToByteArray</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>expected</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>elementsInLeftSketches</name> <operator>-</operator> <name>elementsInLeftSketches</name> <operator>*</operator> <name>frac</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>result</name> <init>= <expr><call><name><name>combiner</name><operator>.</operator><name>intersectionCardinality</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>sk1</name></expr></argument>, <argument><expr><name>sk2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <call><name>getError</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
          <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
              <argument><expr><literal type="string">"Expected error ratio to be at most %s but found %f"</literal></expr></argument>,
              <argument><expr><name>maxPctError</name></expr></argument>,
              <argument><expr><name>pctError</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>pctError</name> <operator>&lt;=</operator> <name>maxPctError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Sketch</name> <extends>extends <name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>testIntersectLargeSetWithSmall</name><parameter_list>(
      <parameter><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>emptySketch</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name><name>SketchCombiner</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></type> <name>combiner</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>smallSetSize</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bigSetSize</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctErr</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>smallSketch</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>smallSetSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>smallSketch</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>longToByteArray</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>bigSketch</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>bigSetSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>bigSketch</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>longToByteArray</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>expectedJaccardIndex</name> <init>= <expr><name>smallSetSize</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>bigSetSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>expectedIntersection</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>expectedJaccardIndex</name> <operator>*</operator> <name>bigSetSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>actualIntersection</name> <init>= <expr><call><name><name>combiner</name><operator>.</operator><name>intersectionCardinality</name></name><argument_list>(
        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>smallSketch</name></expr></argument>, <argument><expr><name>bigSketch</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <call><name>getError</name><argument_list>(<argument><expr><name>actualIntersection</name></expr></argument>, <argument><expr><name>expectedIntersection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
        <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
            <argument><expr><literal type="string">"Percent error for a small jaccard index (%s) should be less than %f, but found %f"</literal></expr></argument>,
            <argument><expr><name>expectedJaccardIndex</name></expr></argument>, <argument><expr><name>maxPctErr</name></expr></argument>, <argument><expr><name>pctError</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>pctError</name> <operator>&lt;</operator> <name>maxPctErr</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Sketch</name> <extends>extends <name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>testMultiwayIntersection</name><parameter_list>(
      <parameter><decl><type><specifier>final</specifier> <name>Sketch</name></type> <name>emptySketch</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name><name>SketchCombiner</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></type> <name>combiner</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>initialSketchSize</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>initialIntersectionSize</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>numIter</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>sketchSize</name> <init>= <expr><name>initialSketchSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>intersectionSize</name> <init>= <expr><name>initialIntersectionSize</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// union size gets bigger, jaccard gets smaller</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numIter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Sketch</name></type> <name>sk1</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Sketch</name></type> <name>sk2</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Sketch</name></type> <name>sk3</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Sketch</name></type> <name>sk4</name> <init>= <expr><call><name><name>emptySketch</name><operator>.</operator><name>deepCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>buildIntersectingSketches</name><argument_list>(<argument><expr><name>sketchSize</name></expr></argument>, <argument><expr><name>intersectionSize</name></expr></argument>, <argument><expr><name>sk1</name></expr></argument>, <argument><expr><name>sk2</name></expr></argument>, <argument><expr><name>sk3</name></expr></argument>, <argument><expr><name>sk4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>long</name></type> <name>expectedIntersection</name> <init>= <expr><name>intersectionSize</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>actualIntersection</name> <init>= <expr><call><name><name>combiner</name><operator>.</operator><name>intersectionCardinality</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>sk1</name></expr></argument>, <argument><expr><name>sk2</name></expr></argument>, <argument><expr><name>sk3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <call><name>getError</name><argument_list>(<argument><expr><name>actualIntersection</name></expr></argument>, <argument><expr><name>expectedIntersection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
          <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Expected pctError to be &lt;2, found %f. Expected: %d, Actual: %d"</literal></expr></argument>, <argument><expr><name>pctError</name></expr></argument>,
              <argument><expr><name>expectedIntersection</name></expr></argument>, <argument><expr><name>actualIntersection</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>pctError</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>intersectionSize</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>sketchSize</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="line">// builds equally sized sketches which share numSharedElements items</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Sketch</name> <extends>extends <name><name>IntersectionSketch</name><argument_list type="generic">&lt;<argument><name>Sketch</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>buildIntersectingSketches</name><parameter_list>(
      <parameter><decl><type><name>long</name></type> <name>sketchSize</name></decl></parameter>,
      <parameter><decl><type><name>long</name></type> <name>numSharedElements</name></decl></parameter>,
      <parameter><decl><type><name>Sketch</name><modifier>...</modifier></type> <name>sketches</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <assert>assert <expr><name>sketchSize</name> <operator>&gt;=</operator> <name>numSharedElements</name></expr>;</assert>

    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>numIter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>sketchSize</name> <operator>-</operator> <name>numSharedElements</name><operator>)</operator> <operator>*</operator> <name><name>sketches</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>numSharedElements</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numIter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>val</name> <init>= <expr><call><name>intToByteArray</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numSharedElements</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Sketch</name></type> <name>sketch</name> <range>: <expr><name>sketches</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>sketches</name><index>[<expr><name>i</name> <operator>%</operator> <name><name>sketches</name><operator>.</operator><name>length</name></name></expr>]</index></name><operator>.</operator><call><name>offer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>randomByteArray</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>n</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>b</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>intToByteArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <name>value</name></expr>}</block></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>longToByteArray</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator> <name>value</name></expr>
    }</block></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>randPositiveInt</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/RandomTestRunner.java" hash="a06df6b57e4e233d98a10cb262b3d53f242dab06"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>

<class><specifier>public</specifier> class <name>RandomTestRunner</name> <block>{

  <function><type><specifier>static</specifier> <name>void</name></type> <name>runRandomizedTest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>Random</name></argument>&gt;</argument_list></name></type> <name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Random</name></type> <name>rng</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iterations</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>seed</name> <init>= <expr><call><name><name>rng</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>runRandomizedTestWithSeed</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <comment type="line">// Can be called directly to recreate bugs</comment>
  <function><type><specifier>static</specifier> <name>void</name></type> <name>runRandomizedTestWithSeed</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>Random</name></argument>&gt;</argument_list></name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Random</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>(<argument><expr><literal type="string">"Test failure. Seed = "</literal> <operator>+</operator> <name>seed</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/TestBetaMinHash.java" hash="803d113213d5814d0032a296f70fcd4afb58d065"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<class><specifier>public</specifier> class <name>TestBetaMinHash</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testZeroCardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>BetaMinHash</name></type> <name>sk</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>sk</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCardinality</name><parameter_list>()</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxUniqueElements</name> <init>= <expr><literal type="number">10_000_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>minTestCardinality</name> <init>= <expr><literal type="number">10_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctErr</name> <init>= <expr><literal type="number">3.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(
        <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>random</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>CommonTests</name><operator>.</operator><name>testCardinality</name></name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>maxUniqueElements</name></expr></argument>,
            <argument><expr><name>minTestCardinality</name></expr></argument>,
            <argument><expr><name>random</name></expr></argument>,
            <argument><expr><name>pctErr</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUnion</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BetaMinHashCombiner</name></type> <name>combiner</name> <init>= <expr><call><name><name>BetaMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>elementsPerSketch</name> <init>= <expr><literal type="number">1_500_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctErr</name> <init>= <expr><literal type="number">3.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(
        <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>random</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>CommonTests</name><operator>.</operator><name>testUnion</name></name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>combiner</name></expr></argument>,
            <argument><expr><name>elementsPerSketch</name></expr></argument>,
            <argument><expr><name>pctErr</name></expr></argument>,
            <argument><expr><name>random</name></expr></argument>
        )</argument_list></call></expr></block_content></block></lambda></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntersectionCardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>overlapSlices</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numElementsLeftSketch</name> <init>= <expr><literal type="number">1_000_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">5.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testIntersection</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>BetaMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>overlapSlices</name></expr></argument>,
        <argument><expr><name>numElementsLeftSketch</name></expr></argument>,
        <argument><expr><name>pctError</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>

  <type><specifier>public</specifier> <name>void</name></type> <name>testIntersectLargeSetWithSmallSet</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>smallSetSize</name> <init>= <expr><literal type="number">1_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bigSetSize</name> <init>= <expr><literal type="number">1_000_000</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctErr</name> <init>= <expr><literal type="number">22.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testIntersectLargeSetWithSmall</name></name><argument_list>(
          <argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>BetaMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>smallSetSize</name></expr></argument>,
          <argument><expr><name>bigSetSize</name></expr></argument>,
          <argument><expr><name>maxPctErr</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>smallSetSize</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bigSetSize</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testMultiwayIntersection</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>initialIntersectionSize</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>initialSketchSize</name> <init>= <expr><literal type="number">10_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numIter</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testMultiwayIntersection</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>BetaMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>initialSketchSize</name></expr></argument>,
        <argument><expr><name>initialIntersectionSize</name></expr></argument>,
        <argument><expr><name>numIter</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/TestBetaMinHashSerde.java" hash="8dfc73a01c87e31d1fdcd95977580dc97314a53e"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<class><specifier>public</specifier> class <name>TestBetaMinHashSerde</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRoundtripEmptySketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>BetaMinHashSerde</name></type> <name>serde</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHashSerde</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BetaMinHash</name></type> <name>sketch</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>, <argument><expr><call><name><name>serde</name><operator>.</operator><name>fromBytes</name></name><argument_list>(<argument><expr><call><name><name>serde</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRoundtripFilledSketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>BetaMinHashSerde</name></type> <name>serde</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHashSerde</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">5_000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(<argument><expr><name>iterations</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rng</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>BetaMinHash</name></type> <name>sketch</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>numElements</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numElements</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>randomByteArrayOfLength</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>, <argument><expr><call><name><name>serde</name><operator>.</operator><name>fromBytes</name></name><argument_list>(<argument><expr><call><name><name>serde</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSizeInBytes</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// not super valuable right now since we store a fixed size sketch, but futureproofing</comment>
    <decl_stmt><decl><type><name>BetaMinHashSerde</name></type> <name>serde</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHashSerde</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(<argument><expr><literal type="number">1_000</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rng</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>BetaMinHash</name></type> <name>sketch</name> <init>= <expr><operator>new</operator> <call><name>BetaMinHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>numElements</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numElements</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sketch</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>randomByteArrayOfLength</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>serde</name><operator>.</operator><name>sizeInBytes</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>serde</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name>sketch</name></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>randomByteArrayOfLength</name><parameter_list>(<parameter><decl><type><name>Random</name></type> <name>rng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rng</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/TestHmhCardinalityEstimator.java" hash="28100e04e7708169c7b5077e9c393c6c473a7e45"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>TestHmhCardinalityEstimator</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testBiasCorrection</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>rawEstimates</name> <init>= <expr><block>{<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>biases</name> <init>= <expr><block>{<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><operator>-</operator><literal type="number">2.0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>basicEstimate</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>slope</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">5.0</literal> <operator>-</operator> <literal type="number">3.0</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">10.0</literal> <operator>-</operator> <literal type="number">5.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>expectedOutput</name> <init>= <expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">3.0</literal> <operator>+</operator> <operator>(</operator><name>slope</name> <operator>*</operator> <operator>(</operator><literal type="number">7.0</literal> <operator>-</operator> <literal type="number">5.0</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>actualEstimate</name> <init>= <expr><call><name><name>HmhCardinalityEstimator</name><operator>.</operator><name>biasCorrectEstimate</name></name><argument_list>(
        <argument><expr><name>basicEstimate</name></expr></argument>,
        <argument><expr><name>rawEstimates</name></expr></argument>,
        <argument><expr><name>biases</name></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>expectedOutput</name></expr></argument>, <argument><expr><name>actualEstimate</name></expr></argument>, <argument><expr><literal type="number">0.0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/TestHyperMinHash.java" hash="868e3714f86bf48848975a95470305e3f49b4cc9"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<class><specifier>public</specifier> class <name>TestHyperMinHash</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testZeroCardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HyperMinHash</name></type> <name>sk</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>sk</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testCardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxUniqueElements</name> <init>= <expr><literal type="number">10_000_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>minTestCardinality</name> <init>= <expr><literal type="number">10_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctErr</name> <init>= <expr><literal type="number">3.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(
        <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>random</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>CommonTests</name><operator>.</operator><name>testCardinality</name></name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>maxUniqueElements</name></expr></argument>,
            <argument><expr><name>minTestCardinality</name></expr></argument>,
            <argument><expr><name>random</name></expr></argument>,
            <argument><expr><name>pctErr</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testUnion</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>HyperMinHashCombiner</name></type> <name>combiner</name> <init>= <expr><call><name><name>HyperMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>elementsPerSketch</name> <init>= <expr><literal type="number">1_500_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctErr</name> <init>= <expr><literal type="number">3.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(
        <argument><expr><literal type="number">3</literal></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>random</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>CommonTests</name><operator>.</operator><name>testUnion</name></name><argument_list>(
            <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>combiner</name></expr></argument>,
            <argument><expr><name>elementsPerSketch</name></expr></argument>,
            <argument><expr><name>pctErr</name></expr></argument>,
            <argument><expr><name>random</name></expr></argument>
        )</argument_list></call></expr></block_content></block></lambda></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntersectionCardinality</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>overlapSlices</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numElementsLeftSketch</name> <init>= <expr><literal type="number">1_000_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>pctError</name> <init>= <expr><literal type="number">5.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testIntersection</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>HyperMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>overlapSlices</name></expr></argument>,
        <argument><expr><name>numElementsLeftSketch</name></expr></argument>,
        <argument><expr><name>pctError</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntersectionWithSmallJaccard</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// .001 Jaccard</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>smallSetSize</name> <init>= <expr><literal type="number">1_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bigSetSize</name> <init>= <expr><literal type="number">1_000_000</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctErr</name> <init>= <expr><literal type="number">20.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testIntersectLargeSetWithSmall</name></name><argument_list>(
          <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>HyperMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>smallSetSize</name></expr></argument>,
          <argument><expr><name>bigSetSize</name></expr></argument>,
          <argument><expr><name>maxPctErr</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>smallSetSize</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bigSetSize</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntersectionWithExtremelySmallJaccard</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// .0001 Jaccard</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>smallSetSize</name> <init>= <expr><literal type="number">1_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bigSetSize</name> <init>= <expr><literal type="number">10_000_000</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>maxPctErr</name> <init>= <expr><literal type="number">20.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testIntersectLargeSetWithSmall</name></name><argument_list>(
          <comment type="line">// make a beefy sketch since we're asking for a lot here</comment>
          <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>HyperMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><name>smallSetSize</name></expr></argument>,
          <argument><expr><name>bigSetSize</name></expr></argument>,
          <argument><expr><name>maxPctErr</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>smallSetSize</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bigSetSize</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testMultiwayIntersection</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>initialIntersectionSize</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>initialSketchSize</name> <init>= <expr><literal type="number">10_000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numIter</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>CommonTests</name><operator>.</operator><name>testMultiwayIntersection</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>HyperMinHashCombiner</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>initialSketchSize</name></expr></argument>,
        <argument><expr><name>initialIntersectionSize</name></expr></argument>,
        <argument><expr><name>numIter</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/TestHyperMinHashSerDe.java" hash="debafde7e4a9f0c41a2bb01e00bc770222c913e9"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<class><specifier>public</specifier> class <name>TestHyperMinHashSerDe</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRoundtripEmptySketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HyperMinHashSerDe</name></type> <name>serde</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHashSerDe</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">1_000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// multiple iterations so we can try for different values of P/R</comment>

    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(<argument><expr><name>iterations</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rng</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>HyperMinHash</name></type> <name>hyperMinHash</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>hyperMinHash</name></expr></argument>, <argument><expr><call><name><name>serde</name><operator>.</operator><name>fromBytes</name></name><argument_list>(<argument><expr><call><name><name>serde</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name>hyperMinHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testRoundtripFilledSketch</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HyperMinHashSerDe</name></type> <name>serde</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHashSerDe</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">5_000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(<argument><expr><name>iterations</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rng</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>HyperMinHash</name></type> <name>hmh</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>numElements</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numElements</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hmh</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>randomByteArrayOfLength</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>hmh</name></expr></argument>, <argument><expr><call><name><name>serde</name><operator>.</operator><name>fromBytes</name></name><argument_list>(<argument><expr><call><name><name>serde</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name>hmh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testSizeInBytes</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>HyperMinHashSerDe</name></type> <name>serde</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHashSerDe</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RandomTestRunner</name><operator>.</operator><name>runRandomizedTest</name></name><argument_list>(<argument><expr><literal type="number">1_000</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rng</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>HyperMinHash</name></type> <name>hmh</name> <init>= <expr><operator>new</operator> <call><name>HyperMinHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>numElements</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numElements</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hmh</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name>randomByteArrayOfLength</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>serde</name><operator>.</operator><name>sizeInBytes</name></name><argument_list>(<argument><expr><name>hmh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>serde</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name>hmh</name></expr></argument>)</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>randomByteArrayOfLength</name><parameter_list>(<parameter><decl><type><name>Random</name></type> <name>rng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rng</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="LiveRamp-HyperMinHash-java-fa6e208/src/test/java/com/liveramp/hyperminhash/TestPackers.java" hash="5b7b918a23a23d85766befdf61031d97ba3e4aae"><package>package <name><name>com</name><operator>.</operator><name>liveramp</name><operator>.</operator><name>hyperminhash</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<class><specifier>public</specifier> class <name>TestPackers</name> <block>{

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testLongPacker</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">100_000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Random</name></type> <name>rng</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iterations</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

      <comment type="line">// leading zeroes is at most 6 bits i.e: 63</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>leftmostOnePos</name> <init>= <expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// r can be at most 58</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>minHashBits</name> <init>= <expr><call><name><name>rng</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>long</name></type> <name>packedRegister</name> <init>= <expr><call><name><name>LongPacker</name><operator>.</operator><name>pack</name></name><argument_list>(<argument><expr><name>leftmostOnePos</name></expr></argument>, <argument><expr><name>minHashBits</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>leftmostOnePos</name></expr></argument>, <argument><expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name>packedRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>minHashBits</name></expr></argument>, <argument><expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name>packedRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><annotation>@<name>Test</name></annotation>
  <type><specifier>public</specifier> <name>void</name></type> <name>testIntPacker</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iterations</name> <init>= <expr><literal type="number">100_000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Random</name></type> <name>rng</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iterations</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

      <comment type="line">// leading zeroes is at most 6 bits i.e: 63</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>leftmostOnePos</name> <init>= <expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// r can be at most 58</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>minHashBits</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><call><name><name>rng</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call> <operator>&gt;&gt;&gt;</operator> <operator>(</operator><name><name>Long</name><operator>.</operator><name>SIZE</name></name> <operator>-</operator> <name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>packedRegister</name> <init>= <expr><call><name><name>IntPacker</name><operator>.</operator><name>pack</name></name><argument_list>(<argument><expr><name>leftmostOnePos</name></expr></argument>, <argument><expr><name>minHashBits</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>leftmostOnePos</name></expr></argument>, <argument><expr><call><name><name>IntPacker</name><operator>.</operator><name>unpackPositionOfFirstOne</name></name><argument_list>(<argument><expr><name>packedRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertEquals</name></name><argument_list>(<argument><expr><name>minHashBits</name></expr></argument>, <argument><expr><call><name><name>LongPacker</name><operator>.</operator><name>unpackMantissa</name></name><argument_list>(<argument><expr><name>packedRegister</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  </block_content>}</block></function>
}</block></class>
</unit>

</unit>
